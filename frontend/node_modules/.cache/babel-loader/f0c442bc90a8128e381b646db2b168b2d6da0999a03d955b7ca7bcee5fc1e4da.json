{"ast":null,"code":"import _objectSpread from \"C:/Users/USER/Desktop/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _assertThisInitialized from \"C:/Users/USER/Desktop/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/USER/Desktop/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/USER/Desktop/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/USER/Desktop/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/USER/Desktop/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"C:/Users/USER/Desktop/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/USER/Desktop/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty from \"C:/Users/USER/Desktop/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"C:/Users/USER/Desktop/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/USER/Desktop/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/USER/Desktop/expense-tracker_fullstack-master/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*!\n * Chart.js v4.4.6\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as _color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as _getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\nvar Animator = /*#__PURE__*/function () {\n  function Animator() {\n    _classCallCheck(this, Animator);\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _createClass(Animator, [{\n    key: \"_notify\",\n    value: function _notify(chart, anims, date, type) {\n      var callbacks = anims.listeners[type];\n      var numSteps = anims.duration;\n      callbacks.forEach(function (fn) {\n        return fn({\n          chart: chart,\n          initial: anims.initial,\n          numSteps: numSteps,\n          currentStep: Math.min(date - anims.start, numSteps)\n        });\n      });\n    }\n  }, {\n    key: \"_refresh\",\n    value: function _refresh() {\n      var _this = this;\n      if (this._request) {\n        return;\n      }\n      this._running = true;\n      this._request = requestAnimFrame.call(window, function () {\n        _this._update();\n        _this._request = null;\n        if (_this._running) {\n          _this._refresh();\n        }\n      });\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      var _this2 = this;\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n      var remaining = 0;\n      this._charts.forEach(function (anims, chart) {\n        if (!anims.running || !anims.items.length) {\n          return;\n        }\n        var items = anims.items;\n        var i = items.length - 1;\n        var draw = false;\n        var item;\n        for (; i >= 0; --i) {\n          item = items[i];\n          if (item._active) {\n            if (item._total > anims.duration) {\n              anims.duration = item._total;\n            }\n            item.tick(date);\n            draw = true;\n          } else {\n            items[i] = items[items.length - 1];\n            items.pop();\n          }\n        }\n        if (draw) {\n          chart.draw();\n          _this2._notify(chart, anims, date, 'progress');\n        }\n        if (!items.length) {\n          anims.running = false;\n          _this2._notify(chart, anims, date, 'complete');\n          anims.initial = false;\n        }\n        remaining += items.length;\n      });\n      this._lastDate = date;\n      if (remaining === 0) {\n        this._running = false;\n      }\n    }\n  }, {\n    key: \"_getAnims\",\n    value: function _getAnims(chart) {\n      var charts = this._charts;\n      var anims = charts.get(chart);\n      if (!anims) {\n        anims = {\n          running: false,\n          initial: true,\n          items: [],\n          listeners: {\n            complete: [],\n            progress: []\n          }\n        };\n        charts.set(chart, anims);\n      }\n      return anims;\n    }\n  }, {\n    key: \"listen\",\n    value: function listen(chart, event, cb) {\n      this._getAnims(chart).listeners[event].push(cb);\n    }\n  }, {\n    key: \"add\",\n    value: function add(chart, items) {\n      var _this$_getAnims$items;\n      if (!items || !items.length) {\n        return;\n      }\n      (_this$_getAnims$items = this._getAnims(chart).items).push.apply(_this$_getAnims$items, _toConsumableArray(items));\n    }\n  }, {\n    key: \"has\",\n    value: function has(chart) {\n      return this._getAnims(chart).items.length > 0;\n    }\n  }, {\n    key: \"start\",\n    value: function start(chart) {\n      var anims = this._charts.get(chart);\n      if (!anims) {\n        return;\n      }\n      anims.running = true;\n      anims.start = Date.now();\n      anims.duration = anims.items.reduce(function (acc, cur) {\n        return Math.max(acc, cur._duration);\n      }, 0);\n      this._refresh();\n    }\n  }, {\n    key: \"running\",\n    value: function running(chart) {\n      if (!this._running) {\n        return false;\n      }\n      var anims = this._charts.get(chart);\n      if (!anims || !anims.running || !anims.items.length) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(chart) {\n      var anims = this._charts.get(chart);\n      if (!anims || !anims.items.length) {\n        return;\n      }\n      var items = anims.items;\n      var i = items.length - 1;\n      for (; i >= 0; --i) {\n        items[i].cancel();\n      }\n      anims.items = [];\n      this._notify(chart, anims, Date.now(), 'complete');\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(chart) {\n      return this._charts.delete(chart);\n    }\n  }]);\n  return Animator;\n}();\nvar animator = /* #__PURE__ */new Animator();\nvar transparent = 'transparent';\nvar interpolators = {\n  boolean: function boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color: function color(from, to, factor) {\n    var c0 = _color(from || transparent);\n    var c1 = c0.valid && _color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number: function number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nvar Animation = /*#__PURE__*/function () {\n  function Animation(cfg, target, prop, to) {\n    _classCallCheck(this, Animation);\n    var currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    var from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  _createClass(Animation, [{\n    key: \"active\",\n    value: function active() {\n      return this._active;\n    }\n  }, {\n    key: \"update\",\n    value: function update(cfg, to, date) {\n      if (this._active) {\n        this._notify(false);\n        var currentValue = this._target[this._prop];\n        var elapsed = date - this._start;\n        var remain = this._duration - elapsed;\n        this._start = date;\n        this._duration = Math.floor(Math.max(remain, cfg.duration));\n        this._total += elapsed;\n        this._loop = !!cfg.loop;\n        this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n        this._from = resolve([cfg.from, currentValue, to]);\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this._active) {\n        this.tick(Date.now());\n        this._active = false;\n        this._notify(false);\n      }\n    }\n  }, {\n    key: \"tick\",\n    value: function tick(date) {\n      var elapsed = date - this._start;\n      var duration = this._duration;\n      var prop = this._prop;\n      var from = this._from;\n      var loop = this._loop;\n      var to = this._to;\n      var factor;\n      this._active = from !== to && (loop || elapsed < duration);\n      if (!this._active) {\n        this._target[prop] = to;\n        this._notify(true);\n        return;\n      }\n      if (elapsed < 0) {\n        this._target[prop] = from;\n        return;\n      }\n      factor = elapsed / duration % 2;\n      factor = loop && factor > 1 ? 2 - factor : factor;\n      factor = this._easing(Math.min(1, Math.max(0, factor)));\n      this._target[prop] = this._fn(from, to, factor);\n    }\n  }, {\n    key: \"wait\",\n    value: function wait() {\n      var promises = this._promises || (this._promises = []);\n      return new Promise(function (res, rej) {\n        promises.push({\n          res: res,\n          rej: rej\n        });\n      });\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify(resolved) {\n      var method = resolved ? 'res' : 'rej';\n      var promises = this._promises || [];\n      for (var i = 0; i < promises.length; i++) {\n        promises[i][method]();\n      }\n    }\n  }]);\n  return Animation;\n}();\nvar Animations = /*#__PURE__*/function () {\n  function Animations(chart, config) {\n    _classCallCheck(this, Animations);\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  _createClass(Animations, [{\n    key: \"configure\",\n    value: function configure(config) {\n      if (!isObject(config)) {\n        return;\n      }\n      var animationOptions = Object.keys(defaults.animation);\n      var animatedProps = this._properties;\n      Object.getOwnPropertyNames(config).forEach(function (key) {\n        var cfg = config[key];\n        if (!isObject(cfg)) {\n          return;\n        }\n        var resolved = {};\n        for (var _i = 0, _animationOptions = animationOptions; _i < _animationOptions.length; _i++) {\n          var option = _animationOptions[_i];\n          resolved[option] = cfg[option];\n        }\n        (isArray(cfg.properties) && cfg.properties || [key]).forEach(function (prop) {\n          if (prop === key || !animatedProps.has(prop)) {\n            animatedProps.set(prop, resolved);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_animateOptions\",\n    value: function _animateOptions(target, values) {\n      var newOptions = values.options;\n      var options = resolveTargetOptions(target, newOptions);\n      if (!options) {\n        return [];\n      }\n      var animations = this._createAnimations(options, newOptions);\n      if (newOptions.$shared) {\n        awaitAll(target.options.$animations, newOptions).then(function () {\n          target.options = newOptions;\n        }, function () {});\n      }\n      return animations;\n    }\n  }, {\n    key: \"_createAnimations\",\n    value: function _createAnimations(target, values) {\n      var animatedProps = this._properties;\n      var animations = [];\n      var running = target.$animations || (target.$animations = {});\n      var props = Object.keys(values);\n      var date = Date.now();\n      var i;\n      for (i = props.length - 1; i >= 0; --i) {\n        var prop = props[i];\n        if (prop.charAt(0) === '$') {\n          continue;\n        }\n        if (prop === 'options') {\n          animations.push.apply(animations, _toConsumableArray(this._animateOptions(target, values)));\n          continue;\n        }\n        var value = values[prop];\n        var animation = running[prop];\n        var cfg = animatedProps.get(prop);\n        if (animation) {\n          if (cfg && animation.active()) {\n            animation.update(cfg, value, date);\n            continue;\n          } else {\n            animation.cancel();\n          }\n        }\n        if (!cfg || !cfg.duration) {\n          target[prop] = value;\n          continue;\n        }\n        running[prop] = animation = new Animation(cfg, target, prop, value);\n        animations.push(animation);\n      }\n      return animations;\n    }\n  }, {\n    key: \"update\",\n    value: function update(target, values) {\n      if (this._properties.size === 0) {\n        Object.assign(target, values);\n        return;\n      }\n      var animations = this._createAnimations(target, values);\n      if (animations.length) {\n        animator.add(this._chart, animations);\n        return true;\n      }\n    }\n  }]);\n  return Animations;\n}();\nfunction awaitAll(animations, properties) {\n  var running = [];\n  var keys = Object.keys(properties);\n  for (var i = 0; i < keys.length; i++) {\n    var anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  var options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  var opts = scale && scale.options || {};\n  var reverse = opts.reverse;\n  var min = opts.min === undefined ? allowedOverflow : 0;\n  var max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  var x = scaleClip(xScale, allowedOverflow);\n  var y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  var t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  var keys = [];\n  var metasets = chart._getSortedDatasetMetas(filterVisible);\n  var i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction _applyStack(stack, value, dsIndex) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var keys = stack.keys;\n  var singleMode = options.mode === 'single';\n  var i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  var found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  if (!found && !options.all) {\n    return 0;\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n  var iScale = meta.iScale,\n    vScale = meta.vScale;\n  var iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  var vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  var keys = Object.keys(data);\n  var adata = new Array(keys.length);\n  var i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    var _adata$i;\n    key = keys[i];\n    adata[i] = (_adata$i = {}, _defineProperty(_adata$i, iAxisKey, key), _defineProperty(_adata$i, vAxisKey, data[key]), _adata$i);\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  var stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return \"\".concat(indexScale.id, \".\").concat(valueScale.id, \".\").concat(meta.stack || meta.type);\n}\nfunction getUserBounds(scale) {\n  var _scale$getUserBounds = scale.getUserBounds(),\n    min = _scale$getUserBounds.min,\n    max = _scale$getUserBounds.max,\n    minDefined = _scale$getUserBounds.minDefined,\n    maxDefined = _scale$getUserBounds.maxDefined;\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  var subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  var _iterator = _createForOfIteratorHelper(vScale.getMatchingVisibleMetas(type).reverse()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var meta = _step.value;\n      var value = stack[meta.index];\n      if (positive && value > 0 || !positive && value < 0) {\n        return meta.index;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  var chart = controller.chart,\n    meta = controller._cachedMeta;\n  var stacks = chart._stacks || (chart._stacks = {});\n  var iScale = meta.iScale,\n    vScale = meta.vScale,\n    datasetIndex = meta.index;\n  var iAxis = iScale.axis;\n  var vAxis = vScale.axis;\n  var key = getStackKey(iScale, vScale, meta);\n  var ilen = parsed.length;\n  var stack;\n  for (var i = 0; i < ilen; ++i) {\n    var item = parsed[i];\n    var _index = item[iAxis],\n      value = item[vAxis];\n    var itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, _index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    var visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  var scales = chart.scales;\n  return Object.keys(scales).filter(function (key) {\n    return scales[key].axis === axis;\n  }).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index: index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element: element,\n    index: index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  var datasetIndex = meta.controller.index;\n  var axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  var _iterator2 = _createForOfIteratorHelper(items),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var parsed = _step2.value;\n      var stacks = parsed._stacks;\n      if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n        return;\n      }\n      delete stacks[axis][datasetIndex];\n      if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n        delete stacks[axis]._visualValues[datasetIndex];\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\nvar isDirectUpdateMode = function isDirectUpdateMode(mode) {\n  return mode === 'reset' || mode === 'none';\n};\nvar cloneIfNotShared = function cloneIfNotShared(cached, shared) {\n  return shared ? cached : Object.assign({}, cached);\n};\nvar createStack = function createStack(canStack, meta, chart) {\n  return canStack && !meta.hidden && meta._stacked && {\n    keys: getSortedDatasetIndices(chart, true),\n    values: null\n  };\n};\nvar DatasetController = /*#__PURE__*/function () {\n  function DatasetController(chart, datasetIndex) {\n    _classCallCheck(this, DatasetController);\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = (this instanceof DatasetController ? this.constructor : void 0).datasetElementType;\n    this.dataElementType = (this instanceof DatasetController ? this.constructor : void 0).dataElementType;\n    this.initialize();\n  }\n  _createClass(DatasetController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var meta = this._cachedMeta;\n      this.configure();\n      this.linkScales();\n      meta._stacked = isStacked(meta.vScale, meta);\n      this.addElements();\n      if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n        console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n      }\n    }\n  }, {\n    key: \"updateIndex\",\n    value: function updateIndex(datasetIndex) {\n      if (this.index !== datasetIndex) {\n        clearStacks(this._cachedMeta);\n      }\n      this.index = datasetIndex;\n    }\n  }, {\n    key: \"linkScales\",\n    value: function linkScales() {\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var dataset = this.getDataset();\n      var chooseId = function chooseId(axis, x, y, r) {\n        return axis === 'x' ? x : axis === 'r' ? r : y;\n      };\n      var xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n      var yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n      var rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n      var indexAxis = meta.indexAxis;\n      var iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n      var vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n      meta.xScale = this.getScaleForId(xid);\n      meta.yScale = this.getScaleForId(yid);\n      meta.rScale = this.getScaleForId(rid);\n      meta.iScale = this.getScaleForId(iid);\n      meta.vScale = this.getScaleForId(vid);\n    }\n  }, {\n    key: \"getDataset\",\n    value: function getDataset() {\n      return this.chart.data.datasets[this.index];\n    }\n  }, {\n    key: \"getMeta\",\n    value: function getMeta() {\n      return this.chart.getDatasetMeta(this.index);\n    }\n  }, {\n    key: \"getScaleForId\",\n    value: function getScaleForId(scaleID) {\n      return this.chart.scales[scaleID];\n    }\n  }, {\n    key: \"_getOtherScale\",\n    value: function _getOtherScale(scale) {\n      var meta = this._cachedMeta;\n      return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._update('reset');\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      var meta = this._cachedMeta;\n      if (this._data) {\n        unlistenArrayEvents(this._data, this);\n      }\n      if (meta._stacked) {\n        clearStacks(meta);\n      }\n    }\n  }, {\n    key: \"_dataCheck\",\n    value: function _dataCheck() {\n      var dataset = this.getDataset();\n      var data = dataset.data || (dataset.data = []);\n      var _data = this._data;\n      if (isObject(data)) {\n        var meta = this._cachedMeta;\n        this._data = convertObjectDataToArray(data, meta);\n      } else if (_data !== data) {\n        if (_data) {\n          unlistenArrayEvents(_data, this);\n          var _meta = this._cachedMeta;\n          clearStacks(_meta);\n          _meta._parsed = [];\n        }\n        if (data && Object.isExtensible(data)) {\n          listenArrayEvents(data, this);\n        }\n        this._syncList = [];\n        this._data = data;\n      }\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      var meta = this._cachedMeta;\n      this._dataCheck();\n      if (this.datasetElementType) {\n        meta.dataset = new this.datasetElementType();\n      }\n    }\n  }, {\n    key: \"buildOrUpdateElements\",\n    value: function buildOrUpdateElements(resetNewElements) {\n      var meta = this._cachedMeta;\n      var dataset = this.getDataset();\n      var stackChanged = false;\n      this._dataCheck();\n      var oldStacked = meta._stacked;\n      meta._stacked = isStacked(meta.vScale, meta);\n      if (meta.stack !== dataset.stack) {\n        stackChanged = true;\n        clearStacks(meta);\n        meta.stack = dataset.stack;\n      }\n      this._resyncElements(resetNewElements);\n      if (stackChanged || oldStacked !== meta._stacked) {\n        updateStacks(this, meta._parsed);\n        meta._stacked = isStacked(meta.vScale, meta);\n      }\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var config = this.chart.config;\n      var scopeKeys = config.datasetScopeKeys(this._type);\n      var scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n      this.options = config.createResolver(scopes, this.getContext());\n      this._parsing = this.options.parsing;\n      this._cachedDataOpts = {};\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(start, count) {\n      var meta = this._cachedMeta,\n        data = this._data;\n      var iScale = meta.iScale,\n        _stacked = meta._stacked;\n      var iAxis = iScale.axis;\n      var sorted = start === 0 && count === data.length ? true : meta._sorted;\n      var prev = start > 0 && meta._parsed[start - 1];\n      var i, cur, parsed;\n      if (this._parsing === false) {\n        meta._parsed = data;\n        meta._sorted = true;\n        parsed = data;\n      } else {\n        if (isArray(data[start])) {\n          parsed = this.parseArrayData(meta, data, start, count);\n        } else if (isObject(data[start])) {\n          parsed = this.parseObjectData(meta, data, start, count);\n        } else {\n          parsed = this.parsePrimitiveData(meta, data, start, count);\n        }\n        var isNotInOrderComparedToPrev = function isNotInOrderComparedToPrev() {\n          return cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n        };\n        for (i = 0; i < count; ++i) {\n          meta._parsed[i + start] = cur = parsed[i];\n          if (sorted) {\n            if (isNotInOrderComparedToPrev()) {\n              sorted = false;\n            }\n            prev = cur;\n          }\n        }\n        meta._sorted = sorted;\n      }\n      if (_stacked) {\n        updateStacks(this, parsed);\n      }\n    }\n  }, {\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      var iScale = meta.iScale,\n        vScale = meta.vScale;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var labels = iScale.getLabels();\n      var singleScale = iScale === vScale;\n      var parsed = new Array(count);\n      var i, ilen, index;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        var _parsed$i;\n        index = i + start;\n        parsed[i] = (_parsed$i = {}, _defineProperty(_parsed$i, iAxis, singleScale || iScale.parse(labels[index], index)), _defineProperty(_parsed$i, vAxis, vScale.parse(data[index], index)), _parsed$i);\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var parsed = new Array(count);\n      var i, ilen, index, item;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n          x: xScale.parse(item[0], index),\n          y: yScale.parse(item[1], index)\n        };\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var _this$_parsing = this._parsing,\n        _this$_parsing$xAxisK = _this$_parsing.xAxisKey,\n        xAxisKey = _this$_parsing$xAxisK === void 0 ? 'x' : _this$_parsing$xAxisK,\n        _this$_parsing$yAxisK = _this$_parsing.yAxisKey,\n        yAxisKey = _this$_parsing$yAxisK === void 0 ? 'y' : _this$_parsing$yAxisK;\n      var parsed = new Array(count);\n      var i, ilen, index, item;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n          x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n          y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n        };\n      }\n      return parsed;\n    }\n  }, {\n    key: \"getParsed\",\n    value: function getParsed(index) {\n      return this._cachedMeta._parsed[index];\n    }\n  }, {\n    key: \"getDataElement\",\n    value: function getDataElement(index) {\n      return this._cachedMeta.data[index];\n    }\n  }, {\n    key: \"applyStack\",\n    value: function applyStack(scale, parsed, mode) {\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var value = parsed[scale.axis];\n      var stack = {\n        keys: getSortedDatasetIndices(chart, true),\n        values: parsed._stacks[scale.axis]._visualValues\n      };\n      return _applyStack(stack, value, meta.index, {\n        mode: mode\n      });\n    }\n  }, {\n    key: \"updateRangeFromParsed\",\n    value: function updateRangeFromParsed(range, scale, parsed, stack) {\n      var parsedValue = parsed[scale.axis];\n      var value = parsedValue === null ? NaN : parsedValue;\n      var values = stack && parsed._stacks[scale.axis];\n      if (stack && values) {\n        stack.values = values;\n        value = _applyStack(stack, parsedValue, this._cachedMeta.index);\n      }\n      range.min = Math.min(range.min, value);\n      range.max = Math.max(range.max, value);\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax(scale, canStack) {\n      var meta = this._cachedMeta;\n      var _parsed = meta._parsed;\n      var sorted = meta._sorted && scale === meta.iScale;\n      var ilen = _parsed.length;\n      var otherScale = this._getOtherScale(scale);\n      var stack = createStack(canStack, meta, this.chart);\n      var range = {\n        min: Number.POSITIVE_INFINITY,\n        max: Number.NEGATIVE_INFINITY\n      };\n      var _getUserBounds = getUserBounds(otherScale),\n        otherMin = _getUserBounds.min,\n        otherMax = _getUserBounds.max;\n      var i, parsed;\n      function _skip() {\n        parsed = _parsed[i];\n        var otherValue = parsed[otherScale.axis];\n        return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n      }\n      for (i = 0; i < ilen; ++i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        if (sorted) {\n          break;\n        }\n      }\n      if (sorted) {\n        for (i = ilen - 1; i >= 0; --i) {\n          if (_skip()) {\n            continue;\n          }\n          this.updateRangeFromParsed(range, scale, parsed, stack);\n          break;\n        }\n      }\n      return range;\n    }\n  }, {\n    key: \"getAllParsedValues\",\n    value: function getAllParsedValues(scale) {\n      var parsed = this._cachedMeta._parsed;\n      var values = [];\n      var i, ilen, value;\n      for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n        value = parsed[i][scale.axis];\n        if (isNumberFinite(value)) {\n          values.push(value);\n        }\n      }\n      return values;\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      return false;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var iScale = meta.iScale;\n      var vScale = meta.vScale;\n      var parsed = this.getParsed(index);\n      return {\n        label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n        value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n      };\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(mode) {\n      var meta = this._cachedMeta;\n      this.update(mode || 'default');\n      meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {}\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var ctx = this._ctx;\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var elements = meta.data || [];\n      var area = chart.chartArea;\n      var active = [];\n      var start = this._drawStart || 0;\n      var count = this._drawCount || elements.length - start;\n      var drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n      var i;\n      if (meta.dataset) {\n        meta.dataset.draw(ctx, area, start, count);\n      }\n      for (i = start; i < start + count; ++i) {\n        var element = elements[i];\n        if (element.hidden) {\n          continue;\n        }\n        if (element.active && drawActiveElementsOnTop) {\n          active.push(element);\n        } else {\n          element.draw(ctx, area);\n        }\n      }\n      for (i = 0; i < active.length; ++i) {\n        active[i].draw(ctx, area);\n      }\n    }\n  }, {\n    key: \"getStyle\",\n    value: function getStyle(index, active) {\n      var mode = active ? 'active' : 'default';\n      return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(index, active, mode) {\n      var dataset = this.getDataset();\n      var context;\n      if (index >= 0 && index < this._cachedMeta.data.length) {\n        var element = this._cachedMeta.data[index];\n        context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n        context.parsed = this.getParsed(index);\n        context.raw = dataset.data[index];\n        context.index = context.dataIndex = index;\n      } else {\n        context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n        context.dataset = dataset;\n        context.index = context.datasetIndex = this.index;\n      }\n      context.active = !!active;\n      context.mode = mode;\n      return context;\n    }\n  }, {\n    key: \"resolveDatasetElementOptions\",\n    value: function resolveDatasetElementOptions(mode) {\n      return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n  }, {\n    key: \"resolveDataElementOptions\",\n    value: function resolveDataElementOptions(index, mode) {\n      return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n  }, {\n    key: \"_resolveElementOptions\",\n    value: function _resolveElementOptions(elementType) {\n      var _this3 = this;\n      var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n      var index = arguments.length > 2 ? arguments[2] : undefined;\n      var active = mode === 'active';\n      var cache = this._cachedDataOpts;\n      var cacheKey = elementType + '-' + mode;\n      var cached = cache[cacheKey];\n      var sharing = this.enableOptionSharing && defined(index);\n      if (cached) {\n        return cloneIfNotShared(cached, sharing);\n      }\n      var config = this.chart.config;\n      var scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n      var prefixes = active ? [\"\".concat(elementType, \"Hover\"), 'hover', elementType, ''] : [elementType, ''];\n      var scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      var names = Object.keys(defaults.elements[elementType]);\n      var context = function context() {\n        return _this3.getContext(index, active, mode);\n      };\n      var values = config.resolveNamedOptions(scopes, names, context, prefixes);\n      if (values.$shared) {\n        values.$shared = sharing;\n        cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n      }\n      return values;\n    }\n  }, {\n    key: \"_resolveAnimations\",\n    value: function _resolveAnimations(index, transition, active) {\n      var chart = this.chart;\n      var cache = this._cachedDataOpts;\n      var cacheKey = \"animation-\".concat(transition);\n      var cached = cache[cacheKey];\n      if (cached) {\n        return cached;\n      }\n      var options;\n      if (chart.options.animation !== false) {\n        var config = this.chart.config;\n        var scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n        var scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        options = config.createResolver(scopes, this.getContext(index, active, transition));\n      }\n      var animations = new Animations(chart, options && options.animations);\n      if (options && options._cacheable) {\n        cache[cacheKey] = Object.freeze(animations);\n      }\n      return animations;\n    }\n  }, {\n    key: \"getSharedOptions\",\n    value: function getSharedOptions(options) {\n      if (!options.$shared) {\n        return;\n      }\n      return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n  }, {\n    key: \"includeOptions\",\n    value: function includeOptions(mode, sharedOptions) {\n      return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n  }, {\n    key: \"_getSharedOptions\",\n    value: function _getSharedOptions(start, mode) {\n      var firstOpts = this.resolveDataElementOptions(start, mode);\n      var previouslySharedOptions = this._sharedOptions;\n      var sharedOptions = this.getSharedOptions(firstOpts);\n      var includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n      this.updateSharedOptions(sharedOptions, mode, firstOpts);\n      return {\n        sharedOptions: sharedOptions,\n        includeOptions: includeOptions\n      };\n    }\n  }, {\n    key: \"updateElement\",\n    value: function updateElement(element, index, properties, mode) {\n      if (isDirectUpdateMode(mode)) {\n        Object.assign(element, properties);\n      } else {\n        this._resolveAnimations(index, mode).update(element, properties);\n      }\n    }\n  }, {\n    key: \"updateSharedOptions\",\n    value: function updateSharedOptions(sharedOptions, mode, newOptions) {\n      if (sharedOptions && !isDirectUpdateMode(mode)) {\n        this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n      }\n    }\n  }, {\n    key: \"_setStyle\",\n    value: function _setStyle(element, index, mode, active) {\n      element.active = active;\n      var options = this.getStyle(index, active);\n      this._resolveAnimations(index, mode, active).update(element, {\n        options: !active && this.getSharedOptions(options) || options\n      });\n    }\n  }, {\n    key: \"removeHoverStyle\",\n    value: function removeHoverStyle(element, datasetIndex, index) {\n      this._setStyle(element, index, 'active', false);\n    }\n  }, {\n    key: \"setHoverStyle\",\n    value: function setHoverStyle(element, datasetIndex, index) {\n      this._setStyle(element, index, 'active', true);\n    }\n  }, {\n    key: \"_removeDatasetHoverStyle\",\n    value: function _removeDatasetHoverStyle() {\n      var element = this._cachedMeta.dataset;\n      if (element) {\n        this._setStyle(element, undefined, 'active', false);\n      }\n    }\n  }, {\n    key: \"_setDatasetHoverStyle\",\n    value: function _setDatasetHoverStyle() {\n      var element = this._cachedMeta.dataset;\n      if (element) {\n        this._setStyle(element, undefined, 'active', true);\n      }\n    }\n  }, {\n    key: \"_resyncElements\",\n    value: function _resyncElements(resetNewElements) {\n      var data = this._data;\n      var elements = this._cachedMeta.data;\n      var _iterator3 = _createForOfIteratorHelper(this._syncList),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 3),\n            method = _step3$value[0],\n            arg1 = _step3$value[1],\n            arg2 = _step3$value[2];\n          this[method](arg1, arg2);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this._syncList = [];\n      var numMeta = elements.length;\n      var numData = data.length;\n      var count = Math.min(numData, numMeta);\n      if (count) {\n        this.parse(0, count);\n      }\n      if (numData > numMeta) {\n        this._insertElements(numMeta, numData - numMeta, resetNewElements);\n      } else if (numData < numMeta) {\n        this._removeElements(numData, numMeta - numData);\n      }\n    }\n  }, {\n    key: \"_insertElements\",\n    value: function _insertElements(start, count) {\n      var resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var meta = this._cachedMeta;\n      var data = meta.data;\n      var end = start + count;\n      var i;\n      var move = function move(arr) {\n        arr.length += count;\n        for (i = arr.length - 1; i >= end; i--) {\n          arr[i] = arr[i - count];\n        }\n      };\n      move(data);\n      for (i = start; i < end; ++i) {\n        data[i] = new this.dataElementType();\n      }\n      if (this._parsing) {\n        move(meta._parsed);\n      }\n      this.parse(start, count);\n      if (resetNewElements) {\n        this.updateElements(data, start, count, 'reset');\n      }\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(element, start, count, mode) {}\n  }, {\n    key: \"_removeElements\",\n    value: function _removeElements(start, count) {\n      var meta = this._cachedMeta;\n      if (this._parsing) {\n        var removed = meta._parsed.splice(start, count);\n        if (meta._stacked) {\n          clearStacks(meta, removed);\n        }\n      }\n      meta.data.splice(start, count);\n    }\n  }, {\n    key: \"_sync\",\n    value: function _sync(args) {\n      if (this._parsing) {\n        this._syncList.push(args);\n      } else {\n        var _args2 = _slicedToArray(args, 3),\n          method = _args2[0],\n          arg1 = _args2[1],\n          arg2 = _args2[2];\n        this[method](arg1, arg2);\n      }\n      this.chart._dataChanges.push([this.index].concat(_toConsumableArray(args)));\n    }\n  }, {\n    key: \"_onDataPush\",\n    value: function _onDataPush() {\n      var count = arguments.length;\n      this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n    }\n  }, {\n    key: \"_onDataPop\",\n    value: function _onDataPop() {\n      this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n    }\n  }, {\n    key: \"_onDataShift\",\n    value: function _onDataShift() {\n      this._sync(['_removeElements', 0, 1]);\n    }\n  }, {\n    key: \"_onDataSplice\",\n    value: function _onDataSplice(start, count) {\n      if (count) {\n        this._sync(['_removeElements', start, count]);\n      }\n      var newCount = arguments.length - 2;\n      if (newCount) {\n        this._sync(['_insertElements', start, newCount]);\n      }\n    }\n  }, {\n    key: \"_onDataUnshift\",\n    value: function _onDataUnshift() {\n      this._sync(['_insertElements', 0, arguments.length]);\n    }\n  }]);\n  return DatasetController;\n}();\n_defineProperty(DatasetController, \"defaults\", {});\n_defineProperty(DatasetController, \"datasetElementType\", null);\n_defineProperty(DatasetController, \"dataElementType\", null);\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    var visibleMetas = scale.getMatchingVisibleMetas(type);\n    var values = [];\n    for (var i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort(function (a, b) {\n      return a - b;\n    }));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  var scale = meta.iScale;\n  var values = getAllScaleValues(scale, meta.type);\n  var min = scale._length;\n  var i, ilen, curr, prev;\n  var updateMinAndPrev = function updateMinAndPrev() {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  var thickness = options.barThickness;\n  var size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio: ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  var pixels = ruler.pixels;\n  var curr = pixels[index];\n  var prev = index > 0 ? pixels[index - 1] : null;\n  var next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  var percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  var start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  var size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start: start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  var startValue = vScale.parse(entry[0], i);\n  var endValue = vScale.parse(entry[1], i);\n  var min = Math.min(startValue, endValue);\n  var max = Math.max(startValue, endValue);\n  var barStart = min;\n  var barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart: barStart,\n    barEnd: barEnd,\n    start: startValue,\n    end: endValue,\n    min: min,\n    max: max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  var iScale = meta.iScale;\n  var vScale = meta.vScale;\n  var labels = iScale.getLabels();\n  var singleScale = iScale === vScale;\n  var parsed = [];\n  var i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  var reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start: start,\n    end: end,\n    reverse: reverse,\n    top: top,\n    bottom: bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  var edge = options.borderSkipped;\n  var res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  var _borderProps = borderProps(properties),\n    start = _borderProps.start,\n    end = _borderProps.end,\n    reverse = _borderProps.reverse,\n    top = _borderProps.top,\n    bottom = _borderProps.bottom;\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, _ref, ratio) {\n  var inflateAmount = _ref.inflateAmount;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nvar BarController = /*#__PURE__*/function (_DatasetController) {\n  _inherits(BarController, _DatasetController);\n  var _super = _createSuper(BarController);\n  function BarController() {\n    _classCallCheck(this, BarController);\n    return _super.apply(this, arguments);\n  }\n  _createClass(BarController, [{\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      return parseArrayOrPrimitive(meta, data, start, count);\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      return parseArrayOrPrimitive(meta, data, start, count);\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var iScale = meta.iScale,\n        vScale = meta.vScale;\n      var _this$_parsing2 = this._parsing,\n        _this$_parsing2$xAxis = _this$_parsing2.xAxisKey,\n        xAxisKey = _this$_parsing2$xAxis === void 0 ? 'x' : _this$_parsing2$xAxis,\n        _this$_parsing2$yAxis = _this$_parsing2.yAxisKey,\n        yAxisKey = _this$_parsing2$yAxis === void 0 ? 'y' : _this$_parsing2$yAxis;\n      var iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n      var vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n      var parsed = [];\n      var i, ilen, item, obj;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        obj = data[i];\n        item = {};\n        item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n        parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n      }\n      return parsed;\n    }\n  }, {\n    key: \"updateRangeFromParsed\",\n    value: function updateRangeFromParsed(range, scale, parsed, stack) {\n      _get(_getPrototypeOf(BarController.prototype), \"updateRangeFromParsed\", this).call(this, range, scale, parsed, stack);\n      var custom = parsed._custom;\n      if (custom && scale === this._cachedMeta.vScale) {\n        range.min = Math.min(range.min, custom.min);\n        range.max = Math.max(range.max, custom.max);\n      }\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      return 0;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var iScale = meta.iScale,\n        vScale = meta.vScale;\n      var parsed = this.getParsed(index);\n      var custom = parsed._custom;\n      var value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n      return {\n        label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n        value: value\n      };\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n      _get(_getPrototypeOf(BarController.prototype), \"initialize\", this).call(this);\n      var meta = this._cachedMeta;\n      meta.stack = this.getDataset().stack;\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(bars, start, count, mode) {\n      var reset = mode === 'reset';\n      var index = this.index,\n        vScale = this._cachedMeta.vScale;\n      var base = vScale.getBasePixel();\n      var horizontal = vScale.isHorizontal();\n      var ruler = this._getRuler();\n      var _this$_getSharedOptio = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio.sharedOptions,\n        includeOptions = _this$_getSharedOptio.includeOptions;\n      for (var i = start; i < start + count; i++) {\n        var parsed = this.getParsed(i);\n        var vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n          base: base,\n          head: base\n        } : this._calculateBarValuePixels(i);\n        var ipixels = this._calculateBarIndexPixels(i, ruler);\n        var stack = (parsed._stacks || {})[vScale.axis];\n        var properties = {\n          horizontal: horizontal,\n          base: vpixels.base,\n          enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n          x: horizontal ? vpixels.head : ipixels.center,\n          y: horizontal ? ipixels.center : vpixels.head,\n          height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n          width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n        };\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n        }\n        var options = properties.options || bars[i].options;\n        setBorderSkipped(properties, options, stack, index);\n        setInflateAmount(properties, options, ruler.ratio);\n        this.updateElement(bars[i], i, properties, mode);\n      }\n    }\n  }, {\n    key: \"_getStacks\",\n    value: function _getStacks(last, dataIndex) {\n      var iScale = this._cachedMeta.iScale;\n      var metasets = iScale.getMatchingVisibleMetas(this._type).filter(function (meta) {\n        return meta.controller.options.grouped;\n      });\n      var stacked = iScale.options.stacked;\n      var stacks = [];\n      var currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n      var iScaleValue = currentParsed && currentParsed[iScale.axis];\n      var skipNull = function skipNull(meta) {\n        var parsed = meta._parsed.find(function (item) {\n          return item[iScale.axis] === iScaleValue;\n        });\n        var val = parsed && parsed[meta.vScale.axis];\n        if (isNullOrUndef(val) || isNaN(val)) {\n          return true;\n        }\n      };\n      var _iterator4 = _createForOfIteratorHelper(metasets),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var meta = _step4.value;\n          if (dataIndex !== undefined && skipNull(meta)) {\n            continue;\n          }\n          if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n            stacks.push(meta.stack);\n          }\n          if (meta.index === last) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      if (!stacks.length) {\n        stacks.push(undefined);\n      }\n      return stacks;\n    }\n  }, {\n    key: \"_getStackCount\",\n    value: function _getStackCount(index) {\n      return this._getStacks(undefined, index).length;\n    }\n  }, {\n    key: \"_getStackIndex\",\n    value: function _getStackIndex(datasetIndex, name, dataIndex) {\n      var stacks = this._getStacks(datasetIndex, dataIndex);\n      var index = name !== undefined ? stacks.indexOf(name) : -1;\n      return index === -1 ? stacks.length - 1 : index;\n    }\n  }, {\n    key: \"_getRuler\",\n    value: function _getRuler() {\n      var opts = this.options;\n      var meta = this._cachedMeta;\n      var iScale = meta.iScale;\n      var pixels = [];\n      var i, ilen;\n      for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n        pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n      }\n      var barThickness = opts.barThickness;\n      var min = barThickness || computeMinSampleSize(meta);\n      return {\n        min: min,\n        pixels: pixels,\n        start: iScale._startPixel,\n        end: iScale._endPixel,\n        stackCount: this._getStackCount(),\n        scale: iScale,\n        grouped: opts.grouped,\n        ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n      };\n    }\n  }, {\n    key: \"_calculateBarValuePixels\",\n    value: function _calculateBarValuePixels(index) {\n      var _this$_cachedMeta = this._cachedMeta,\n        vScale = _this$_cachedMeta.vScale,\n        _stacked = _this$_cachedMeta._stacked,\n        datasetIndex = _this$_cachedMeta.index,\n        _this$options = this.options,\n        baseValue = _this$options.base,\n        minBarLength = _this$options.minBarLength;\n      var actualBase = baseValue || 0;\n      var parsed = this.getParsed(index);\n      var custom = parsed._custom;\n      var floating = isFloatBar(custom);\n      var value = parsed[vScale.axis];\n      var start = 0;\n      var length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n      var head, size;\n      if (length !== value) {\n        start = length - value;\n        length = value;\n      }\n      if (floating) {\n        value = custom.barStart;\n        length = custom.barEnd - custom.barStart;\n        if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n          start = 0;\n        }\n        start += value;\n      }\n      var startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n      var base = vScale.getPixelForValue(startValue);\n      if (this.chart.getDataVisibility(index)) {\n        head = vScale.getPixelForValue(start + length);\n      } else {\n        head = base;\n      }\n      size = head - base;\n      if (Math.abs(size) < minBarLength) {\n        size = barSign(size, vScale, actualBase) * minBarLength;\n        if (value === actualBase) {\n          base -= size / 2;\n        }\n        var startPixel = vScale.getPixelForDecimal(0);\n        var endPixel = vScale.getPixelForDecimal(1);\n        var min = Math.min(startPixel, endPixel);\n        var max = Math.max(startPixel, endPixel);\n        base = Math.max(Math.min(base, max), min);\n        head = base + size;\n        if (_stacked && !floating) {\n          parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n        }\n      }\n      if (base === vScale.getPixelForValue(actualBase)) {\n        var halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n        base += halfGrid;\n        size -= halfGrid;\n      }\n      return {\n        size: size,\n        base: base,\n        head: head,\n        center: head + size / 2\n      };\n    }\n  }, {\n    key: \"_calculateBarIndexPixels\",\n    value: function _calculateBarIndexPixels(index, ruler) {\n      var scale = ruler.scale;\n      var options = this.options;\n      var skipNull = options.skipNull;\n      var maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n      var center, size;\n      if (ruler.grouped) {\n        var stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n        var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n        var stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n        center = range.start + range.chunk * stackIndex + range.chunk / 2;\n        size = Math.min(maxBarThickness, range.chunk * range.ratio);\n      } else {\n        center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n        size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n      }\n      return {\n        base: center - size / 2,\n        head: center + size / 2,\n        center: center,\n        size: size\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var meta = this._cachedMeta;\n      var vScale = meta.vScale;\n      var rects = meta.data;\n      var ilen = rects.length;\n      var i = 0;\n      for (; i < ilen; ++i) {\n        if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n          rects[i].draw(this._ctx);\n        }\n      }\n    }\n  }]);\n  return BarController;\n}(DatasetController);\n_defineProperty(BarController, \"id\", 'bar');\n_defineProperty(BarController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n});\n_defineProperty(BarController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true\n    }\n  }\n});\nvar BubbleController = /*#__PURE__*/function (_DatasetController2) {\n  _inherits(BubbleController, _DatasetController2);\n  var _super2 = _createSuper(BubbleController);\n  function BubbleController() {\n    _classCallCheck(this, BubbleController);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(BubbleController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n      _get(_getPrototypeOf(BubbleController.prototype), \"initialize\", this).call(this);\n    }\n  }, {\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      var parsed = _get(_getPrototypeOf(BubbleController.prototype), \"parsePrimitiveData\", this).call(this, meta, data, start, count);\n      for (var i = 0; i < parsed.length; i++) {\n        parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      var parsed = _get(_getPrototypeOf(BubbleController.prototype), \"parseArrayData\", this).call(this, meta, data, start, count);\n      for (var i = 0; i < parsed.length; i++) {\n        var item = data[start + i];\n        parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var parsed = _get(_getPrototypeOf(BubbleController.prototype), \"parseObjectData\", this).call(this, meta, data, start, count);\n      for (var i = 0; i < parsed.length; i++) {\n        var item = data[start + i];\n        parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n      }\n      return parsed;\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var data = this._cachedMeta.data;\n      var max = 0;\n      for (var i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var labels = this.chart.data.labels || [];\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var parsed = this.getParsed(index);\n      var x = xScale.getLabelForValue(parsed.x);\n      var y = yScale.getLabelForValue(parsed.y);\n      var r = parsed._custom;\n      return {\n        label: labels[index] || '',\n        value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var points = this._cachedMeta.data;\n      this.updateElements(points, 0, points.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var reset = mode === 'reset';\n      var _this$_cachedMeta2 = this._cachedMeta,\n        iScale = _this$_cachedMeta2.iScale,\n        vScale = _this$_cachedMeta2.vScale;\n      var _this$_getSharedOptio2 = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio2.sharedOptions,\n        includeOptions = _this$_getSharedOptio2.includeOptions;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      for (var i = start; i < start + count; i++) {\n        var point = points[i];\n        var parsed = !reset && this.getParsed(i);\n        var properties = {};\n        var iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n        var vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel);\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n          if (reset) {\n            properties.options.radius = 0;\n          }\n        }\n        this.updateElement(point, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"resolveDataElementOptions\",\n    value: function resolveDataElementOptions(index, mode) {\n      var parsed = this.getParsed(index);\n      var values = _get(_getPrototypeOf(BubbleController.prototype), \"resolveDataElementOptions\", this).call(this, index, mode);\n      if (values.$shared) {\n        values = Object.assign({}, values, {\n          $shared: false\n        });\n      }\n      var radius = values.radius;\n      if (mode !== 'active') {\n        values.radius = 0;\n      }\n      values.radius += valueOrDefault(parsed && parsed._custom, radius);\n      return values;\n    }\n  }]);\n  return BubbleController;\n}(DatasetController);\n_defineProperty(BubbleController, \"id\", 'bubble');\n_defineProperty(BubbleController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n});\n_defineProperty(BubbleController, \"overrides\", {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  var ratioX = 1;\n  var ratioY = 1;\n  var offsetX = 0;\n  var offsetY = 0;\n  if (circumference < TAU) {\n    var startAngle = rotation;\n    var endAngle = startAngle + circumference;\n    var startX = Math.cos(startAngle);\n    var startY = Math.sin(startAngle);\n    var endX = Math.cos(endAngle);\n    var endY = Math.sin(endAngle);\n    var calcMax = function calcMax(angle, a, b) {\n      return _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    };\n    var calcMin = function calcMin(angle, a, b) {\n      return _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    };\n    var maxX = calcMax(0, startX, endX);\n    var maxY = calcMax(HALF_PI, startY, endY);\n    var minX = calcMin(PI, startX, endX);\n    var minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX: ratioX,\n    ratioY: ratioY,\n    offsetX: offsetX,\n    offsetY: offsetY\n  };\n}\nvar DoughnutController = /*#__PURE__*/function (_DatasetController3) {\n  _inherits(DoughnutController, _DatasetController3);\n  var _super3 = _createSuper(DoughnutController);\n  function DoughnutController(chart, datasetIndex) {\n    var _this4;\n    _classCallCheck(this, DoughnutController);\n    _this4 = _super3.call(this, chart, datasetIndex);\n    _this4.enableOptionSharing = true;\n    _this4.innerRadius = undefined;\n    _this4.outerRadius = undefined;\n    _this4.offsetX = undefined;\n    _this4.offsetY = undefined;\n    return _this4;\n  }\n  _createClass(DoughnutController, [{\n    key: \"linkScales\",\n    value: function linkScales() {}\n  }, {\n    key: \"parse\",\n    value: function parse(start, count) {\n      var data = this.getDataset().data;\n      var meta = this._cachedMeta;\n      if (this._parsing === false) {\n        meta._parsed = data;\n      } else {\n        var getter = function getter(i) {\n          return +data[i];\n        };\n        if (isObject(data[start])) {\n          var _this$_parsing$key = this._parsing.key,\n            key = _this$_parsing$key === void 0 ? 'value' : _this$_parsing$key;\n          getter = function getter(i) {\n            return +resolveObjectKey(data[i], key);\n          };\n        }\n        var i, ilen;\n        for (i = start, ilen = start + count; i < ilen; ++i) {\n          meta._parsed[i] = getter(i);\n        }\n      }\n    }\n  }, {\n    key: \"_getRotation\",\n    value: function _getRotation() {\n      return toRadians(this.options.rotation - 90);\n    }\n  }, {\n    key: \"_getCircumference\",\n    value: function _getCircumference() {\n      return toRadians(this.options.circumference);\n    }\n  }, {\n    key: \"_getRotationExtents\",\n    value: function _getRotationExtents() {\n      var min = TAU;\n      var max = -TAU;\n      for (var i = 0; i < this.chart.data.datasets.length; ++i) {\n        if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n          var controller = this.chart.getDatasetMeta(i).controller;\n          var rotation = controller._getRotation();\n          var circumference = controller._getCircumference();\n          min = Math.min(min, rotation);\n          max = Math.max(max, rotation + circumference);\n        }\n      }\n      return {\n        rotation: min,\n        circumference: max - min\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var meta = this._cachedMeta;\n      var arcs = meta.data;\n      var spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n      var maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n      var cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n      var chartWeight = this._getRingWeight(this.index);\n      var _this$_getRotationExt = this._getRotationExtents(),\n        circumference = _this$_getRotationExt.circumference,\n        rotation = _this$_getRotationExt.rotation;\n      var _getRatioAndOffset = getRatioAndOffset(rotation, circumference, cutout),\n        ratioX = _getRatioAndOffset.ratioX,\n        ratioY = _getRatioAndOffset.ratioY,\n        offsetX = _getRatioAndOffset.offsetX,\n        offsetY = _getRatioAndOffset.offsetY;\n      var maxWidth = (chartArea.width - spacing) / ratioX;\n      var maxHeight = (chartArea.height - spacing) / ratioY;\n      var maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n      var outerRadius = toDimension(this.options.radius, maxRadius);\n      var innerRadius = Math.max(outerRadius * cutout, 0);\n      var radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n      this.offsetX = offsetX * outerRadius;\n      this.offsetY = offsetY * outerRadius;\n      meta.total = this.calculateTotal();\n      this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n      this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n      this.updateElements(arcs, 0, arcs.length, mode);\n    }\n  }, {\n    key: \"_circumference\",\n    value: function _circumference(i, reset) {\n      var opts = this.options;\n      var meta = this._cachedMeta;\n      var circumference = this._getCircumference();\n      if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n        return 0;\n      }\n      return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(arcs, start, count, mode) {\n      var reset = mode === 'reset';\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var centerX = (chartArea.left + chartArea.right) / 2;\n      var centerY = (chartArea.top + chartArea.bottom) / 2;\n      var animateScale = reset && animationOpts.animateScale;\n      var innerRadius = animateScale ? 0 : this.innerRadius;\n      var outerRadius = animateScale ? 0 : this.outerRadius;\n      var _this$_getSharedOptio3 = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio3.sharedOptions,\n        includeOptions = _this$_getSharedOptio3.includeOptions;\n      var startAngle = this._getRotation();\n      var i;\n      for (i = 0; i < start; ++i) {\n        startAngle += this._circumference(i, reset);\n      }\n      for (i = start; i < start + count; ++i) {\n        var circumference = this._circumference(i, reset);\n        var arc = arcs[i];\n        var properties = {\n          x: centerX + this.offsetX,\n          y: centerY + this.offsetY,\n          startAngle: startAngle,\n          endAngle: startAngle + circumference,\n          circumference: circumference,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius\n        };\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n        }\n        startAngle += circumference;\n        this.updateElement(arc, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"calculateTotal\",\n    value: function calculateTotal() {\n      var meta = this._cachedMeta;\n      var metaData = meta.data;\n      var total = 0;\n      var i;\n      for (i = 0; i < metaData.length; i++) {\n        var value = meta._parsed[i];\n        if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n          total += Math.abs(value);\n        }\n      }\n      return total;\n    }\n  }, {\n    key: \"calculateCircumference\",\n    value: function calculateCircumference(value) {\n      var total = this._cachedMeta.total;\n      if (total > 0 && !isNaN(value)) {\n        return TAU * (Math.abs(value) / total);\n      }\n      return 0;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var chart = this.chart;\n      var labels = chart.data.labels || [];\n      var value = formatNumber(meta._parsed[index], chart.options.locale);\n      return {\n        label: labels[index] || '',\n        value: value\n      };\n    }\n  }, {\n    key: \"getMaxBorderWidth\",\n    value: function getMaxBorderWidth(arcs) {\n      var max = 0;\n      var chart = this.chart;\n      var i, ilen, meta, controller, options;\n      if (!arcs) {\n        for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n          if (chart.isDatasetVisible(i)) {\n            meta = chart.getDatasetMeta(i);\n            arcs = meta.data;\n            controller = meta.controller;\n            break;\n          }\n        }\n      }\n      if (!arcs) {\n        return 0;\n      }\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        options = controller.resolveDataElementOptions(i);\n        if (options.borderAlign !== 'inner') {\n          max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n        }\n      }\n      return max;\n    }\n  }, {\n    key: \"getMaxOffset\",\n    value: function getMaxOffset(arcs) {\n      var max = 0;\n      for (var i = 0, ilen = arcs.length; i < ilen; ++i) {\n        var options = this.resolveDataElementOptions(i);\n        max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n      }\n      return max;\n    }\n  }, {\n    key: \"_getRingWeightOffset\",\n    value: function _getRingWeightOffset(datasetIndex) {\n      var ringWeightOffset = 0;\n      for (var i = 0; i < datasetIndex; ++i) {\n        if (this.chart.isDatasetVisible(i)) {\n          ringWeightOffset += this._getRingWeight(i);\n        }\n      }\n      return ringWeightOffset;\n    }\n  }, {\n    key: \"_getRingWeight\",\n    value: function _getRingWeight(datasetIndex) {\n      return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n  }, {\n    key: \"_getVisibleDatasetWeightTotal\",\n    value: function _getVisibleDatasetWeightTotal() {\n      return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n  }]);\n  return DoughnutController;\n}(DatasetController);\n_defineProperty(DoughnutController, \"id\", 'doughnut');\n_defineProperty(DoughnutController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    }\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r'\n});\n_defineProperty(DoughnutController, \"descriptors\", {\n  _scriptable: function _scriptable(name) {\n    return name !== 'spacing';\n  },\n  _indexable: function _indexable(name) {\n    return name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash');\n  }\n});\n_defineProperty(DoughnutController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            var _chart$legend$options2 = chart.legend.options.labels,\n              pointStyle = _chart$legend$options2.pointStyle,\n              color = _chart$legend$options2.color;\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  }\n});\nvar LineController = /*#__PURE__*/function (_DatasetController4) {\n  _inherits(LineController, _DatasetController4);\n  var _super4 = _createSuper(LineController);\n  function LineController() {\n    _classCallCheck(this, LineController);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(LineController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n      this.supportsDecimation = true;\n      _get(_getPrototypeOf(LineController.prototype), \"initialize\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      var line = meta.dataset,\n        _meta$data = meta.data,\n        points = _meta$data === void 0 ? [] : _meta$data,\n        _dataset = meta._dataset;\n      var animationsDisabled = this.chart._animationsDisabled;\n      var _getStartAndCountOfVi = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled),\n        start = _getStartAndCountOfVi.start,\n        count = _getStartAndCountOfVi.count;\n      this._drawStart = start;\n      this._drawCount = count;\n      if (_scaleRangesChanged(meta)) {\n        start = 0;\n        count = points.length;\n      }\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      var options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options: options\n      }, mode);\n      this.updateElements(points, start, count, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var reset = mode === 'reset';\n      var _this$_cachedMeta3 = this._cachedMeta,\n        iScale = _this$_cachedMeta3.iScale,\n        vScale = _this$_cachedMeta3.vScale,\n        _stacked = _this$_cachedMeta3._stacked,\n        _dataset = _this$_cachedMeta3._dataset;\n      var _this$_getSharedOptio4 = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio4.sharedOptions,\n        includeOptions = _this$_getSharedOptio4.includeOptions;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var _this$options2 = this.options,\n        spanGaps = _this$options2.spanGaps,\n        segment = _this$options2.segment;\n      var maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n      var directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n      var end = start + count;\n      var pointsCount = points.length;\n      var prevParsed = start > 0 && this.getParsed(start - 1);\n      for (var i = 0; i < pointsCount; ++i) {\n        var point = points[i];\n        var properties = directUpdate ? point : {};\n        if (i < start || i >= end) {\n          properties.skip = true;\n          continue;\n        }\n        var parsed = this.getParsed(i);\n        var nullData = isNullOrUndef(parsed[vAxis]);\n        var iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n        var vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n        properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n        if (segment) {\n          properties.parsed = parsed;\n          properties.raw = _dataset.data[i];\n        }\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        }\n        if (!directUpdate) {\n          this.updateElement(point, i, properties, mode);\n        }\n        prevParsed = parsed;\n      }\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var meta = this._cachedMeta;\n      var dataset = meta.dataset;\n      var border = dataset.options && dataset.options.borderWidth || 0;\n      var data = meta.data || [];\n      if (!data.length) {\n        return border;\n      }\n      var firstPoint = data[0].size(this.resolveDataElementOptions(0));\n      var lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n      return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var meta = this._cachedMeta;\n      meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n      _get(_getPrototypeOf(LineController.prototype), \"draw\", this).call(this);\n    }\n  }]);\n  return LineController;\n}(DatasetController);\n_defineProperty(LineController, \"id\", 'line');\n_defineProperty(LineController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false\n});\n_defineProperty(LineController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category'\n    },\n    _value_: {\n      type: 'linear'\n    }\n  }\n});\nvar PolarAreaController = /*#__PURE__*/function (_DatasetController5) {\n  _inherits(PolarAreaController, _DatasetController5);\n  var _super5 = _createSuper(PolarAreaController);\n  function PolarAreaController(chart, datasetIndex) {\n    var _this5;\n    _classCallCheck(this, PolarAreaController);\n    _this5 = _super5.call(this, chart, datasetIndex);\n    _this5.innerRadius = undefined;\n    _this5.outerRadius = undefined;\n    return _this5;\n  }\n  _createClass(PolarAreaController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var chart = this.chart;\n      var labels = chart.data.labels || [];\n      var value = formatNumber(meta._parsed[index].r, chart.options.locale);\n      return {\n        label: labels[index] || '',\n        value: value\n      };\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var arcs = this._cachedMeta.data;\n      this._updateRadius();\n      this.updateElements(arcs, 0, arcs.length, mode);\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax() {\n      var _this6 = this;\n      var meta = this._cachedMeta;\n      var range = {\n        min: Number.POSITIVE_INFINITY,\n        max: Number.NEGATIVE_INFINITY\n      };\n      meta.data.forEach(function (element, index) {\n        var parsed = _this6.getParsed(index).r;\n        if (!isNaN(parsed) && _this6.chart.getDataVisibility(index)) {\n          if (parsed < range.min) {\n            range.min = parsed;\n          }\n          if (parsed > range.max) {\n            range.max = parsed;\n          }\n        }\n      });\n      return range;\n    }\n  }, {\n    key: \"_updateRadius\",\n    value: function _updateRadius() {\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n      var outerRadius = Math.max(minSize / 2, 0);\n      var innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n      var radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n      this.outerRadius = outerRadius - radiusLength * this.index;\n      this.innerRadius = this.outerRadius - radiusLength;\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(arcs, start, count, mode) {\n      var reset = mode === 'reset';\n      var chart = this.chart;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var scale = this._cachedMeta.rScale;\n      var centerX = scale.xCenter;\n      var centerY = scale.yCenter;\n      var datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n      var angle = datasetStartAngle;\n      var i;\n      var defaultAngle = 360 / this.countVisibleElements();\n      for (i = 0; i < start; ++i) {\n        angle += this._computeAngle(i, mode, defaultAngle);\n      }\n      for (i = start; i < start + count; i++) {\n        var arc = arcs[i];\n        var startAngle = angle;\n        var endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n        var outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n        angle = endAngle;\n        if (reset) {\n          if (animationOpts.animateScale) {\n            outerRadius = 0;\n          }\n          if (animationOpts.animateRotate) {\n            startAngle = endAngle = datasetStartAngle;\n          }\n        }\n        var properties = {\n          x: centerX,\n          y: centerY,\n          innerRadius: 0,\n          outerRadius: outerRadius,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n        };\n        this.updateElement(arc, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"countVisibleElements\",\n    value: function countVisibleElements() {\n      var _this7 = this;\n      var meta = this._cachedMeta;\n      var count = 0;\n      meta.data.forEach(function (element, index) {\n        if (!isNaN(_this7.getParsed(index).r) && _this7.chart.getDataVisibility(index)) {\n          count++;\n        }\n      });\n      return count;\n    }\n  }, {\n    key: \"_computeAngle\",\n    value: function _computeAngle(index, mode, defaultAngle) {\n      return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n  }]);\n  return PolarAreaController;\n}(DatasetController);\n_defineProperty(PolarAreaController, \"id\", 'polarArea');\n_defineProperty(PolarAreaController, \"defaults\", {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    }\n  },\n  indexAxis: 'r',\n  startAngle: 0\n});\n_defineProperty(PolarAreaController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            var _chart$legend$options3 = chart.legend.options.labels,\n              pointStyle = _chart$legend$options3.pointStyle,\n              color = _chart$legend$options3.color;\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n});\nvar PieController = /*#__PURE__*/function (_DoughnutController) {\n  _inherits(PieController, _DoughnutController);\n  var _super6 = _createSuper(PieController);\n  function PieController() {\n    _classCallCheck(this, PieController);\n    return _super6.apply(this, arguments);\n  }\n  return _createClass(PieController);\n}(DoughnutController);\n_defineProperty(PieController, \"id\", 'pie');\n_defineProperty(PieController, \"defaults\", {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n});\nvar RadarController = /*#__PURE__*/function (_DatasetController6) {\n  _inherits(RadarController, _DatasetController6);\n  var _super7 = _createSuper(RadarController);\n  function RadarController() {\n    _classCallCheck(this, RadarController);\n    return _super7.apply(this, arguments);\n  }\n  _createClass(RadarController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var vScale = this._cachedMeta.vScale;\n      var parsed = this.getParsed(index);\n      return {\n        label: vScale.getLabels()[index],\n        value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n      };\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var labels = meta.iScale.getLabels();\n      line.points = points;\n      if (mode !== 'resize') {\n        var options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n          options.borderWidth = 0;\n        }\n        var properties = {\n          _loop: true,\n          _fullLoop: labels.length === points.length,\n          options: options\n        };\n        this.updateElement(line, undefined, properties, mode);\n      }\n      this.updateElements(points, 0, points.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var scale = this._cachedMeta.rScale;\n      var reset = mode === 'reset';\n      for (var i = start; i < start + count; i++) {\n        var point = points[i];\n        var options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        var pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n        var x = reset ? scale.xCenter : pointPosition.x;\n        var y = reset ? scale.yCenter : pointPosition.y;\n        var properties = {\n          x: x,\n          y: y,\n          angle: pointPosition.angle,\n          skip: isNaN(x) || isNaN(y),\n          options: options\n        };\n        this.updateElement(point, i, properties, mode);\n      }\n    }\n  }]);\n  return RadarController;\n}(DatasetController);\n_defineProperty(RadarController, \"id\", 'radar');\n_defineProperty(RadarController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  }\n});\n_defineProperty(RadarController, \"overrides\", {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear'\n    }\n  }\n});\nvar ScatterController = /*#__PURE__*/function (_DatasetController7) {\n  _inherits(ScatterController, _DatasetController7);\n  var _super8 = _createSuper(ScatterController);\n  function ScatterController() {\n    _classCallCheck(this, ScatterController);\n    return _super8.apply(this, arguments);\n  }\n  _createClass(ScatterController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var labels = this.chart.data.labels || [];\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var parsed = this.getParsed(index);\n      var x = xScale.getLabelForValue(parsed.x);\n      var y = yScale.getLabelForValue(parsed.y);\n      return {\n        label: labels[index] || '',\n        value: '(' + x + ', ' + y + ')'\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      var _meta$data2 = meta.data,\n        points = _meta$data2 === void 0 ? [] : _meta$data2;\n      var animationsDisabled = this.chart._animationsDisabled;\n      var _getStartAndCountOfVi2 = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled),\n        start = _getStartAndCountOfVi2.start,\n        count = _getStartAndCountOfVi2.count;\n      this._drawStart = start;\n      this._drawCount = count;\n      if (_scaleRangesChanged(meta)) {\n        start = 0;\n        count = points.length;\n      }\n      if (this.options.showLine) {\n        if (!this.datasetElementType) {\n          this.addElements();\n        }\n        var line = meta.dataset,\n          _dataset = meta._dataset;\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        var options = this.resolveDatasetElementOptions(mode);\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n          animated: !animationsDisabled,\n          options: options\n        }, mode);\n      } else if (this.datasetElementType) {\n        delete meta.dataset;\n        this.datasetElementType = false;\n      }\n      this.updateElements(points, start, count, mode);\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      var showLine = this.options.showLine;\n      if (!this.datasetElementType && showLine) {\n        this.datasetElementType = this.chart.registry.getElement('line');\n      }\n      _get(_getPrototypeOf(ScatterController.prototype), \"addElements\", this).call(this);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var reset = mode === 'reset';\n      var _this$_cachedMeta4 = this._cachedMeta,\n        iScale = _this$_cachedMeta4.iScale,\n        vScale = _this$_cachedMeta4.vScale,\n        _stacked = _this$_cachedMeta4._stacked,\n        _dataset = _this$_cachedMeta4._dataset;\n      var firstOpts = this.resolveDataElementOptions(start, mode);\n      var sharedOptions = this.getSharedOptions(firstOpts);\n      var includeOptions = this.includeOptions(mode, sharedOptions);\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var _this$options3 = this.options,\n        spanGaps = _this$options3.spanGaps,\n        segment = _this$options3.segment;\n      var maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n      var directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n      var prevParsed = start > 0 && this.getParsed(start - 1);\n      for (var i = start; i < start + count; ++i) {\n        var point = points[i];\n        var parsed = this.getParsed(i);\n        var properties = directUpdate ? point : {};\n        var nullData = isNullOrUndef(parsed[vAxis]);\n        var iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n        var vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n        properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n        if (segment) {\n          properties.parsed = parsed;\n          properties.raw = _dataset.data[i];\n        }\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        }\n        if (!directUpdate) {\n          this.updateElement(point, i, properties, mode);\n        }\n        prevParsed = parsed;\n      }\n      this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var meta = this._cachedMeta;\n      var data = meta.data || [];\n      if (!this.options.showLine) {\n        var max = 0;\n        for (var i = data.length - 1; i >= 0; --i) {\n          max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n      }\n      var dataset = meta.dataset;\n      var border = dataset.options && dataset.options.borderWidth || 0;\n      if (!data.length) {\n        return border;\n      }\n      var firstPoint = data[0].size(this.resolveDataElementOptions(0));\n      var lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n      return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n  }]);\n  return ScatterController;\n}(DatasetController);\n_defineProperty(ScatterController, \"id\", 'scatter');\n_defineProperty(ScatterController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n});\n_defineProperty(ScatterController, \"overrides\", {\n  interaction: {\n    mode: 'point'\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nvar DateAdapterBase = /*#__PURE__*/function () {\n  function DateAdapterBase(options) {\n    _classCallCheck(this, DateAdapterBase);\n    _defineProperty(this, \"options\", void 0);\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  _createClass(DateAdapterBase, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return abstract();\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      return abstract();\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return abstract();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      return abstract();\n    }\n  }, {\n    key: \"diff\",\n    value: function diff() {\n      return abstract();\n    }\n  }, {\n    key: \"startOf\",\n    value: function startOf() {\n      return abstract();\n    }\n  }, {\n    key: \"endOf\",\n    value: function endOf() {\n      return abstract();\n    }\n  }], [{\n    key: \"override\",\n    value:\n    /**\n    * Override default date adapter methods.\n    * Accepts type parameter to define options type.\n    * @example\n    * Chart._adapters._date.override<{myAdapterOption: string}>({\n    *   init() {\n    *     console.log(this.options.myAdapterOption);\n    *   }\n    * })\n    */\n    function override(members) {\n      Object.assign(DateAdapterBase.prototype, members);\n    }\n  }]);\n  return DateAdapterBase;\n}();\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  var controller = metaset.controller,\n    data = metaset.data,\n    _sorted = metaset._sorted;\n  var iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    var lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      var el = data[0];\n      var range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        var start = lookupMethod(data, axis, value - range);\n        var end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  var metasets = chart.getSortedVisibleDatasetMetas();\n  var value = position[axis];\n  for (var i = 0, ilen = metasets.length; i < ilen; ++i) {\n    var _metasets$i = metasets[i],\n      _index2 = _metasets$i.index,\n      data = _metasets$i.data;\n    var _binarySearch = binarySearch(metasets[i], axis, value, intersect),\n      lo = _binarySearch.lo,\n      hi = _binarySearch.hi;\n    for (var j = lo; j <= hi; ++j) {\n      var element = data[j];\n      if (!element.skip) {\n        handler(element, _index2, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  var useX = axis.indexOf('x') !== -1;\n  var useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  var items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  var evaluationFunc = function evaluationFunc(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  var items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    var _element$getProps = element.getProps(['startAngle', 'endAngle'], useFinalPosition),\n      startAngle = _element$getProps.startAngle,\n      endAngle = _element$getProps.endAngle;\n    var _getAngleFromPoint = getAngleFromPoint(element, {\n        x: position.x,\n        y: position.y\n      }),\n      angle = _getAngleFromPoint.angle;\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  var items = [];\n  var distanceMetric = getDistanceMetricForAxis(axis);\n  var minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    var inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    var center = element.getCenterPoint(useFinalPosition);\n    var pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    var distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  var items = [];\n  var rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  var intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, function (element, datasetIndex, index) {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems: evaluateInteractionItems,\n  modes: {\n    index: function index(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'x';\n      var includeInvisible = options.includeInvisible || false;\n      var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      var elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(function (meta) {\n        var index = items[0].index;\n        var element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element: element,\n            datasetIndex: meta.index,\n            index: index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset: function dataset(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var includeInvisible = options.includeInvisible || false;\n      var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        var datasetIndex = items[0].datasetIndex;\n        var data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (var i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex: datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point: function point(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest: function nearest(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x: function x(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y: function y(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nvar STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(function (v) {\n    return v.pos === position;\n  });\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(function (v) {\n    return STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis;\n  });\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort(function (a, b) {\n    var v0 = reverse ? b : a;\n    var v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  var layoutBoxes = [];\n  var i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    var _box = box;\n    pos = _box.position;\n    var _box$options = _box.options;\n    stack = _box$options.stack;\n    var _box$options$stackWei = _box$options.stackWeight;\n    stackWeight = _box$options$stackWei === void 0 ? 1 : _box$options$stackWei;\n    layoutBoxes.push({\n      index: i,\n      box: box,\n      pos: pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight: stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  var stacks = {};\n  var _iterator5 = _createForOfIteratorHelper(layouts),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var wrap = _step5.value;\n      var stack = wrap.stack,\n        pos = wrap.pos,\n        stackWeight = wrap.stackWeight;\n      if (!stack || !STATIC_POSITIONS.includes(pos)) {\n        continue;\n      }\n      var _stack = stacks[stack] || (stacks[stack] = {\n        count: 0,\n        placed: 0,\n        weight: 0,\n        size: 0\n      });\n      _stack.count++;\n      _stack.weight += stackWeight;\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  var stacks = buildStacks(layouts);\n  var vBoxMaxWidth = params.vBoxMaxWidth,\n    hBoxMaxHeight = params.hBoxMaxHeight;\n  var i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    var fullSize = layout.box.fullSize;\n    var stack = stacks[layout.stack];\n    var factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  var layoutBoxes = wrapBoxes(boxes);\n  var fullSize = sortByWeight(layoutBoxes.filter(function (wrap) {\n    return wrap.box.fullSize;\n  }), true);\n  var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  var centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  var centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize: fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  var pos = layout.pos,\n    box = layout.box;\n  var maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    var stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  var newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  var newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  var widthChanged = newWidth !== chartArea.w;\n  var heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  var maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    var change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  var maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    var margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(function (pos) {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  var refitBoxes = [];\n  var i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    var _updateDims = updateDims(chartArea, params, layout, stacks),\n      same = _updateDims.same,\n      other = _updateDims.other;\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  var userPadding = params.padding;\n  var x = chartArea.x,\n    y = chartArea.y;\n  var _iterator6 = _createForOfIteratorHelper(boxes),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var layout = _step6.value;\n      var box = layout.box;\n      var stack = stacks[layout.stack] || {\n        count: 1,\n        placed: 0,\n        weight: 1\n      };\n      var weight = layout.stackWeight / stack.weight || 1;\n      if (layout.horizontal) {\n        var width = chartArea.w * weight;\n        var height = stack.size || box.height;\n        if (defined(stack.start)) {\n          y = stack.start;\n        }\n        if (box.fullSize) {\n          setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n        } else {\n          setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n        }\n        stack.start = y;\n        stack.placed += width;\n        y = box.bottom;\n      } else {\n        var _height = chartArea.h * weight;\n        var _width = stack.size || box.width;\n        if (defined(stack.start)) {\n          x = stack.start;\n        }\n        if (box.fullSize) {\n          setBoxDims(box, x, userPadding.top, _width, params.outerHeight - userPadding.bottom - userPadding.top);\n        } else {\n          setBoxDims(box, x, chartArea.top + stack.placed, _width, _height);\n        }\n        stack.start = x;\n        stack.placed += _height;\n        x = box.right;\n      }\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox: function addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw: function draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox: function removeBox(chart, layoutItem) {\n    var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure: function configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update: function update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    var padding = toPadding(chart.options.layout.padding);\n    var availableWidth = Math.max(width - padding.width, 0);\n    var availableHeight = Math.max(height - padding.height, 0);\n    var boxes = buildLayoutBoxes(chart.boxes);\n    var verticalBoxes = boxes.vertical;\n    var horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, function (box) {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    var visibleVerticalBoxCount = verticalBoxes.reduce(function (total, wrap) {\n      return wrap.box.options && wrap.box.options.display === false ? total : total + 1;\n    }, 0) || 1;\n    var params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding: padding,\n      availableWidth: availableWidth,\n      availableHeight: availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    var maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    var chartArea = Object.assign({\n      maxPadding: maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    var stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, function (layout) {\n      var box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nvar BasePlatform = /*#__PURE__*/function () {\n  function BasePlatform() {\n    _classCallCheck(this, BasePlatform);\n  }\n  _createClass(BasePlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(canvas, aspectRatio) {}\n  }, {\n    key: \"releaseContext\",\n    value: function releaseContext(context) {\n      return false;\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(chart, type, listener) {}\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(chart, type, listener) {}\n  }, {\n    key: \"getDevicePixelRatio\",\n    value: function getDevicePixelRatio() {\n      return 1;\n    }\n  }, {\n    key: \"getMaximumSize\",\n    value: function getMaximumSize(element, width, height, aspectRatio) {\n      width = Math.max(0, width || element.width);\n      height = height || element.height;\n      return {\n        width: width,\n        height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n      };\n    }\n  }, {\n    key: \"isAttached\",\n    value: function isAttached(canvas) {\n      return true;\n    }\n  }, {\n    key: \"updateConfig\",\n    value: function updateConfig(config) {}\n  }]);\n  return BasePlatform;\n}();\nvar BasicPlatform = /*#__PURE__*/function (_BasePlatform) {\n  _inherits(BasicPlatform, _BasePlatform);\n  var _super9 = _createSuper(BasicPlatform);\n  function BasicPlatform() {\n    _classCallCheck(this, BasicPlatform);\n    return _super9.apply(this, arguments);\n  }\n  _createClass(BasicPlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(item) {\n      return item && item.getContext && item.getContext('2d') || null;\n    }\n  }, {\n    key: \"updateConfig\",\n    value: function updateConfig(config) {\n      config.options.animation = false;\n    }\n  }]);\n  return BasicPlatform;\n}(BasePlatform);\nvar EXPANDO_KEY = '$chartjs';\nvar EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nvar isNullOrEmpty = function isNullOrEmpty(value) {\n  return value === null || value === '';\n};\nfunction initCanvas(canvas, aspectRatio) {\n  var style = canvas.style;\n  var renderHeight = canvas.getAttribute('height');\n  var renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    var displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      var displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nvar eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction fromNativeEvent(event, chart) {\n  var type = EVENT_TYPES[event.type] || event.type;\n  var _getRelativePosition = getRelativePosition(event, chart),\n    x = _getRelativePosition.x,\n    y = _getRelativePosition.y;\n  return {\n    type: type,\n    chart: chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  var _iterator7 = _createForOfIteratorHelper(nodeList),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var node = _step7.value;\n      if (node === canvas || node.contains(canvas)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n  var observer = new MutationObserver(function (entries) {\n    var trigger = false;\n    var _iterator8 = _createForOfIteratorHelper(entries),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var entry = _step8.value;\n        trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n        trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n  var observer = new MutationObserver(function (entries) {\n    var trigger = false;\n    var _iterator9 = _createForOfIteratorHelper(entries),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var entry = _step9.value;\n        trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n        trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nvar drpListeningCharts = new Map();\nvar oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  var dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach(function (resize, chart) {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n  var container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  var resize = throttled(function (width, height) {\n    var w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  var observer = new ResizeObserver(function (entries) {\n    var entry = entries[0];\n    var width = entry.contentRect.width;\n    var height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  var canvas = chart.canvas;\n  var proxy = throttled(function (event) {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nvar DomPlatform = /*#__PURE__*/function (_BasePlatform2) {\n  _inherits(DomPlatform, _BasePlatform2);\n  var _super10 = _createSuper(DomPlatform);\n  function DomPlatform() {\n    _classCallCheck(this, DomPlatform);\n    return _super10.apply(this, arguments);\n  }\n  _createClass(DomPlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(canvas, aspectRatio) {\n      var context = canvas && canvas.getContext && canvas.getContext('2d');\n      if (context && context.canvas === canvas) {\n        initCanvas(canvas, aspectRatio);\n        return context;\n      }\n      return null;\n    }\n  }, {\n    key: \"releaseContext\",\n    value: function releaseContext(context) {\n      var canvas = context.canvas;\n      if (!canvas[EXPANDO_KEY]) {\n        return false;\n      }\n      var initial = canvas[EXPANDO_KEY].initial;\n      ['height', 'width'].forEach(function (prop) {\n        var value = initial[prop];\n        if (isNullOrUndef(value)) {\n          canvas.removeAttribute(prop);\n        } else {\n          canvas.setAttribute(prop, value);\n        }\n      });\n      var style = initial.style || {};\n      Object.keys(style).forEach(function (key) {\n        canvas.style[key] = style[key];\n      });\n      canvas.width = canvas.width;\n      delete canvas[EXPANDO_KEY];\n      return true;\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(chart, type, listener) {\n      this.removeEventListener(chart, type);\n      var proxies = chart.$proxies || (chart.$proxies = {});\n      var handlers = {\n        attach: createAttachObserver,\n        detach: createDetachObserver,\n        resize: createResizeObserver\n      };\n      var handler = handlers[type] || createProxyAndListen;\n      proxies[type] = handler(chart, type, listener);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(chart, type) {\n      var proxies = chart.$proxies || (chart.$proxies = {});\n      var proxy = proxies[type];\n      if (!proxy) {\n        return;\n      }\n      var handlers = {\n        attach: releaseObserver,\n        detach: releaseObserver,\n        resize: releaseObserver\n      };\n      var handler = handlers[type] || removeListener;\n      handler(chart, type, proxy);\n      proxies[type] = undefined;\n    }\n  }, {\n    key: \"getDevicePixelRatio\",\n    value: function getDevicePixelRatio() {\n      return window.devicePixelRatio;\n    }\n  }, {\n    key: \"getMaximumSize\",\n    value: function getMaximumSize(canvas, width, height, aspectRatio) {\n      return _getMaximumSize(canvas, width, height, aspectRatio);\n    }\n  }, {\n    key: \"isAttached\",\n    value: function isAttached(canvas) {\n      var container = canvas && _getParentNode(canvas);\n      return !!(container && container.isConnected);\n    }\n  }]);\n  return DomPlatform;\n}(BasePlatform);\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nvar Element = /*#__PURE__*/function () {\n  function Element() {\n    _classCallCheck(this, Element);\n    _defineProperty(this, \"x\", void 0);\n    _defineProperty(this, \"y\", void 0);\n    _defineProperty(this, \"active\", false);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"$animations\", void 0);\n  }\n  _createClass(Element, [{\n    key: \"tooltipPosition\",\n    value: function tooltipPosition(useFinalPosition) {\n      var _this$getProps = this.getProps(['x', 'y'], useFinalPosition),\n        x = _this$getProps.x,\n        y = _this$getProps.y;\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return isNumber(this.x) && isNumber(this.y);\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps(props, final) {\n      var _this8 = this;\n      var anims = this.$animations;\n      if (!final || !anims) {\n        // let's not create an object, if not needed\n        return this;\n      }\n      var ret = {};\n      props.forEach(function (prop) {\n        ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : _this8[prop];\n      });\n      return ret;\n    }\n  }]);\n  return Element;\n}();\n_defineProperty(Element, \"defaults\", {});\n_defineProperty(Element, \"defaultRoutes\", undefined);\nfunction autoSkip(scale, ticks) {\n  var tickOpts = scale.options.ticks;\n  var determinedMaxTicks = determineMaxTicks(scale);\n  var ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  var numMajorIndices = majorIndices.length;\n  var first = majorIndices[0];\n  var last = majorIndices[numMajorIndices - 1];\n  var newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  var spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    var i, ilen;\n    var avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  var offset = scale.options.offset;\n  var tickLength = scale._tickSize();\n  var maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  var maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  var evenMajorSpacing = getEvenSpacing(majorIndices);\n  var spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  var factors = _factorize(evenMajorSpacing);\n  for (var i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    var factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  var result = [];\n  var i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  var count = 0;\n  var next = majorIndices[0];\n  var i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  var start = valueOrDefault(majorStart, 0);\n  var end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  var count = 0;\n  var length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  var len = arr.length;\n  var i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nvar reverseAlign = function reverseAlign(align) {\n  return align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n};\nvar offsetFromEdge = function offsetFromEdge(scale, edge, offset) {\n  return edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n};\nvar getTicksLimit = function getTicksLimit(ticksLength, maxTicksLimit) {\n  return Math.min(maxTicksLimit || ticksLength, ticksLength);\n};\nfunction sample(arr, numItems) {\n  var result = [];\n  var increment = arr.length / numItems;\n  var len = arr.length;\n  var i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  var length = scale.ticks.length;\n  var validIndex = Math.min(index, length - 1);\n  var start = scale._startPixel;\n  var end = scale._endPixel;\n  var epsilon = 1e-6;\n  var lineValue = scale.getPixelForTick(validIndex);\n  var offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, function (cache) {\n    var gc = cache.gc;\n    var gcLen = gc.length / 2;\n    var i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  var font = toFont(options.font, fallback);\n  var padding = toPadding(options.padding);\n  var lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale: scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick: tick,\n    index: index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  var ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  var top = scale.top,\n    left = scale.left,\n    bottom = scale.bottom,\n    right = scale.right,\n    chart = scale.chart;\n  var chartArea = chart.chartArea,\n    scales = chart.scales;\n  var rotation = 0;\n  var maxWidth, titleX, titleY;\n  var height = bottom - top;\n  var width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      var positionAxisID = Object.keys(position)[0];\n      var value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      var _positionAxisID = Object.keys(position)[0];\n      var _value = position[_positionAxisID];\n      titleX = scales[_positionAxisID].getPixelForValue(_value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX: titleX,\n    titleY: titleY,\n    maxWidth: maxWidth,\n    rotation: rotation\n  };\n}\nvar Scale = /*#__PURE__*/function (_Element) {\n  _inherits(Scale, _Element);\n  var _super11 = _createSuper(Scale);\n  function Scale(cfg) {\n    var _this9;\n    _classCallCheck(this, Scale);\n    _this9 = _super11.call(this);\n    _this9.id = cfg.id;\n    _this9.type = cfg.type;\n    _this9.options = undefined;\n    _this9.ctx = cfg.ctx;\n    _this9.chart = cfg.chart;\n    _this9.top = undefined;\n    _this9.bottom = undefined;\n    _this9.left = undefined;\n    _this9.right = undefined;\n    _this9.width = undefined;\n    _this9.height = undefined;\n    _this9._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    _this9.maxWidth = undefined;\n    _this9.maxHeight = undefined;\n    _this9.paddingTop = undefined;\n    _this9.paddingBottom = undefined;\n    _this9.paddingLeft = undefined;\n    _this9.paddingRight = undefined;\n    _this9.axis = undefined;\n    _this9.labelRotation = undefined;\n    _this9.min = undefined;\n    _this9.max = undefined;\n    _this9._range = undefined;\n    _this9.ticks = [];\n    _this9._gridLineItems = null;\n    _this9._labelItems = null;\n    _this9._labelSizes = null;\n    _this9._length = 0;\n    _this9._maxLength = 0;\n    _this9._longestTextCache = {};\n    _this9._startPixel = undefined;\n    _this9._endPixel = undefined;\n    _this9._reversePixels = false;\n    _this9._userMax = undefined;\n    _this9._userMin = undefined;\n    _this9._suggestedMax = undefined;\n    _this9._suggestedMin = undefined;\n    _this9._ticksLength = 0;\n    _this9._borderValue = 0;\n    _this9._cache = {};\n    _this9._dataLimitsCached = false;\n    _this9.$context = undefined;\n    return _this9;\n  }\n  _createClass(Scale, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = options.setContext(this.getContext());\n      this.axis = options.axis;\n      this._userMin = this.parse(options.min);\n      this._userMax = this.parse(options.max);\n      this._suggestedMin = this.parse(options.suggestedMin);\n      this._suggestedMax = this.parse(options.suggestedMax);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      return raw;\n    }\n  }, {\n    key: \"getUserBounds\",\n    value: function getUserBounds() {\n      var _userMin = this._userMin,\n        _userMax = this._userMax,\n        _suggestedMin = this._suggestedMin,\n        _suggestedMax = this._suggestedMax;\n      _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n      _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n      _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n      _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n      return {\n        min: finiteOrDefault(_userMin, _suggestedMin),\n        max: finiteOrDefault(_userMax, _suggestedMax),\n        minDefined: isNumberFinite(_userMin),\n        maxDefined: isNumberFinite(_userMax)\n      };\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax(canStack) {\n      var _this$getUserBounds = this.getUserBounds(),\n        min = _this$getUserBounds.min,\n        max = _this$getUserBounds.max,\n        minDefined = _this$getUserBounds.minDefined,\n        maxDefined = _this$getUserBounds.maxDefined;\n      var range;\n      if (minDefined && maxDefined) {\n        return {\n          min: min,\n          max: max\n        };\n      }\n      var metas = this.getMatchingVisibleMetas();\n      for (var i = 0, ilen = metas.length; i < ilen; ++i) {\n        range = metas[i].controller.getMinMax(this, canStack);\n        if (!minDefined) {\n          min = Math.min(min, range.min);\n        }\n        if (!maxDefined) {\n          max = Math.max(max, range.max);\n        }\n      }\n      min = maxDefined && min > max ? max : min;\n      max = minDefined && min > max ? min : max;\n      return {\n        min: finiteOrDefault(min, finiteOrDefault(max, min)),\n        max: finiteOrDefault(max, finiteOrDefault(min, max))\n      };\n    }\n  }, {\n    key: \"getPadding\",\n    value: function getPadding() {\n      return {\n        left: this.paddingLeft || 0,\n        top: this.paddingTop || 0,\n        right: this.paddingRight || 0,\n        bottom: this.paddingBottom || 0\n      };\n    }\n  }, {\n    key: \"getTicks\",\n    value: function getTicks() {\n      return this.ticks;\n    }\n  }, {\n    key: \"getLabels\",\n    value: function getLabels() {\n      var data = this.chart.data;\n      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n  }, {\n    key: \"getLabelItems\",\n    value: function getLabelItems() {\n      var chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n      var items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n      return items;\n    }\n  }, {\n    key: \"beforeLayout\",\n    value: function beforeLayout() {\n      this._cache = {};\n      this._dataLimitsCached = false;\n    }\n  }, {\n    key: \"beforeUpdate\",\n    value: function beforeUpdate() {\n      callback(this.options.beforeUpdate, [this]);\n    }\n  }, {\n    key: \"update\",\n    value: function update(maxWidth, maxHeight, margins) {\n      var _this$options4 = this.options,\n        beginAtZero = _this$options4.beginAtZero,\n        grace = _this$options4.grace,\n        tickOpts = _this$options4.ticks;\n      var sampleSize = tickOpts.sampleSize;\n      this.beforeUpdate();\n      this.maxWidth = maxWidth;\n      this.maxHeight = maxHeight;\n      this._margins = margins = Object.assign({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, margins);\n      this.ticks = null;\n      this._labelSizes = null;\n      this._gridLineItems = null;\n      this._labelItems = null;\n      this.beforeSetDimensions();\n      this.setDimensions();\n      this.afterSetDimensions();\n      this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n      if (!this._dataLimitsCached) {\n        this.beforeDataLimits();\n        this.determineDataLimits();\n        this.afterDataLimits();\n        this._range = _addGrace(this, grace, beginAtZero);\n        this._dataLimitsCached = true;\n      }\n      this.beforeBuildTicks();\n      this.ticks = this.buildTicks() || [];\n      this.afterBuildTicks();\n      var samplingEnabled = sampleSize < this.ticks.length;\n      this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n      this.configure();\n      this.beforeCalculateLabelRotation();\n      this.calculateLabelRotation();\n      this.afterCalculateLabelRotation();\n      if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n        this.ticks = autoSkip(this, this.ticks);\n        this._labelSizes = null;\n        this.afterAutoSkip();\n      }\n      if (samplingEnabled) {\n        this._convertTicksToLabels(this.ticks);\n      }\n      this.beforeFit();\n      this.fit();\n      this.afterFit();\n      this.afterUpdate();\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var reversePixels = this.options.reverse;\n      var startPixel, endPixel;\n      if (this.isHorizontal()) {\n        startPixel = this.left;\n        endPixel = this.right;\n      } else {\n        startPixel = this.top;\n        endPixel = this.bottom;\n        reversePixels = !reversePixels;\n      }\n      this._startPixel = startPixel;\n      this._endPixel = endPixel;\n      this._reversePixels = reversePixels;\n      this._length = endPixel - startPixel;\n      this._alignToPixels = this.options.alignToPixels;\n    }\n  }, {\n    key: \"afterUpdate\",\n    value: function afterUpdate() {\n      callback(this.options.afterUpdate, [this]);\n    }\n  }, {\n    key: \"beforeSetDimensions\",\n    value: function beforeSetDimensions() {\n      callback(this.options.beforeSetDimensions, [this]);\n    }\n  }, {\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      if (this.isHorizontal()) {\n        this.width = this.maxWidth;\n        this.left = 0;\n        this.right = this.width;\n      } else {\n        this.height = this.maxHeight;\n        this.top = 0;\n        this.bottom = this.height;\n      }\n      this.paddingLeft = 0;\n      this.paddingTop = 0;\n      this.paddingRight = 0;\n      this.paddingBottom = 0;\n    }\n  }, {\n    key: \"afterSetDimensions\",\n    value: function afterSetDimensions() {\n      callback(this.options.afterSetDimensions, [this]);\n    }\n  }, {\n    key: \"_callHooks\",\n    value: function _callHooks(name) {\n      this.chart.notifyPlugins(name, this.getContext());\n      callback(this.options[name], [this]);\n    }\n  }, {\n    key: \"beforeDataLimits\",\n    value: function beforeDataLimits() {\n      this._callHooks('beforeDataLimits');\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {}\n  }, {\n    key: \"afterDataLimits\",\n    value: function afterDataLimits() {\n      this._callHooks('afterDataLimits');\n    }\n  }, {\n    key: \"beforeBuildTicks\",\n    value: function beforeBuildTicks() {\n      this._callHooks('beforeBuildTicks');\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      return [];\n    }\n  }, {\n    key: \"afterBuildTicks\",\n    value: function afterBuildTicks() {\n      this._callHooks('afterBuildTicks');\n    }\n  }, {\n    key: \"beforeTickToLabelConversion\",\n    value: function beforeTickToLabelConversion() {\n      callback(this.options.beforeTickToLabelConversion, [this]);\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var tickOpts = this.options.ticks;\n      var i, ilen, tick;\n      for (i = 0, ilen = ticks.length; i < ilen; i++) {\n        tick = ticks[i];\n        tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n      }\n    }\n  }, {\n    key: \"afterTickToLabelConversion\",\n    value: function afterTickToLabelConversion() {\n      callback(this.options.afterTickToLabelConversion, [this]);\n    }\n  }, {\n    key: \"beforeCalculateLabelRotation\",\n    value: function beforeCalculateLabelRotation() {\n      callback(this.options.beforeCalculateLabelRotation, [this]);\n    }\n  }, {\n    key: \"calculateLabelRotation\",\n    value: function calculateLabelRotation() {\n      var options = this.options;\n      var tickOpts = options.ticks;\n      var numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n      var minRotation = tickOpts.minRotation || 0;\n      var maxRotation = tickOpts.maxRotation;\n      var labelRotation = minRotation;\n      var tickWidth, maxHeight, maxLabelDiagonal;\n      if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n        this.labelRotation = minRotation;\n        return;\n      }\n      var labelSizes = this._getLabelSizes();\n      var maxLabelWidth = labelSizes.widest.width;\n      var maxLabelHeight = labelSizes.highest.height;\n      var maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n      tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n      if (maxLabelWidth + 6 > tickWidth) {\n        tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n        maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n        maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n        labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n        labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n      }\n      this.labelRotation = labelRotation;\n    }\n  }, {\n    key: \"afterCalculateLabelRotation\",\n    value: function afterCalculateLabelRotation() {\n      callback(this.options.afterCalculateLabelRotation, [this]);\n    }\n  }, {\n    key: \"afterAutoSkip\",\n    value: function afterAutoSkip() {}\n  }, {\n    key: \"beforeFit\",\n    value: function beforeFit() {\n      callback(this.options.beforeFit, [this]);\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var minSize = {\n        width: 0,\n        height: 0\n      };\n      var chart = this.chart,\n        _this$options5 = this.options,\n        tickOpts = _this$options5.ticks,\n        titleOpts = _this$options5.title,\n        gridOpts = _this$options5.grid;\n      var display = this._isVisible();\n      var isHorizontal = this.isHorizontal();\n      if (display) {\n        var titleHeight = getTitleHeight(titleOpts, chart.options.font);\n        if (isHorizontal) {\n          minSize.width = this.maxWidth;\n          minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n        } else {\n          minSize.height = this.maxHeight;\n          minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n        }\n        if (tickOpts.display && this.ticks.length) {\n          var _this$_getLabelSizes = this._getLabelSizes(),\n            first = _this$_getLabelSizes.first,\n            last = _this$_getLabelSizes.last,\n            widest = _this$_getLabelSizes.widest,\n            highest = _this$_getLabelSizes.highest;\n          var tickPadding = tickOpts.padding * 2;\n          var angleRadians = toRadians(this.labelRotation);\n          var cos = Math.cos(angleRadians);\n          var sin = Math.sin(angleRadians);\n          if (isHorizontal) {\n            var labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n            minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n          } else {\n            var labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n            minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n          }\n          this._calculatePadding(first, last, sin, cos);\n        }\n      }\n      this._handleMargins();\n      if (isHorizontal) {\n        this.width = this._length = chart.width - this._margins.left - this._margins.right;\n        this.height = minSize.height;\n      } else {\n        this.width = minSize.width;\n        this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n      }\n    }\n  }, {\n    key: \"_calculatePadding\",\n    value: function _calculatePadding(first, last, sin, cos) {\n      var _this$options6 = this.options,\n        _this$options6$ticks = _this$options6.ticks,\n        align = _this$options6$ticks.align,\n        padding = _this$options6$ticks.padding,\n        position = _this$options6.position;\n      var isRotated = this.labelRotation !== 0;\n      var labelsBelowTicks = position !== 'top' && this.axis === 'x';\n      if (this.isHorizontal()) {\n        var offsetLeft = this.getPixelForTick(0) - this.left;\n        var offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n        var paddingLeft = 0;\n        var paddingRight = 0;\n        if (isRotated) {\n          if (labelsBelowTicks) {\n            paddingLeft = cos * first.width;\n            paddingRight = sin * last.height;\n          } else {\n            paddingLeft = sin * first.height;\n            paddingRight = cos * last.width;\n          }\n        } else if (align === 'start') {\n          paddingRight = last.width;\n        } else if (align === 'end') {\n          paddingLeft = first.width;\n        } else if (align !== 'inner') {\n          paddingLeft = first.width / 2;\n          paddingRight = last.width / 2;\n        }\n        this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n        this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n      } else {\n        var paddingTop = last.height / 2;\n        var paddingBottom = first.height / 2;\n        if (align === 'start') {\n          paddingTop = 0;\n          paddingBottom = first.height;\n        } else if (align === 'end') {\n          paddingTop = last.height;\n          paddingBottom = 0;\n        }\n        this.paddingTop = paddingTop + padding;\n        this.paddingBottom = paddingBottom + padding;\n      }\n    }\n  }, {\n    key: \"_handleMargins\",\n    value: function _handleMargins() {\n      if (this._margins) {\n        this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n        this._margins.top = Math.max(this.paddingTop, this._margins.top);\n        this._margins.right = Math.max(this.paddingRight, this._margins.right);\n        this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n      }\n    }\n  }, {\n    key: \"afterFit\",\n    value: function afterFit() {\n      callback(this.options.afterFit, [this]);\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      var _this$options7 = this.options,\n        axis = _this$options7.axis,\n        position = _this$options7.position;\n      return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n  }, {\n    key: \"isFullSize\",\n    value: function isFullSize() {\n      return this.options.fullSize;\n    }\n  }, {\n    key: \"_convertTicksToLabels\",\n    value: function _convertTicksToLabels(ticks) {\n      this.beforeTickToLabelConversion();\n      this.generateTickLabels(ticks);\n      var i, ilen;\n      for (i = 0, ilen = ticks.length; i < ilen; i++) {\n        if (isNullOrUndef(ticks[i].label)) {\n          ticks.splice(i, 1);\n          ilen--;\n          i--;\n        }\n      }\n      this.afterTickToLabelConversion();\n    }\n  }, {\n    key: \"_getLabelSizes\",\n    value: function _getLabelSizes() {\n      var labelSizes = this._labelSizes;\n      if (!labelSizes) {\n        var sampleSize = this.options.ticks.sampleSize;\n        var ticks = this.ticks;\n        if (sampleSize < ticks.length) {\n          ticks = sample(ticks, sampleSize);\n        }\n        this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n      }\n      return labelSizes;\n    }\n  }, {\n    key: \"_computeLabelSizes\",\n    value: function _computeLabelSizes(ticks, length, maxTicksLimit) {\n      var ctx = this.ctx,\n        caches = this._longestTextCache;\n      var widths = [];\n      var heights = [];\n      var increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n      var widestLabelSize = 0;\n      var highestLabelSize = 0;\n      var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n      for (i = 0; i < length; i += increment) {\n        label = ticks[i].label;\n        tickFont = this._resolveTickFontOptions(i);\n        ctx.font = fontString = tickFont.string;\n        cache = caches[fontString] = caches[fontString] || {\n          data: {},\n          gc: []\n        };\n        lineHeight = tickFont.lineHeight;\n        width = height = 0;\n        if (!isNullOrUndef(label) && !isArray(label)) {\n          width = _measureText(ctx, cache.data, cache.gc, width, label);\n          height = lineHeight;\n        } else if (isArray(label)) {\n          for (j = 0, jlen = label.length; j < jlen; ++j) {\n            nestedLabel = label[j];\n            if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n              width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n              height += lineHeight;\n            }\n          }\n        }\n        widths.push(width);\n        heights.push(height);\n        widestLabelSize = Math.max(width, widestLabelSize);\n        highestLabelSize = Math.max(height, highestLabelSize);\n      }\n      garbageCollect(caches, length);\n      var widest = widths.indexOf(widestLabelSize);\n      var highest = heights.indexOf(highestLabelSize);\n      var valueAt = function valueAt(idx) {\n        return {\n          width: widths[idx] || 0,\n          height: heights[idx] || 0\n        };\n      };\n      return {\n        first: valueAt(0),\n        last: valueAt(length - 1),\n        widest: valueAt(widest),\n        highest: valueAt(highest),\n        widths: widths,\n        heights: heights\n      };\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return value;\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value, index) {\n      return NaN;\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {}\n  }, {\n    key: \"getPixelForTick\",\n    value: function getPixelForTick(index) {\n      var ticks = this.ticks;\n      if (index < 0 || index > ticks.length - 1) {\n        return null;\n      }\n      return this.getPixelForValue(ticks[index].value);\n    }\n  }, {\n    key: \"getPixelForDecimal\",\n    value: function getPixelForDecimal(decimal) {\n      if (this._reversePixels) {\n        decimal = 1 - decimal;\n      }\n      var pixel = this._startPixel + decimal * this._length;\n      return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n  }, {\n    key: \"getDecimalForPixel\",\n    value: function getDecimalForPixel(pixel) {\n      var decimal = (pixel - this._startPixel) / this._length;\n      return this._reversePixels ? 1 - decimal : decimal;\n    }\n  }, {\n    key: \"getBasePixel\",\n    value: function getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    }\n  }, {\n    key: \"getBaseValue\",\n    value: function getBaseValue() {\n      var min = this.min,\n        max = this.max;\n      return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(index) {\n      var ticks = this.ticks || [];\n      if (index >= 0 && index < ticks.length) {\n        var tick = ticks[index];\n        return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n      }\n      return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n  }, {\n    key: \"_tickSize\",\n    value: function _tickSize() {\n      var optionTicks = this.options.ticks;\n      var rot = toRadians(this.labelRotation);\n      var cos = Math.abs(Math.cos(rot));\n      var sin = Math.abs(Math.sin(rot));\n      var labelSizes = this._getLabelSizes();\n      var padding = optionTicks.autoSkipPadding || 0;\n      var w = labelSizes ? labelSizes.widest.width + padding : 0;\n      var h = labelSizes ? labelSizes.highest.height + padding : 0;\n      return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function _isVisible() {\n      var display = this.options.display;\n      if (display !== 'auto') {\n        return !!display;\n      }\n      return this.getMatchingVisibleMetas().length > 0;\n    }\n  }, {\n    key: \"_computeGridLineItems\",\n    value: function _computeGridLineItems(chartArea) {\n      var axis = this.axis;\n      var chart = this.chart;\n      var options = this.options;\n      var grid = options.grid,\n        position = options.position,\n        border = options.border;\n      var offset = grid.offset;\n      var isHorizontal = this.isHorizontal();\n      var ticks = this.ticks;\n      var ticksLength = ticks.length + (offset ? 1 : 0);\n      var tl = getTickMarkLength(grid);\n      var items = [];\n      var borderOpts = border.setContext(this.getContext());\n      var axisWidth = borderOpts.display ? borderOpts.width : 0;\n      var axisHalfWidth = axisWidth / 2;\n      var alignBorderValue = function alignBorderValue(pixel) {\n        return _alignPixel(chart, pixel, axisWidth);\n      };\n      var borderValue, i, lineValue, alignedLineValue;\n      var tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n      if (position === 'top') {\n        borderValue = alignBorderValue(this.bottom);\n        ty1 = this.bottom - tl;\n        ty2 = borderValue - axisHalfWidth;\n        y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n        y2 = chartArea.bottom;\n      } else if (position === 'bottom') {\n        borderValue = alignBorderValue(this.top);\n        y1 = chartArea.top;\n        y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n        ty1 = borderValue + axisHalfWidth;\n        ty2 = this.top + tl;\n      } else if (position === 'left') {\n        borderValue = alignBorderValue(this.right);\n        tx1 = this.right - tl;\n        tx2 = borderValue - axisHalfWidth;\n        x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n        x2 = chartArea.right;\n      } else if (position === 'right') {\n        borderValue = alignBorderValue(this.left);\n        x1 = chartArea.left;\n        x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n        tx1 = borderValue + axisHalfWidth;\n        tx2 = this.left + tl;\n      } else if (axis === 'x') {\n        if (position === 'center') {\n          borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n        } else if (isObject(position)) {\n          var positionAxisID = Object.keys(position)[0];\n          var value = position[positionAxisID];\n          borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n        }\n        y1 = chartArea.top;\n        y2 = chartArea.bottom;\n        ty1 = borderValue + axisHalfWidth;\n        ty2 = ty1 + tl;\n      } else if (axis === 'y') {\n        if (position === 'center') {\n          borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n        } else if (isObject(position)) {\n          var _positionAxisID2 = Object.keys(position)[0];\n          var _value2 = position[_positionAxisID2];\n          borderValue = alignBorderValue(this.chart.scales[_positionAxisID2].getPixelForValue(_value2));\n        }\n        tx1 = borderValue - axisHalfWidth;\n        tx2 = tx1 - tl;\n        x1 = chartArea.left;\n        x2 = chartArea.right;\n      }\n      var limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n      var step = Math.max(1, Math.ceil(ticksLength / limit));\n      for (i = 0; i < ticksLength; i += step) {\n        var context = this.getContext(i);\n        var optsAtIndex = grid.setContext(context);\n        var optsAtIndexBorder = border.setContext(context);\n        var lineWidth = optsAtIndex.lineWidth;\n        var lineColor = optsAtIndex.color;\n        var borderDash = optsAtIndexBorder.dash || [];\n        var borderDashOffset = optsAtIndexBorder.dashOffset;\n        var tickWidth = optsAtIndex.tickWidth;\n        var tickColor = optsAtIndex.tickColor;\n        var tickBorderDash = optsAtIndex.tickBorderDash || [];\n        var tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n        lineValue = getPixelForGridLine(this, i, offset);\n        if (lineValue === undefined) {\n          continue;\n        }\n        alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n        if (isHorizontal) {\n          tx1 = tx2 = x1 = x2 = alignedLineValue;\n        } else {\n          ty1 = ty2 = y1 = y2 = alignedLineValue;\n        }\n        items.push({\n          tx1: tx1,\n          ty1: ty1,\n          tx2: tx2,\n          ty2: ty2,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          width: lineWidth,\n          color: lineColor,\n          borderDash: borderDash,\n          borderDashOffset: borderDashOffset,\n          tickWidth: tickWidth,\n          tickColor: tickColor,\n          tickBorderDash: tickBorderDash,\n          tickBorderDashOffset: tickBorderDashOffset\n        });\n      }\n      this._ticksLength = ticksLength;\n      this._borderValue = borderValue;\n      return items;\n    }\n  }, {\n    key: \"_computeLabelItems\",\n    value: function _computeLabelItems(chartArea) {\n      var axis = this.axis;\n      var options = this.options;\n      var position = options.position,\n        optionTicks = options.ticks;\n      var isHorizontal = this.isHorizontal();\n      var ticks = this.ticks;\n      var align = optionTicks.align,\n        crossAlign = optionTicks.crossAlign,\n        padding = optionTicks.padding,\n        mirror = optionTicks.mirror;\n      var tl = getTickMarkLength(options.grid);\n      var tickAndPadding = tl + padding;\n      var hTickAndPadding = mirror ? -padding : tickAndPadding;\n      var rotation = -toRadians(this.labelRotation);\n      var items = [];\n      var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n      var textBaseline = 'middle';\n      if (position === 'top') {\n        y = this.bottom - hTickAndPadding;\n        textAlign = this._getXAxisLabelAlignment();\n      } else if (position === 'bottom') {\n        y = this.top + hTickAndPadding;\n        textAlign = this._getXAxisLabelAlignment();\n      } else if (position === 'left') {\n        var ret = this._getYAxisLabelAlignment(tl);\n        textAlign = ret.textAlign;\n        x = ret.x;\n      } else if (position === 'right') {\n        var _ret = this._getYAxisLabelAlignment(tl);\n        textAlign = _ret.textAlign;\n        x = _ret.x;\n      } else if (axis === 'x') {\n        if (position === 'center') {\n          y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n        } else if (isObject(position)) {\n          var positionAxisID = Object.keys(position)[0];\n          var value = position[positionAxisID];\n          y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n        }\n        textAlign = this._getXAxisLabelAlignment();\n      } else if (axis === 'y') {\n        if (position === 'center') {\n          x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n        } else if (isObject(position)) {\n          var _positionAxisID3 = Object.keys(position)[0];\n          var _value3 = position[_positionAxisID3];\n          x = this.chart.scales[_positionAxisID3].getPixelForValue(_value3);\n        }\n        textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n      }\n      if (axis === 'y') {\n        if (align === 'start') {\n          textBaseline = 'top';\n        } else if (align === 'end') {\n          textBaseline = 'bottom';\n        }\n      }\n      var labelSizes = this._getLabelSizes();\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        tick = ticks[i];\n        label = tick.label;\n        var optsAtIndex = optionTicks.setContext(this.getContext(i));\n        pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n        font = this._resolveTickFontOptions(i);\n        lineHeight = font.lineHeight;\n        lineCount = isArray(label) ? label.length : 1;\n        var halfCount = lineCount / 2;\n        var color = optsAtIndex.color;\n        var strokeColor = optsAtIndex.textStrokeColor;\n        var strokeWidth = optsAtIndex.textStrokeWidth;\n        var tickTextAlign = textAlign;\n        if (isHorizontal) {\n          x = pixel;\n          if (textAlign === 'inner') {\n            if (i === ilen - 1) {\n              tickTextAlign = !this.options.reverse ? 'right' : 'left';\n            } else if (i === 0) {\n              tickTextAlign = !this.options.reverse ? 'left' : 'right';\n            } else {\n              tickTextAlign = 'center';\n            }\n          }\n          if (position === 'top') {\n            if (crossAlign === 'near' || rotation !== 0) {\n              textOffset = -lineCount * lineHeight + lineHeight / 2;\n            } else if (crossAlign === 'center') {\n              textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n            } else {\n              textOffset = -labelSizes.highest.height + lineHeight / 2;\n            }\n          } else {\n            if (crossAlign === 'near' || rotation !== 0) {\n              textOffset = lineHeight / 2;\n            } else if (crossAlign === 'center') {\n              textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n            } else {\n              textOffset = labelSizes.highest.height - lineCount * lineHeight;\n            }\n          }\n          if (mirror) {\n            textOffset *= -1;\n          }\n          if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n            x += lineHeight / 2 * Math.sin(rotation);\n          }\n        } else {\n          y = pixel;\n          textOffset = (1 - lineCount) * lineHeight / 2;\n        }\n        var backdrop = void 0;\n        if (optsAtIndex.showLabelBackdrop) {\n          var labelPadding = toPadding(optsAtIndex.backdropPadding);\n          var height = labelSizes.heights[i];\n          var width = labelSizes.widths[i];\n          var top = textOffset - labelPadding.top;\n          var left = 0 - labelPadding.left;\n          switch (textBaseline) {\n            case 'middle':\n              top -= height / 2;\n              break;\n            case 'bottom':\n              top -= height;\n              break;\n          }\n          switch (textAlign) {\n            case 'center':\n              left -= width / 2;\n              break;\n            case 'right':\n              left -= width;\n              break;\n            case 'inner':\n              if (i === ilen - 1) {\n                left -= width;\n              } else if (i > 0) {\n                left -= width / 2;\n              }\n              break;\n          }\n          backdrop = {\n            left: left,\n            top: top,\n            width: width + labelPadding.width,\n            height: height + labelPadding.height,\n            color: optsAtIndex.backdropColor\n          };\n        }\n        items.push({\n          label: label,\n          font: font,\n          textOffset: textOffset,\n          options: {\n            rotation: rotation,\n            color: color,\n            strokeColor: strokeColor,\n            strokeWidth: strokeWidth,\n            textAlign: tickTextAlign,\n            textBaseline: textBaseline,\n            translation: [x, y],\n            backdrop: backdrop\n          }\n        });\n      }\n      return items;\n    }\n  }, {\n    key: \"_getXAxisLabelAlignment\",\n    value: function _getXAxisLabelAlignment() {\n      var _this$options8 = this.options,\n        position = _this$options8.position,\n        ticks = _this$options8.ticks;\n      var rotation = -toRadians(this.labelRotation);\n      if (rotation) {\n        return position === 'top' ? 'left' : 'right';\n      }\n      var align = 'center';\n      if (ticks.align === 'start') {\n        align = 'left';\n      } else if (ticks.align === 'end') {\n        align = 'right';\n      } else if (ticks.align === 'inner') {\n        align = 'inner';\n      }\n      return align;\n    }\n  }, {\n    key: \"_getYAxisLabelAlignment\",\n    value: function _getYAxisLabelAlignment(tl) {\n      var _this$options9 = this.options,\n        position = _this$options9.position,\n        _this$options9$ticks = _this$options9.ticks,\n        crossAlign = _this$options9$ticks.crossAlign,\n        mirror = _this$options9$ticks.mirror,\n        padding = _this$options9$ticks.padding;\n      var labelSizes = this._getLabelSizes();\n      var tickAndPadding = tl + padding;\n      var widest = labelSizes.widest.width;\n      var textAlign;\n      var x;\n      if (position === 'left') {\n        if (mirror) {\n          x = this.right + padding;\n          if (crossAlign === 'near') {\n            textAlign = 'left';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x += widest / 2;\n          } else {\n            textAlign = 'right';\n            x += widest;\n          }\n        } else {\n          x = this.right - tickAndPadding;\n          if (crossAlign === 'near') {\n            textAlign = 'right';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x -= widest / 2;\n          } else {\n            textAlign = 'left';\n            x = this.left;\n          }\n        }\n      } else if (position === 'right') {\n        if (mirror) {\n          x = this.left + padding;\n          if (crossAlign === 'near') {\n            textAlign = 'right';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x -= widest / 2;\n          } else {\n            textAlign = 'left';\n            x -= widest;\n          }\n        } else {\n          x = this.left + tickAndPadding;\n          if (crossAlign === 'near') {\n            textAlign = 'left';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x += widest / 2;\n          } else {\n            textAlign = 'right';\n            x = this.right;\n          }\n        }\n      } else {\n        textAlign = 'right';\n      }\n      return {\n        textAlign: textAlign,\n        x: x\n      };\n    }\n  }, {\n    key: \"_computeLabelArea\",\n    value: function _computeLabelArea() {\n      if (this.options.ticks.mirror) {\n        return;\n      }\n      var chart = this.chart;\n      var position = this.options.position;\n      if (position === 'left' || position === 'right') {\n        return {\n          top: 0,\n          left: this.left,\n          bottom: chart.height,\n          right: this.right\n        };\n      }\n      if (position === 'top' || position === 'bottom') {\n        return {\n          top: this.top,\n          left: 0,\n          bottom: this.bottom,\n          right: chart.width\n        };\n      }\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground() {\n      var ctx = this.ctx,\n        backgroundColor = this.options.backgroundColor,\n        left = this.left,\n        top = this.top,\n        width = this.width,\n        height = this.height;\n      if (backgroundColor) {\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(left, top, width, height);\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"getLineWidthForValue\",\n    value: function getLineWidthForValue(value) {\n      var grid = this.options.grid;\n      if (!this._isVisible() || !grid.display) {\n        return 0;\n      }\n      var ticks = this.ticks;\n      var index = ticks.findIndex(function (t) {\n        return t.value === value;\n      });\n      if (index >= 0) {\n        var opts = grid.setContext(this.getContext(index));\n        return opts.lineWidth;\n      }\n      return 0;\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid(chartArea) {\n      var grid = this.options.grid;\n      var ctx = this.ctx;\n      var items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n      var i, ilen;\n      var drawLine = function drawLine(p1, p2, style) {\n        if (!style.width || !style.color) {\n          return;\n        }\n        ctx.save();\n        ctx.lineWidth = style.width;\n        ctx.strokeStyle = style.color;\n        ctx.setLineDash(style.borderDash || []);\n        ctx.lineDashOffset = style.borderDashOffset;\n        ctx.beginPath();\n        ctx.moveTo(p1.x, p1.y);\n        ctx.lineTo(p2.x, p2.y);\n        ctx.stroke();\n        ctx.restore();\n      };\n      if (grid.display) {\n        for (i = 0, ilen = items.length; i < ilen; ++i) {\n          var item = items[i];\n          if (grid.drawOnChartArea) {\n            drawLine({\n              x: item.x1,\n              y: item.y1\n            }, {\n              x: item.x2,\n              y: item.y2\n            }, item);\n          }\n          if (grid.drawTicks) {\n            drawLine({\n              x: item.tx1,\n              y: item.ty1\n            }, {\n              x: item.tx2,\n              y: item.ty2\n            }, {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"drawBorder\",\n    value: function drawBorder() {\n      var chart = this.chart,\n        ctx = this.ctx,\n        _this$options10 = this.options,\n        border = _this$options10.border,\n        grid = _this$options10.grid;\n      var borderOpts = border.setContext(this.getContext());\n      var axisWidth = border.display ? borderOpts.width : 0;\n      if (!axisWidth) {\n        return;\n      }\n      var lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n      var borderValue = this._borderValue;\n      var x1, x2, y1, y2;\n      if (this.isHorizontal()) {\n        x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n        x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n        y1 = y2 = borderValue;\n      } else {\n        y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n        y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n        x1 = x2 = borderValue;\n      }\n      ctx.save();\n      ctx.lineWidth = borderOpts.width;\n      ctx.strokeStyle = borderOpts.color;\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }, {\n    key: \"drawLabels\",\n    value: function drawLabels(chartArea) {\n      var optionTicks = this.options.ticks;\n      if (!optionTicks.display) {\n        return;\n      }\n      var ctx = this.ctx;\n      var area = this._computeLabelArea();\n      if (area) {\n        clipArea(ctx, area);\n      }\n      var items = this.getLabelItems(chartArea);\n      var _iterator10 = _createForOfIteratorHelper(items),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var item = _step10.value;\n          var renderTextOptions = item.options;\n          var tickFont = item.font;\n          var label = item.label;\n          var y = item.textOffset;\n          renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      if (area) {\n        unclipArea(ctx);\n      }\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {\n      var ctx = this.ctx,\n        _this$options11 = this.options,\n        position = _this$options11.position,\n        title = _this$options11.title,\n        reverse = _this$options11.reverse;\n      if (!title.display) {\n        return;\n      }\n      var font = toFont(title.font);\n      var padding = toPadding(title.padding);\n      var align = title.align;\n      var offset = font.lineHeight / 2;\n      if (position === 'bottom' || position === 'center' || isObject(position)) {\n        offset += padding.bottom;\n        if (isArray(title.text)) {\n          offset += font.lineHeight * (title.text.length - 1);\n        }\n      } else {\n        offset += padding.top;\n      }\n      var _titleArgs = titleArgs(this, offset, position, align),\n        titleX = _titleArgs.titleX,\n        titleY = _titleArgs.titleY,\n        maxWidth = _titleArgs.maxWidth,\n        rotation = _titleArgs.rotation;\n      renderText(ctx, title.text, 0, 0, font, {\n        color: title.color,\n        maxWidth: maxWidth,\n        rotation: rotation,\n        textAlign: titleAlign(align, position, reverse),\n        textBaseline: 'middle',\n        translation: [titleX, titleY]\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(chartArea) {\n      if (!this._isVisible()) {\n        return;\n      }\n      this.drawBackground();\n      this.drawGrid(chartArea);\n      this.drawBorder();\n      this.drawTitle();\n      this.drawLabels(chartArea);\n    }\n  }, {\n    key: \"_layers\",\n    value: function _layers() {\n      var _this10 = this;\n      var opts = this.options;\n      var tz = opts.ticks && opts.ticks.z || 0;\n      var gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n      var bz = valueOrDefault(opts.border && opts.border.z, 0);\n      if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n        return [{\n          z: tz,\n          draw: function draw(chartArea) {\n            _this10.draw(chartArea);\n          }\n        }];\n      }\n      return [{\n        z: gz,\n        draw: function draw(chartArea) {\n          _this10.drawBackground();\n          _this10.drawGrid(chartArea);\n          _this10.drawTitle();\n        }\n      }, {\n        z: bz,\n        draw: function draw() {\n          _this10.drawBorder();\n        }\n      }, {\n        z: tz,\n        draw: function draw(chartArea) {\n          _this10.drawLabels(chartArea);\n        }\n      }];\n    }\n  }, {\n    key: \"getMatchingVisibleMetas\",\n    value: function getMatchingVisibleMetas(type) {\n      var metas = this.chart.getSortedVisibleDatasetMetas();\n      var axisID = this.axis + 'AxisID';\n      var result = [];\n      var i, ilen;\n      for (i = 0, ilen = metas.length; i < ilen; ++i) {\n        var meta = metas[i];\n        if (meta[axisID] === this.id && (!type || meta.type === type)) {\n          result.push(meta);\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"_resolveTickFontOptions\",\n    value: function _resolveTickFontOptions(index) {\n      var opts = this.options.ticks.setContext(this.getContext(index));\n      return toFont(opts.font);\n    }\n  }, {\n    key: \"_maxDigits\",\n    value: function _maxDigits() {\n      var fontSize = this._resolveTickFontOptions(0).lineHeight;\n      return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n  }]);\n  return Scale;\n}(Element);\nvar TypedRegistry = /*#__PURE__*/function () {\n  function TypedRegistry(type, scope, override) {\n    _classCallCheck(this, TypedRegistry);\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  _createClass(TypedRegistry, [{\n    key: \"isForType\",\n    value: function isForType(type) {\n      return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n  }, {\n    key: \"register\",\n    value: function register(item) {\n      var proto = Object.getPrototypeOf(item);\n      var parentScope;\n      if (isIChartComponent(proto)) {\n        parentScope = this.register(proto);\n      }\n      var items = this.items;\n      var id = item.id;\n      var scope = this.scope + '.' + id;\n      if (!id) {\n        throw new Error('class does not have id: ' + item);\n      }\n      if (id in items) {\n        return scope;\n      }\n      items[id] = item;\n      registerDefaults(item, scope, parentScope);\n      if (this.override) {\n        defaults.override(item.id, item.overrides);\n      }\n      return scope;\n    }\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      return this.items[id];\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister(item) {\n      var items = this.items;\n      var id = item.id;\n      var scope = this.scope;\n      if (id in items) {\n        delete items[id];\n      }\n      if (scope && id in defaults[scope]) {\n        delete defaults[scope][id];\n        if (this.override) {\n          delete overrides[id];\n        }\n      }\n    }\n  }]);\n  return TypedRegistry;\n}();\nfunction registerDefaults(item, scope, parentScope) {\n  var itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(function (property) {\n    var propertyParts = property.split('.');\n    var sourceName = propertyParts.pop();\n    var sourceScope = [scope].concat(propertyParts).join('.');\n    var parts = routes[property].split('.');\n    var targetName = parts.pop();\n    var targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nvar Registry = /*#__PURE__*/function () {\n  function Registry() {\n    _classCallCheck(this, Registry);\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  _createClass(Registry, [{\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      this._each('register', args);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      this._each('unregister', args);\n    }\n  }, {\n    key: \"addControllers\",\n    value: function addControllers() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      this._each('register', args, this.controllers);\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      this._each('register', args, this.elements);\n    }\n  }, {\n    key: \"addPlugins\",\n    value: function addPlugins() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      this._each('register', args, this.plugins);\n    }\n  }, {\n    key: \"addScales\",\n    value: function addScales() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      this._each('register', args, this.scales);\n    }\n  }, {\n    key: \"getController\",\n    value: function getController(id) {\n      return this._get(id, this.controllers, 'controller');\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(id) {\n      return this._get(id, this.elements, 'element');\n    }\n  }, {\n    key: \"getPlugin\",\n    value: function getPlugin(id) {\n      return this._get(id, this.plugins, 'plugin');\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale(id) {\n      return this._get(id, this.scales, 'scale');\n    }\n  }, {\n    key: \"removeControllers\",\n    value: function removeControllers() {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      this._each('unregister', args, this.controllers);\n    }\n  }, {\n    key: \"removeElements\",\n    value: function removeElements() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n      this._each('unregister', args, this.elements);\n    }\n  }, {\n    key: \"removePlugins\",\n    value: function removePlugins() {\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n      this._each('unregister', args, this.plugins);\n    }\n  }, {\n    key: \"removeScales\",\n    value: function removeScales() {\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n      this._each('unregister', args, this.scales);\n    }\n  }, {\n    key: \"_each\",\n    value: function _each(method, args, typedRegistry) {\n      var _this11 = this;\n      _toConsumableArray(args).forEach(function (arg) {\n        var reg = typedRegistry || _this11._getRegistryForType(arg);\n        if (typedRegistry || reg.isForType(arg) || reg === _this11.plugins && arg.id) {\n          _this11._exec(method, reg, arg);\n        } else {\n          each(arg, function (item) {\n            var itemReg = typedRegistry || _this11._getRegistryForType(item);\n            _this11._exec(method, itemReg, item);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_exec\",\n    value: function _exec(method, registry, component) {\n      var camelMethod = _capitalize(method);\n      callback(component['before' + camelMethod], [], component);\n      registry[method](component);\n      callback(component['after' + camelMethod], [], component);\n    }\n  }, {\n    key: \"_getRegistryForType\",\n    value: function _getRegistryForType(type) {\n      for (var i = 0; i < this._typedRegistries.length; i++) {\n        var reg = this._typedRegistries[i];\n        if (reg.isForType(type)) {\n          return reg;\n        }\n      }\n      return this.plugins;\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(id, typedRegistry, type) {\n      var item = typedRegistry.get(id);\n      if (item === undefined) {\n        throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n      }\n      return item;\n    }\n  }]);\n  return Registry;\n}();\nvar registry = /* #__PURE__ */new Registry();\nvar PluginService = /*#__PURE__*/function () {\n  function PluginService() {\n    _classCallCheck(this, PluginService);\n    this._init = [];\n  }\n  _createClass(PluginService, [{\n    key: \"notify\",\n    value: function notify(chart, hook, args, filter) {\n      if (hook === 'beforeInit') {\n        this._init = this._createDescriptors(chart, true);\n        this._notify(this._init, chart, 'install');\n      }\n      var descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n      var result = this._notify(descriptors, chart, hook, args);\n      if (hook === 'afterDestroy') {\n        this._notify(descriptors, chart, 'stop');\n        this._notify(this._init, chart, 'uninstall');\n      }\n      return result;\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify(descriptors, chart, hook, args) {\n      args = args || {};\n      var _iterator11 = _createForOfIteratorHelper(descriptors),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var descriptor = _step11.value;\n          var plugin = descriptor.plugin;\n          var method = plugin[hook];\n          var params = [chart, args, descriptor.options];\n          if (callback(method, params, plugin) === false && args.cancelable) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      return true;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      if (!isNullOrUndef(this._cache)) {\n        this._oldCache = this._cache;\n        this._cache = undefined;\n      }\n    }\n  }, {\n    key: \"_descriptors\",\n    value: function _descriptors(chart) {\n      if (this._cache) {\n        return this._cache;\n      }\n      var descriptors = this._cache = this._createDescriptors(chart);\n      this._notifyStateChanges(chart);\n      return descriptors;\n    }\n  }, {\n    key: \"_createDescriptors\",\n    value: function _createDescriptors(chart, all) {\n      var config = chart && chart.config;\n      var options = valueOrDefault(config.options && config.options.plugins, {});\n      var plugins = allPlugins(config);\n      return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n  }, {\n    key: \"_notifyStateChanges\",\n    value: function _notifyStateChanges(chart) {\n      var previousDescriptors = this._oldCache || [];\n      var descriptors = this._cache;\n      var diff = function diff(a, b) {\n        return a.filter(function (x) {\n          return !b.some(function (y) {\n            return x.plugin.id === y.plugin.id;\n          });\n        });\n      };\n      this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n      this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n  }]);\n  return PluginService;\n}();\nfunction allPlugins(config) {\n  var localIds = {};\n  var plugins = [];\n  var keys = Object.keys(registry.plugins.items);\n  for (var i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  var local = config.plugins || [];\n  for (var _i2 = 0; _i2 < local.length; _i2++) {\n    var plugin = local[_i2];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins: plugins,\n    localIds: localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, _ref2, options, all) {\n  var plugins = _ref2.plugins,\n    localIds = _ref2.localIds;\n  var result = [];\n  var context = chart.getContext();\n  var _iterator12 = _createForOfIteratorHelper(plugins),\n    _step12;\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var plugin = _step12.value;\n      var id = plugin.id;\n      var opts = getOpts(options[id], all);\n      if (opts === null) {\n        continue;\n      }\n      result.push({\n        plugin: plugin,\n        options: pluginOpts(chart.config, {\n          plugin: plugin,\n          local: localIds[id]\n        }, opts, context)\n      });\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n  return result;\n}\nfunction pluginOpts(config, _ref3, opts, context) {\n  var plugin = _ref3.plugin,\n    local = _ref3.local;\n  var keys = config.pluginScopeKeys(plugin);\n  var scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  var datasetDefaults = defaults.datasets[type] || {};\n  var datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  var axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (var _len11 = arguments.length, scaleOptions = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    scaleOptions[_key11 - 1] = arguments[_key11];\n  }\n  for (var _i3 = 0, _scaleOptions = scaleOptions; _i3 < _scaleOptions.length; _i3++) {\n    var opts = _scaleOptions[_i3];\n    var axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(\"Cannot determine type of '\".concat(id, \"' axis. Please provide 'axis' or 'position' option.\"));\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis: axis\n    };\n  }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    var boundDs = config.data.datasets.filter(function (d) {\n      return d.xAxisID === id || d.yAxisID === id;\n    });\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\nfunction mergeScaleConfig(config, options) {\n  var chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  var configScales = options.scales || {};\n  var chartIndexAxis = getIndexAxis(config.type, options);\n  var scales = Object.create(null);\n  Object.keys(configScales).forEach(function (id) {\n    var scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(\"Invalid scale configuration for scale: \".concat(id));\n    }\n    if (scaleConf._proxy) {\n      return console.warn(\"Ignoring resolver passed as options for scale: \".concat(id));\n    }\n    var axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    var defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    var defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis: axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(function (dataset) {\n    var type = dataset.type || config.type;\n    var indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    var datasetDefaults = overrides[type] || {};\n    var defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(function (defaultID) {\n      var axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      var id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis: axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(function (key) {\n    var scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  var options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nvar keyCache = new Map();\nvar keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  var keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nvar addIfFound = function addIfFound(set, obj, key) {\n  var opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nvar Config = /*#__PURE__*/function () {\n  function Config(config) {\n    _classCallCheck(this, Config);\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  _createClass(Config, [{\n    key: \"platform\",\n    get: function get() {\n      return this._config.platform;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._config.type;\n    },\n    set: function set(type) {\n      this._config.type = type;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._config.data;\n    },\n    set: function set(data) {\n      this._config.data = initData(data);\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._config.options;\n    },\n    set: function set(options) {\n      this._config.options = options;\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return this._config.plugins;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var config = this._config;\n      this.clearCache();\n      initOptions(config);\n    }\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this._scopeCache.clear();\n      this._resolverCache.clear();\n    }\n  }, {\n    key: \"datasetScopeKeys\",\n    value: function datasetScopeKeys(datasetType) {\n      return cachedKeys(datasetType, function () {\n        return [[\"datasets.\".concat(datasetType), '']];\n      });\n    }\n  }, {\n    key: \"datasetAnimationScopeKeys\",\n    value: function datasetAnimationScopeKeys(datasetType, transition) {\n      return cachedKeys(\"\".concat(datasetType, \".transition.\").concat(transition), function () {\n        return [[\"datasets.\".concat(datasetType, \".transitions.\").concat(transition), \"transitions.\".concat(transition)], [\"datasets.\".concat(datasetType), '']];\n      });\n    }\n  }, {\n    key: \"datasetElementScopeKeys\",\n    value: function datasetElementScopeKeys(datasetType, elementType) {\n      return cachedKeys(\"\".concat(datasetType, \"-\").concat(elementType), function () {\n        return [[\"datasets.\".concat(datasetType, \".elements.\").concat(elementType), \"datasets.\".concat(datasetType), \"elements.\".concat(elementType), '']];\n      });\n    }\n  }, {\n    key: \"pluginScopeKeys\",\n    value: function pluginScopeKeys(plugin) {\n      var id = plugin.id;\n      var type = this.type;\n      return cachedKeys(\"\".concat(type, \"-plugin-\").concat(id), function () {\n        return [[\"plugins.\".concat(id)].concat(_toConsumableArray(plugin.additionalOptionScopes || []))];\n      });\n    }\n  }, {\n    key: \"_cachedScopes\",\n    value: function _cachedScopes(mainScope, resetCache) {\n      var _scopeCache = this._scopeCache;\n      var cache = _scopeCache.get(mainScope);\n      if (!cache || resetCache) {\n        cache = new Map();\n        _scopeCache.set(mainScope, cache);\n      }\n      return cache;\n    }\n  }, {\n    key: \"getOptionScopes\",\n    value: function getOptionScopes(mainScope, keyLists, resetCache) {\n      var options = this.options,\n        type = this.type;\n      var cache = this._cachedScopes(mainScope, resetCache);\n      var cached = cache.get(keyLists);\n      if (cached) {\n        return cached;\n      }\n      var scopes = new Set();\n      keyLists.forEach(function (keys) {\n        if (mainScope) {\n          scopes.add(mainScope);\n          keys.forEach(function (key) {\n            return addIfFound(scopes, mainScope, key);\n          });\n        }\n        keys.forEach(function (key) {\n          return addIfFound(scopes, options, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, overrides[type] || {}, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, defaults, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, descriptors, key);\n        });\n      });\n      var array = Array.from(scopes);\n      if (array.length === 0) {\n        array.push(Object.create(null));\n      }\n      if (keysCached.has(keyLists)) {\n        cache.set(keyLists, array);\n      }\n      return array;\n    }\n  }, {\n    key: \"chartOptionScopes\",\n    value: function chartOptionScopes() {\n      var options = this.options,\n        type = this.type;\n      return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n        type: type\n      }, defaults, descriptors];\n    }\n  }, {\n    key: \"resolveNamedOptions\",\n    value: function resolveNamedOptions(scopes, names, context) {\n      var prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n      var result = {\n        $shared: true\n      };\n      var _getResolver = getResolver(this._resolverCache, scopes, prefixes),\n        resolver = _getResolver.resolver,\n        subPrefixes = _getResolver.subPrefixes;\n      var options = resolver;\n      if (needContext(resolver, names)) {\n        result.$shared = false;\n        context = isFunction(context) ? context() : context;\n        var subResolver = this.createResolver(scopes, context, subPrefixes);\n        options = _attachContext(resolver, context, subResolver);\n      }\n      var _iterator13 = _createForOfIteratorHelper(names),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var prop = _step13.value;\n          result[prop] = options[prop];\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      return result;\n    }\n  }, {\n    key: \"createResolver\",\n    value: function createResolver(scopes, context) {\n      var prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n      var descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n      var _getResolver2 = getResolver(this._resolverCache, scopes, prefixes),\n        resolver = _getResolver2.resolver;\n      return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n  }]);\n  return Config;\n}();\nfunction getResolver(resolverCache, scopes, prefixes) {\n  var cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  var cacheKey = prefixes.join();\n  var cached = cache.get(cacheKey);\n  if (!cached) {\n    var resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver: resolver,\n      subPrefixes: prefixes.filter(function (p) {\n        return !p.toLowerCase().includes('hover');\n      })\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nvar hasFunction = function hasFunction(value) {\n  return isObject(value) && Object.getOwnPropertyNames(value).some(function (key) {\n    return isFunction(value[key]);\n  });\n};\nfunction needContext(proxy, names) {\n  var _descriptors2 = _descriptors(proxy),\n    isScriptable = _descriptors2.isScriptable,\n    isIndexable = _descriptors2.isIndexable;\n  var _iterator14 = _createForOfIteratorHelper(names),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var prop = _step14.value;\n      var scriptable = isScriptable(prop);\n      var indexable = isIndexable(prop);\n      var value = (indexable || scriptable) && proxy[prop];\n      if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n  return false;\n}\nvar version = \"4.4.6\";\nvar KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  var chart = context.chart;\n  var animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  var chart = context.chart;\n  var animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nvar instances = {};\nvar getChart = function getChart(key) {\n  var canvas = getCanvas(key);\n  return Object.values(instances).filter(function (c) {\n    return c.canvas === canvas;\n  }).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  var keys = Object.keys(obj);\n  for (var _i4 = 0, _keys = keys; _i4 < _keys.length; _i4++) {\n    var key = _keys[_i4];\n    var intKey = +key;\n    if (intKey >= start) {\n      var value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n  var xScale = meta.xScale,\n    yScale = meta.yScale;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\nvar Chart = /*#__PURE__*/function () {\n  function Chart(item, userConfig) {\n    var _this12 = this;\n    _classCallCheck(this, Chart);\n    var config = this.config = new Config(userConfig);\n    var initialCanvas = getCanvas(item);\n    var existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    var options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    var context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    var canvas = context && context.canvas;\n    var height = canvas && canvas.height;\n    var width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(function (mode) {\n      return _this12.update(mode);\n    }, options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  _createClass(Chart, [{\n    key: \"aspectRatio\",\n    get: function get() {\n      var _this$options12 = this.options,\n        aspectRatio = _this$options12.aspectRatio,\n        maintainAspectRatio = _this$options12.maintainAspectRatio,\n        width = this.width,\n        height = this.height,\n        _aspectRatio = this._aspectRatio;\n      if (!isNullOrUndef(aspectRatio)) {\n        return aspectRatio;\n      }\n      if (maintainAspectRatio && _aspectRatio) {\n        return _aspectRatio;\n      }\n      return height ? width / height : null;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this.config.data;\n    },\n    set: function set(data) {\n      this.config.data = data;\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._options;\n    },\n    set: function set(options) {\n      this.config.options = options;\n    }\n  }, {\n    key: \"registry\",\n    get: function get() {\n      return registry;\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      this.notifyPlugins('beforeInit');\n      if (this.options.responsive) {\n        this.resize();\n      } else {\n        retinaScale(this, this.options.devicePixelRatio);\n      }\n      this.bindEvents();\n      this.notifyPlugins('afterInit');\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      clearCanvas(this.canvas, this.ctx);\n      return this;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      animator.stop(this);\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      if (!animator.running(this)) {\n        this._resize(width, height);\n      } else {\n        this._resizeBeforeDraw = {\n          width: width,\n          height: height\n        };\n      }\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(width, height) {\n      var options = this.options;\n      var canvas = this.canvas;\n      var aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n      var newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n      var newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n      var mode = this.width ? 'resize' : 'attach';\n      this.width = newSize.width;\n      this.height = newSize.height;\n      this._aspectRatio = this.aspectRatio;\n      if (!retinaScale(this, newRatio, true)) {\n        return;\n      }\n      this.notifyPlugins('resize', {\n        size: newSize\n      });\n      callback(options.onResize, [this, newSize], this);\n      if (this.attached) {\n        if (this._doResize(mode)) {\n          this.render();\n        }\n      }\n    }\n  }, {\n    key: \"ensureScalesHaveIDs\",\n    value: function ensureScalesHaveIDs() {\n      var options = this.options;\n      var scalesOptions = options.scales || {};\n      each(scalesOptions, function (axisOptions, axisID) {\n        axisOptions.id = axisID;\n      });\n    }\n  }, {\n    key: \"buildOrUpdateScales\",\n    value: function buildOrUpdateScales() {\n      var _this13 = this;\n      var options = this.options;\n      var scaleOpts = options.scales;\n      var scales = this.scales;\n      var updated = Object.keys(scales).reduce(function (obj, id) {\n        obj[id] = false;\n        return obj;\n      }, {});\n      var items = [];\n      if (scaleOpts) {\n        items = items.concat(Object.keys(scaleOpts).map(function (id) {\n          var scaleOptions = scaleOpts[id];\n          var axis = determineAxis(id, scaleOptions);\n          var isRadial = axis === 'r';\n          var isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        }));\n      }\n      each(items, function (item) {\n        var scaleOptions = item.options;\n        var id = scaleOptions.id;\n        var axis = determineAxis(id, scaleOptions);\n        var scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n        if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n          scaleOptions.position = item.dposition;\n        }\n        updated[id] = true;\n        var scale = null;\n        if (id in scales && scales[id].type === scaleType) {\n          scale = scales[id];\n        } else {\n          var scaleClass = registry.getScale(scaleType);\n          scale = new scaleClass({\n            id: id,\n            type: scaleType,\n            ctx: _this13.ctx,\n            chart: _this13\n          });\n          scales[scale.id] = scale;\n        }\n        scale.init(scaleOptions, options);\n      });\n      each(updated, function (hasUpdated, id) {\n        if (!hasUpdated) {\n          delete scales[id];\n        }\n      });\n      each(scales, function (scale) {\n        layouts.configure(_this13, scale, scale.options);\n        layouts.addBox(_this13, scale);\n      });\n    }\n  }, {\n    key: \"_updateMetasets\",\n    value: function _updateMetasets() {\n      var metasets = this._metasets;\n      var numData = this.data.datasets.length;\n      var numMeta = metasets.length;\n      metasets.sort(function (a, b) {\n        return a.index - b.index;\n      });\n      if (numMeta > numData) {\n        for (var i = numData; i < numMeta; ++i) {\n          this._destroyDatasetMeta(i);\n        }\n        metasets.splice(numData, numMeta - numData);\n      }\n      this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n  }, {\n    key: \"_removeUnreferencedMetasets\",\n    value: function _removeUnreferencedMetasets() {\n      var _this14 = this;\n      var metasets = this._metasets,\n        datasets = this.data.datasets;\n      if (metasets.length > datasets.length) {\n        delete this._stacks;\n      }\n      metasets.forEach(function (meta, index) {\n        if (datasets.filter(function (x) {\n          return x === meta._dataset;\n        }).length === 0) {\n          _this14._destroyDatasetMeta(index);\n        }\n      });\n    }\n  }, {\n    key: \"buildOrUpdateControllers\",\n    value: function buildOrUpdateControllers() {\n      var newControllers = [];\n      var datasets = this.data.datasets;\n      var i, ilen;\n      this._removeUnreferencedMetasets();\n      for (i = 0, ilen = datasets.length; i < ilen; i++) {\n        var dataset = datasets[i];\n        var meta = this.getDatasetMeta(i);\n        var type = dataset.type || this.config.type;\n        if (meta.type && meta.type !== type) {\n          this._destroyDatasetMeta(i);\n          meta = this.getDatasetMeta(i);\n        }\n        meta.type = type;\n        meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n        meta.order = dataset.order || 0;\n        meta.index = i;\n        meta.label = '' + dataset.label;\n        meta.visible = this.isDatasetVisible(i);\n        if (meta.controller) {\n          meta.controller.updateIndex(i);\n          meta.controller.linkScales();\n        } else {\n          var ControllerClass = registry.getController(type);\n          var _defaults$datasets$ty = defaults.datasets[type],\n            datasetElementType = _defaults$datasets$ty.datasetElementType,\n            dataElementType = _defaults$datasets$ty.dataElementType;\n          Object.assign(ControllerClass, {\n            dataElementType: registry.getElement(dataElementType),\n            datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n          });\n          meta.controller = new ControllerClass(this, i);\n          newControllers.push(meta.controller);\n        }\n      }\n      this._updateMetasets();\n      return newControllers;\n    }\n  }, {\n    key: \"_resetElements\",\n    value: function _resetElements() {\n      var _this15 = this;\n      each(this.data.datasets, function (dataset, datasetIndex) {\n        _this15.getDatasetMeta(datasetIndex).controller.reset();\n      }, this);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._resetElements();\n      this.notifyPlugins('reset');\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var config = this.config;\n      config.update();\n      var options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n      var animsDisabled = this._animationsDisabled = !options.animation;\n      this._updateScales();\n      this._checkEventBindings();\n      this._updateHiddenIndices();\n      this._plugins.invalidate();\n      if (this.notifyPlugins('beforeUpdate', {\n        mode: mode,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      var newControllers = this.buildOrUpdateControllers();\n      this.notifyPlugins('beforeElementsUpdate');\n      var minPadding = 0;\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n        var _this$getDatasetMeta = this.getDatasetMeta(i),\n          controller = _this$getDatasetMeta.controller;\n        var reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n        controller.buildOrUpdateElements(reset);\n        minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n      }\n      minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n      this._updateLayout(minPadding);\n      if (!animsDisabled) {\n        each(newControllers, function (controller) {\n          controller.reset();\n        });\n      }\n      this._updateDatasets(mode);\n      this.notifyPlugins('afterUpdate', {\n        mode: mode\n      });\n      this._layers.sort(compare2Level('z', '_idx'));\n      var _active = this._active,\n        _lastEvent = this._lastEvent;\n      if (_lastEvent) {\n        this._eventHandler(_lastEvent, true);\n      } else if (_active.length) {\n        this._updateHoverStyles(_active, _active, true);\n      }\n      this.render();\n    }\n  }, {\n    key: \"_updateScales\",\n    value: function _updateScales() {\n      var _this16 = this;\n      each(this.scales, function (scale) {\n        layouts.removeBox(_this16, scale);\n      });\n      this.ensureScalesHaveIDs();\n      this.buildOrUpdateScales();\n    }\n  }, {\n    key: \"_checkEventBindings\",\n    value: function _checkEventBindings() {\n      var options = this.options;\n      var existingEvents = new Set(Object.keys(this._listeners));\n      var newEvents = new Set(options.events);\n      if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n        this.unbindEvents();\n        this.bindEvents();\n      }\n    }\n  }, {\n    key: \"_updateHiddenIndices\",\n    value: function _updateHiddenIndices() {\n      var _hiddenIndices = this._hiddenIndices;\n      var changes = this._getUniformDataChanges() || [];\n      var _iterator15 = _createForOfIteratorHelper(changes),\n        _step15;\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var _step15$value = _step15.value,\n            method = _step15$value.method,\n            start = _step15$value.start,\n            count = _step15$value.count;\n          var move = method === '_removeElements' ? -count : count;\n          moveNumericKeys(_hiddenIndices, start, move);\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n    }\n  }, {\n    key: \"_getUniformDataChanges\",\n    value: function _getUniformDataChanges() {\n      var _dataChanges = this._dataChanges;\n      if (!_dataChanges || !_dataChanges.length) {\n        return;\n      }\n      this._dataChanges = [];\n      var datasetCount = this.data.datasets.length;\n      var makeSet = function makeSet(idx) {\n        return new Set(_dataChanges.filter(function (c) {\n          return c[0] === idx;\n        }).map(function (c, i) {\n          return i + ',' + c.splice(1).join(',');\n        }));\n      };\n      var changeSet = makeSet(0);\n      for (var i = 1; i < datasetCount; i++) {\n        if (!setsEqual(changeSet, makeSet(i))) {\n          return;\n        }\n      }\n      return Array.from(changeSet).map(function (c) {\n        return c.split(',');\n      }).map(function (a) {\n        return {\n          method: a[1],\n          start: +a[2],\n          count: +a[3]\n        };\n      });\n    }\n  }, {\n    key: \"_updateLayout\",\n    value: function _updateLayout(minPadding) {\n      var _this17 = this;\n      if (this.notifyPlugins('beforeLayout', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      layouts.update(this, this.width, this.height, minPadding);\n      var area = this.chartArea;\n      var noArea = area.width <= 0 || area.height <= 0;\n      this._layers = [];\n      each(this.boxes, function (box) {\n        var _this17$_layers;\n        if (noArea && box.position === 'chartArea') {\n          return;\n        }\n        if (box.configure) {\n          box.configure();\n        }\n        (_this17$_layers = _this17._layers).push.apply(_this17$_layers, _toConsumableArray(box._layers()));\n      }, this);\n      this._layers.forEach(function (item, index) {\n        item._idx = index;\n      });\n      this.notifyPlugins('afterLayout');\n    }\n  }, {\n    key: \"_updateDatasets\",\n    value: function _updateDatasets(mode) {\n      if (this.notifyPlugins('beforeDatasetsUpdate', {\n        mode: mode,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        this.getDatasetMeta(i).controller.configure();\n      }\n      for (var _i5 = 0, _ilen = this.data.datasets.length; _i5 < _ilen; ++_i5) {\n        this._updateDataset(_i5, isFunction(mode) ? mode({\n          datasetIndex: _i5\n        }) : mode);\n      }\n      this.notifyPlugins('afterDatasetsUpdate', {\n        mode: mode\n      });\n    }\n  }, {\n    key: \"_updateDataset\",\n    value: function _updateDataset(index, mode) {\n      var meta = this.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index,\n        mode: mode,\n        cancelable: true\n      };\n      if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n        return;\n      }\n      meta.controller._update(mode);\n      args.cancelable = false;\n      this.notifyPlugins('afterDatasetUpdate', args);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.notifyPlugins('beforeRender', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      if (animator.has(this)) {\n        if (this.attached && !animator.running(this)) {\n          animator.start(this);\n        }\n      } else {\n        this.draw();\n        onAnimationsComplete({\n          chart: this\n        });\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var i;\n      if (this._resizeBeforeDraw) {\n        var _this$_resizeBeforeDr = this._resizeBeforeDraw,\n          width = _this$_resizeBeforeDr.width,\n          height = _this$_resizeBeforeDr.height;\n        this._resizeBeforeDraw = null;\n        this._resize(width, height);\n      }\n      this.clear();\n      if (this.width <= 0 || this.height <= 0) {\n        return;\n      }\n      if (this.notifyPlugins('beforeDraw', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      var layers = this._layers;\n      for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n        layers[i].draw(this.chartArea);\n      }\n      this._drawDatasets();\n      for (; i < layers.length; ++i) {\n        layers[i].draw(this.chartArea);\n      }\n      this.notifyPlugins('afterDraw');\n    }\n  }, {\n    key: \"_getSortedDatasetMetas\",\n    value: function _getSortedDatasetMetas(filterVisible) {\n      var metasets = this._sortedMetasets;\n      var result = [];\n      var i, ilen;\n      for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n        var meta = metasets[i];\n        if (!filterVisible || meta.visible) {\n          result.push(meta);\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"getSortedVisibleDatasetMetas\",\n    value: function getSortedVisibleDatasetMetas() {\n      return this._getSortedDatasetMetas(true);\n    }\n  }, {\n    key: \"_drawDatasets\",\n    value: function _drawDatasets() {\n      if (this.notifyPlugins('beforeDatasetsDraw', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      var metasets = this.getSortedVisibleDatasetMetas();\n      for (var i = metasets.length - 1; i >= 0; --i) {\n        this._drawDataset(metasets[i]);\n      }\n      this.notifyPlugins('afterDatasetsDraw');\n    }\n  }, {\n    key: \"_drawDataset\",\n    value: function _drawDataset(meta) {\n      var ctx = this.ctx;\n      var clip = meta._clip;\n      var useClip = !clip.disabled;\n      var area = getDatasetArea(meta, this.chartArea);\n      var args = {\n        meta: meta,\n        index: meta.index,\n        cancelable: true\n      };\n      if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n        return;\n      }\n      if (useClip) {\n        clipArea(ctx, {\n          left: clip.left === false ? 0 : area.left - clip.left,\n          right: clip.right === false ? this.width : area.right + clip.right,\n          top: clip.top === false ? 0 : area.top - clip.top,\n          bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n        });\n      }\n      meta.controller.draw();\n      if (useClip) {\n        unclipArea(ctx);\n      }\n      args.cancelable = false;\n      this.notifyPlugins('afterDatasetDraw', args);\n    }\n  }, {\n    key: \"isPointInArea\",\n    value: function isPointInArea(point) {\n      return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n  }, {\n    key: \"getElementsAtEventForMode\",\n    value: function getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n      var method = Interaction.modes[mode];\n      if (typeof method === 'function') {\n        return method(this, e, options, useFinalPosition);\n      }\n      return [];\n    }\n  }, {\n    key: \"getDatasetMeta\",\n    value: function getDatasetMeta(datasetIndex) {\n      var dataset = this.data.datasets[datasetIndex];\n      var metasets = this._metasets;\n      var meta = metasets.filter(function (x) {\n        return x && x._dataset === dataset;\n      }).pop();\n      if (!meta) {\n        meta = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          xAxisID: null,\n          yAxisID: null,\n          order: dataset && dataset.order || 0,\n          index: datasetIndex,\n          _dataset: dataset,\n          _parsed: [],\n          _sorted: false\n        };\n        metasets.push(meta);\n      }\n      return meta;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.$context || (this.$context = createContext(null, {\n        chart: this,\n        type: 'chart'\n      }));\n    }\n  }, {\n    key: \"getVisibleDatasetCount\",\n    value: function getVisibleDatasetCount() {\n      return this.getSortedVisibleDatasetMetas().length;\n    }\n  }, {\n    key: \"isDatasetVisible\",\n    value: function isDatasetVisible(datasetIndex) {\n      var dataset = this.data.datasets[datasetIndex];\n      if (!dataset) {\n        return false;\n      }\n      var meta = this.getDatasetMeta(datasetIndex);\n      return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n  }, {\n    key: \"setDatasetVisibility\",\n    value: function setDatasetVisibility(datasetIndex, visible) {\n      var meta = this.getDatasetMeta(datasetIndex);\n      meta.hidden = !visible;\n    }\n  }, {\n    key: \"toggleDataVisibility\",\n    value: function toggleDataVisibility(index) {\n      this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n  }, {\n    key: \"getDataVisibility\",\n    value: function getDataVisibility(index) {\n      return !this._hiddenIndices[index];\n    }\n  }, {\n    key: \"_updateVisibility\",\n    value: function _updateVisibility(datasetIndex, dataIndex, visible) {\n      var mode = visible ? 'show' : 'hide';\n      var meta = this.getDatasetMeta(datasetIndex);\n      var anims = meta.controller._resolveAnimations(undefined, mode);\n      if (defined(dataIndex)) {\n        meta.data[dataIndex].hidden = !visible;\n        this.update();\n      } else {\n        this.setDatasetVisibility(datasetIndex, visible);\n        anims.update(meta, {\n          visible: visible\n        });\n        this.update(function (ctx) {\n          return ctx.datasetIndex === datasetIndex ? mode : undefined;\n        });\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide(datasetIndex, dataIndex) {\n      this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n  }, {\n    key: \"show\",\n    value: function show(datasetIndex, dataIndex) {\n      this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n  }, {\n    key: \"_destroyDatasetMeta\",\n    value: function _destroyDatasetMeta(datasetIndex) {\n      var meta = this._metasets[datasetIndex];\n      if (meta && meta.controller) {\n        meta.controller._destroy();\n      }\n      delete this._metasets[datasetIndex];\n    }\n  }, {\n    key: \"_stop\",\n    value: function _stop() {\n      var i, ilen;\n      this.stop();\n      animator.remove(this);\n      for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.notifyPlugins('beforeDestroy');\n      var canvas = this.canvas,\n        ctx = this.ctx;\n      this._stop();\n      this.config.clearCache();\n      if (canvas) {\n        this.unbindEvents();\n        clearCanvas(canvas, ctx);\n        this.platform.releaseContext(ctx);\n        this.canvas = null;\n        this.ctx = null;\n      }\n      delete instances[this.id];\n      this.notifyPlugins('afterDestroy');\n    }\n  }, {\n    key: \"toBase64Image\",\n    value: function toBase64Image() {\n      var _this$canvas;\n      return (_this$canvas = this.canvas).toDataURL.apply(_this$canvas, arguments);\n    }\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      this.bindUserEvents();\n      if (this.options.responsive) {\n        this.bindResponsiveEvents();\n      } else {\n        this.attached = true;\n      }\n    }\n  }, {\n    key: \"bindUserEvents\",\n    value: function bindUserEvents() {\n      var _this18 = this;\n      var listeners = this._listeners;\n      var platform = this.platform;\n      var _add = function _add(type, listener) {\n        platform.addEventListener(_this18, type, listener);\n        listeners[type] = listener;\n      };\n      var listener = function listener(e, x, y) {\n        e.offsetX = x;\n        e.offsetY = y;\n        _this18._eventHandler(e);\n      };\n      each(this.options.events, function (type) {\n        return _add(type, listener);\n      });\n    }\n  }, {\n    key: \"bindResponsiveEvents\",\n    value: function bindResponsiveEvents() {\n      var _this19 = this;\n      if (!this._responsiveListeners) {\n        this._responsiveListeners = {};\n      }\n      var listeners = this._responsiveListeners;\n      var platform = this.platform;\n      var _add = function _add(type, listener) {\n        platform.addEventListener(_this19, type, listener);\n        listeners[type] = listener;\n      };\n      var _remove = function _remove(type, listener) {\n        if (listeners[type]) {\n          platform.removeEventListener(_this19, type, listener);\n          delete listeners[type];\n        }\n      };\n      var listener = function listener(width, height) {\n        if (_this19.canvas) {\n          _this19.resize(width, height);\n        }\n      };\n      var detached;\n      var attached = function attached() {\n        _remove('attach', attached);\n        _this19.attached = true;\n        _this19.resize();\n        _add('resize', listener);\n        _add('detach', detached);\n      };\n      detached = function detached() {\n        _this19.attached = false;\n        _remove('resize', listener);\n        _this19._stop();\n        _this19._resize(0, 0);\n        _add('attach', attached);\n      };\n      if (platform.isAttached(this.canvas)) {\n        attached();\n      } else {\n        detached();\n      }\n    }\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      var _this20 = this;\n      each(this._listeners, function (listener, type) {\n        _this20.platform.removeEventListener(_this20, type, listener);\n      });\n      this._listeners = {};\n      each(this._responsiveListeners, function (listener, type) {\n        _this20.platform.removeEventListener(_this20, type, listener);\n      });\n      this._responsiveListeners = undefined;\n    }\n  }, {\n    key: \"updateHoverStyle\",\n    value: function updateHoverStyle(items, mode, enabled) {\n      var prefix = enabled ? 'set' : 'remove';\n      var meta, item, i, ilen;\n      if (mode === 'dataset') {\n        meta = this.getDatasetMeta(items[0].datasetIndex);\n        meta.controller['_' + prefix + 'DatasetHoverStyle']();\n      }\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        item = items[i];\n        var controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n        if (controller) {\n          controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n        }\n      }\n    }\n  }, {\n    key: \"getActiveElements\",\n    value: function getActiveElements() {\n      return this._active || [];\n    }\n  }, {\n    key: \"setActiveElements\",\n    value: function setActiveElements(activeElements) {\n      var _this21 = this;\n      var lastActive = this._active || [];\n      var active = activeElements.map(function (_ref4) {\n        var datasetIndex = _ref4.datasetIndex,\n          index = _ref4.index;\n        var meta = _this21.getDatasetMeta(datasetIndex);\n        if (!meta) {\n          throw new Error('No dataset found at index ' + datasetIndex);\n        }\n        return {\n          datasetIndex: datasetIndex,\n          element: meta.data[index],\n          index: index\n        };\n      });\n      var changed = !_elementsEqual(active, lastActive);\n      if (changed) {\n        this._active = active;\n        this._lastEvent = null;\n        this._updateHoverStyles(active, lastActive);\n      }\n    }\n  }, {\n    key: \"notifyPlugins\",\n    value: function notifyPlugins(hook, args, filter) {\n      return this._plugins.notify(this, hook, args, filter);\n    }\n  }, {\n    key: \"isPluginEnabled\",\n    value: function isPluginEnabled(pluginId) {\n      return this._plugins._cache.filter(function (p) {\n        return p.plugin.id === pluginId;\n      }).length === 1;\n    }\n  }, {\n    key: \"_updateHoverStyles\",\n    value: function _updateHoverStyles(active, lastActive, replay) {\n      var hoverOptions = this.options.hover;\n      var diff = function diff(a, b) {\n        return a.filter(function (x) {\n          return !b.some(function (y) {\n            return x.datasetIndex === y.datasetIndex && x.index === y.index;\n          });\n        });\n      };\n      var deactivated = diff(lastActive, active);\n      var activated = replay ? active : diff(active, lastActive);\n      if (deactivated.length) {\n        this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n      }\n      if (activated.length && hoverOptions.mode) {\n        this.updateHoverStyle(activated, hoverOptions.mode, true);\n      }\n    }\n  }, {\n    key: \"_eventHandler\",\n    value: function _eventHandler(e, replay) {\n      var _this22 = this;\n      var args = {\n        event: e,\n        replay: replay,\n        cancelable: true,\n        inChartArea: this.isPointInArea(e)\n      };\n      var eventFilter = function eventFilter(plugin) {\n        return (plugin.options.events || _this22.options.events).includes(e.native.type);\n      };\n      if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n        return;\n      }\n      var changed = this._handleEvent(e, replay, args.inChartArea);\n      args.cancelable = false;\n      this.notifyPlugins('afterEvent', args, eventFilter);\n      if (changed || args.changed) {\n        this.render();\n      }\n      return this;\n    }\n  }, {\n    key: \"_handleEvent\",\n    value: function _handleEvent(e, replay, inChartArea) {\n      var _this$_active = this._active,\n        lastActive = _this$_active === void 0 ? [] : _this$_active,\n        options = this.options;\n      var useFinalPosition = replay;\n      var active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n      var isClick = _isClickEvent(e);\n      var lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n      if (inChartArea) {\n        this._lastEvent = null;\n        callback(options.onHover, [e, active, this], this);\n        if (isClick) {\n          callback(options.onClick, [e, active, this], this);\n        }\n      }\n      var changed = !_elementsEqual(active, lastActive);\n      if (changed || replay) {\n        this._active = active;\n        this._updateHoverStyles(active, lastActive, replay);\n      }\n      this._lastEvent = lastEvent;\n      return changed;\n    }\n  }, {\n    key: \"_getActiveElements\",\n    value: function _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n      if (e.type === 'mouseout') {\n        return [];\n      }\n      if (!inChartArea) {\n        return lastActive;\n      }\n      var hoverOptions = this.options.hover;\n      return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n  }], [{\n    key: \"register\",\n    value: function register() {\n      registry.add.apply(registry, arguments);\n      invalidatePlugins();\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      registry.remove.apply(registry, arguments);\n      invalidatePlugins();\n    }\n  }]);\n  return Chart;\n}();\n_defineProperty(Chart, \"defaults\", defaults);\n_defineProperty(Chart, \"instances\", instances);\n_defineProperty(Chart, \"overrides\", overrides);\n_defineProperty(Chart, \"registry\", registry);\n_defineProperty(Chart, \"version\", version);\n_defineProperty(Chart, \"getChart\", getChart);\nfunction invalidatePlugins() {\n  return each(Chart.instances, function (chart) {\n    return chart._plugins.invalidate();\n  });\n}\nfunction clipArc(ctx, element, endAngle) {\n  var startAngle = element.startAngle,\n    pixelMargin = element.pixelMargin,\n    x = element.x,\n    y = element.y,\n    outerRadius = element.outerRadius,\n    innerRadius = element.innerRadius;\n  var angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  var o = toRadiusCorners(arc.options.borderRadius);\n  var halfThickness = (outerRadius - innerRadius) / 2;\n  var innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  var computeOuterLimit = function computeOuterLimit(val) {\n    var outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  var x = element.x,\n    y = element.y,\n    start = element.startAngle,\n    pixelMargin = element.pixelMargin,\n    innerR = element.innerRadius;\n  var outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  var innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  var spacingOffset = 0;\n  var alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    var noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    var noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    var avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    var adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  var beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  var angleOffset = (alpha - beta) / 2;\n  var startAngle = start + angleOffset + spacingOffset;\n  var endAngle = end - angleOffset - spacingOffset;\n  var _parseBorderRadius$ = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle),\n    outerStart = _parseBorderRadius$.outerStart,\n    outerEnd = _parseBorderRadius$.outerEnd,\n    innerStart = _parseBorderRadius$.innerStart,\n    innerEnd = _parseBorderRadius$.innerEnd;\n  var outerStartAdjustedRadius = outerRadius - outerStart;\n  var outerEndAdjustedRadius = outerRadius - outerEnd;\n  var outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  var outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  var innerStartAdjustedRadius = innerRadius + innerStart;\n  var innerEndAdjustedRadius = innerRadius + innerEnd;\n  var innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  var innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    var outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      var pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    var p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      var _pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(_pCenter.x, _pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    var innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      var _pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(_pCenter2.x, _pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    var p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      var _pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(_pCenter3.x, _pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    var outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    var outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    var outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    var outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  var fullCircles = element.fullCircles,\n    startAngle = element.startAngle,\n    circumference = element.circumference;\n  var endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (var i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  var fullCircles = element.fullCircles,\n    startAngle = element.startAngle,\n    circumference = element.circumference,\n    options = element.options;\n  var borderWidth = options.borderWidth,\n    borderJoinStyle = options.borderJoinStyle,\n    borderDash = options.borderDash,\n    borderDashOffset = options.borderDashOffset;\n  var inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  var endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (var i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nvar ArcElement = /*#__PURE__*/function (_Element2) {\n  _inherits(ArcElement, _Element2);\n  var _super12 = _createSuper(ArcElement);\n  function ArcElement(cfg) {\n    var _this23;\n    _classCallCheck(this, ArcElement);\n    _this23 = _super12.call(this);\n    _defineProperty(_assertThisInitialized(_this23), \"circumference\", void 0);\n    _defineProperty(_assertThisInitialized(_this23), \"endAngle\", void 0);\n    _defineProperty(_assertThisInitialized(_this23), \"fullCircles\", void 0);\n    _defineProperty(_assertThisInitialized(_this23), \"innerRadius\", void 0);\n    _defineProperty(_assertThisInitialized(_this23), \"outerRadius\", void 0);\n    _defineProperty(_assertThisInitialized(_this23), \"pixelMargin\", void 0);\n    _defineProperty(_assertThisInitialized(_this23), \"startAngle\", void 0);\n    _this23.options = undefined;\n    _this23.circumference = undefined;\n    _this23.startAngle = undefined;\n    _this23.endAngle = undefined;\n    _this23.innerRadius = undefined;\n    _this23.outerRadius = undefined;\n    _this23.pixelMargin = 0;\n    _this23.fullCircles = 0;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this23), cfg);\n    }\n    return _this23;\n  }\n  _createClass(ArcElement, [{\n    key: \"inRange\",\n    value: function inRange(chartX, chartY, useFinalPosition) {\n      var point = this.getProps(['x', 'y'], useFinalPosition);\n      var _getAngleFromPoint2 = getAngleFromPoint(point, {\n          x: chartX,\n          y: chartY\n        }),\n        angle = _getAngleFromPoint2.angle,\n        distance = _getAngleFromPoint2.distance;\n      var _this$getProps2 = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition),\n        startAngle = _this$getProps2.startAngle,\n        endAngle = _this$getProps2.endAngle,\n        innerRadius = _this$getProps2.innerRadius,\n        outerRadius = _this$getProps2.outerRadius,\n        circumference = _this$getProps2.circumference;\n      var rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n      var _circumference = valueOrDefault(circumference, endAngle - startAngle);\n      var nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n      var betweenAngles = _circumference >= TAU || nonZeroBetween;\n      var withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n      return betweenAngles && withinRadius;\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps3 = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition),\n        x = _this$getProps3.x,\n        y = _this$getProps3.y,\n        startAngle = _this$getProps3.startAngle,\n        endAngle = _this$getProps3.endAngle,\n        innerRadius = _this$getProps3.innerRadius,\n        outerRadius = _this$getProps3.outerRadius;\n      var _this$options13 = this.options,\n        offset = _this$options13.offset,\n        spacing = _this$options13.spacing;\n      var halfAngle = (startAngle + endAngle) / 2;\n      var halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n      return {\n        x: x + Math.cos(halfAngle) * halfRadius,\n        y: y + Math.sin(halfAngle) * halfRadius\n      };\n    }\n  }, {\n    key: \"tooltipPosition\",\n    value: function tooltipPosition(useFinalPosition) {\n      return this.getCenterPoint(useFinalPosition);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var options = this.options,\n        circumference = this.circumference;\n      var offset = (options.offset || 0) / 4;\n      var spacing = (options.spacing || 0) / 2;\n      var circular = options.circular;\n      this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n      this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n      if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n        return;\n      }\n      ctx.save();\n      var halfAngle = (this.startAngle + this.endAngle) / 2;\n      ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n      var fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n      var radiusOffset = offset * fix;\n      ctx.fillStyle = options.backgroundColor;\n      ctx.strokeStyle = options.borderColor;\n      drawArc(ctx, this, radiusOffset, spacing, circular);\n      drawBorder(ctx, this, radiusOffset, spacing, circular);\n      ctx.restore();\n    }\n  }]);\n  return ArcElement;\n}(Element);\n_defineProperty(ArcElement, \"id\", 'arc');\n_defineProperty(ArcElement, \"defaults\", {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true\n});\n_defineProperty(ArcElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor'\n});\n_defineProperty(ArcElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: function _indexable(name) {\n    return name !== 'borderDash';\n  }\n});\nfunction setStyle(ctx, options) {\n  var style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var count = points.length;\n  var _params$start = params.start,\n    paramsStart = _params$start === void 0 ? 0 : _params$start,\n    _params$end = params.end,\n    paramsEnd = _params$end === void 0 ? count - 1 : _params$end;\n  var segmentStart = segment.start,\n    segmentEnd = segment.end;\n  var start = Math.max(paramsStart, segmentStart);\n  var end = Math.min(paramsEnd, segmentEnd);\n  var outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count: count,\n    start: start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  var points = line.points,\n    options = line.options;\n  var _pathVars = pathVars(points, segment, params),\n    count = _pathVars.count,\n    start = _pathVars.start,\n    loop = _pathVars.loop,\n    ilen = _pathVars.ilen;\n  var lineMethod = getLineMethod(options);\n  var _ref5 = params || {},\n    _ref5$move = _ref5.move,\n    move = _ref5$move === void 0 ? true : _ref5$move,\n    reverse = _ref5.reverse;\n  var i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  var points = line.points;\n  var _pathVars2 = pathVars(points, segment, params),\n    count = _pathVars2.count,\n    start = _pathVars2.start,\n    ilen = _pathVars2.ilen;\n  var _ref6 = params || {},\n    _ref6$move = _ref6.move,\n    move = _ref6$move === void 0 ? true : _ref6$move,\n    reverse = _ref6.reverse;\n  var avgX = 0;\n  var countX = 0;\n  var i, point, prevX, minY, maxY, lastY;\n  var pointIndex = function pointIndex(index) {\n    return (start + (reverse ? ilen - index : index)) % count;\n  };\n  var drawX = function drawX() {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    var x = point.x;\n    var y = point.y;\n    var truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  var opts = line.options;\n  var borderDash = opts.borderDash && opts.borderDash.length;\n  var useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  var path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  var segments = line.segments,\n    options = line.options;\n  var segmentMethod = _getSegmentMethod(line);\n  var _iterator16 = _createForOfIteratorHelper(segments),\n    _step16;\n  try {\n    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n      var segment = _step16.value;\n      setStyle(ctx, options, segment.style);\n      ctx.beginPath();\n      if (segmentMethod(ctx, line, segment, {\n        start: start,\n        end: start + count - 1\n      })) {\n        ctx.closePath();\n      }\n      ctx.stroke();\n    }\n  } catch (err) {\n    _iterator16.e(err);\n  } finally {\n    _iterator16.f();\n  }\n}\nvar usePath2D = typeof Path2D === 'function';\nfunction _draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nvar LineElement = /*#__PURE__*/function (_Element3) {\n  _inherits(LineElement, _Element3);\n  var _super13 = _createSuper(LineElement);\n  function LineElement(cfg) {\n    var _this24;\n    _classCallCheck(this, LineElement);\n    _this24 = _super13.call(this);\n    _this24.animated = true;\n    _this24.options = undefined;\n    _this24._chart = undefined;\n    _this24._loop = undefined;\n    _this24._fullLoop = undefined;\n    _this24._path = undefined;\n    _this24._points = undefined;\n    _this24._segments = undefined;\n    _this24._decimated = false;\n    _this24._pointsUpdated = false;\n    _this24._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this24), cfg);\n    }\n    return _this24;\n  }\n  _createClass(LineElement, [{\n    key: \"updateControlPoints\",\n    value: function updateControlPoints(chartArea, indexAxis) {\n      var options = this.options;\n      if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n        var loop = options.spanGaps ? this._loop : this._fullLoop;\n        _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n        this._pointsUpdated = true;\n      }\n    }\n  }, {\n    key: \"points\",\n    get: function get() {\n      return this._points;\n    },\n    set: function set(points) {\n      this._points = points;\n      delete this._segments;\n      delete this._path;\n      this._pointsUpdated = false;\n    }\n  }, {\n    key: \"segments\",\n    get: function get() {\n      return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      var segments = this.segments;\n      var points = this.points;\n      return segments.length && points[segments[0].start];\n    }\n  }, {\n    key: \"last\",\n    value: function last() {\n      var segments = this.segments;\n      var points = this.points;\n      var count = segments.length;\n      return count && points[segments[count - 1].end];\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(point, property) {\n      var options = this.options;\n      var value = point[property];\n      var points = this.points;\n      var segments = _boundSegments(this, {\n        property: property,\n        start: value,\n        end: value\n      });\n      if (!segments.length) {\n        return;\n      }\n      var result = [];\n      var _interpolate = _getInterpolationMethod(options);\n      var i, ilen;\n      for (i = 0, ilen = segments.length; i < ilen; ++i) {\n        var _segments$i = segments[i],\n          start = _segments$i.start,\n          end = _segments$i.end;\n        var p1 = points[start];\n        var p2 = points[end];\n        if (p1 === p2) {\n          result.push(p1);\n          continue;\n        }\n        var t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n        var interpolated = _interpolate(p1, p2, t, options.stepped);\n        interpolated[property] = point[property];\n        result.push(interpolated);\n      }\n      return result.length === 1 ? result[0] : result;\n    }\n  }, {\n    key: \"pathSegment\",\n    value: function pathSegment(ctx, segment, params) {\n      var segmentMethod = _getSegmentMethod(this);\n      return segmentMethod(ctx, this, segment, params);\n    }\n  }, {\n    key: \"path\",\n    value: function path(ctx, start, count) {\n      var segments = this.segments;\n      var segmentMethod = _getSegmentMethod(this);\n      var loop = this._loop;\n      start = start || 0;\n      count = count || this.points.length - start;\n      var _iterator17 = _createForOfIteratorHelper(segments),\n        _step17;\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var segment = _step17.value;\n          loop &= segmentMethod(ctx, this, segment, {\n            start: start,\n            end: start + count - 1\n          });\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n      return !!loop;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, chartArea, start, count) {\n      var options = this.options || {};\n      var points = this.points || [];\n      if (points.length && options.borderWidth) {\n        ctx.save();\n        _draw(ctx, this, start, count);\n        ctx.restore();\n      }\n      if (this.animated) {\n        this._pointsUpdated = false;\n        this._path = undefined;\n      }\n    }\n  }]);\n  return LineElement;\n}(Element);\n_defineProperty(LineElement, \"id\", 'line');\n_defineProperty(LineElement, \"defaults\", {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0\n});\n_defineProperty(LineElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\n_defineProperty(LineElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: function _indexable(name) {\n    return name !== 'borderDash' && name !== 'fill';\n  }\n});\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  var options = el.options;\n  var _el$getProps = el.getProps([axis], useFinalPosition),\n    value = _el$getProps[axis];\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nvar PointElement = /*#__PURE__*/function (_Element4) {\n  _inherits(PointElement, _Element4);\n  var _super14 = _createSuper(PointElement);\n  /**\n  * @type {any}\n  */\n\n  /**\n  * @type {any}\n  */\n\n  function PointElement(cfg) {\n    var _this25;\n    _classCallCheck(this, PointElement);\n    _this25 = _super14.call(this);\n    _defineProperty(_assertThisInitialized(_this25), \"parsed\", void 0);\n    _defineProperty(_assertThisInitialized(_this25), \"skip\", void 0);\n    _defineProperty(_assertThisInitialized(_this25), \"stop\", void 0);\n    _this25.options = undefined;\n    _this25.parsed = undefined;\n    _this25.skip = undefined;\n    _this25.stop = undefined;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this25), cfg);\n    }\n    return _this25;\n  }\n  _createClass(PointElement, [{\n    key: \"inRange\",\n    value: function inRange(mouseX, mouseY, useFinalPosition) {\n      var options = this.options;\n      var _this$getProps4 = this.getProps(['x', 'y'], useFinalPosition),\n        x = _this$getProps4.x,\n        y = _this$getProps4.y;\n      return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n  }, {\n    key: \"inXRange\",\n    value: function inXRange(mouseX, useFinalPosition) {\n      return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n  }, {\n    key: \"inYRange\",\n    value: function inYRange(mouseY, useFinalPosition) {\n      return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps5 = this.getProps(['x', 'y'], useFinalPosition),\n        x = _this$getProps5.x,\n        y = _this$getProps5.y;\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"size\",\n    value: function size(options) {\n      options = options || this.options || {};\n      var radius = options.radius || 0;\n      radius = Math.max(radius, radius && options.hoverRadius || 0);\n      var borderWidth = radius && options.borderWidth || 0;\n      return (radius + borderWidth) * 2;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, area) {\n      var options = this.options;\n      if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n        return;\n      }\n      ctx.strokeStyle = options.borderColor;\n      ctx.lineWidth = options.borderWidth;\n      ctx.fillStyle = options.backgroundColor;\n      drawPoint(ctx, options, this.x, this.y);\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange() {\n      var options = this.options || {};\n      // @ts-expect-error Fallbacks should never be hit in practice\n      return options.radius + options.hitRadius;\n    }\n  }]);\n  return PointElement;\n}(Element);\n_defineProperty(PointElement, \"id\", 'point');\n_defineProperty(PointElement, \"defaults\", {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n});\n_defineProperty(PointElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nfunction getBarBounds(bar, useFinalPosition) {\n  var _bar$getProps = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition),\n    x = _bar$getProps.x,\n    y = _bar$getProps.y,\n    base = _bar$getProps.base,\n    width = _bar$getProps.width,\n    height = _bar$getProps.height;\n  var left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  var value = bar.options.borderWidth;\n  var skip = bar.borderSkipped;\n  var o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  var _bar$getProps2 = bar.getProps(['enableBorderRadius']),\n    enableBorderRadius = _bar$getProps2.enableBorderRadius;\n  var value = bar.options.borderRadius;\n  var o = toTRBLCorners(value);\n  var maxR = Math.min(maxW, maxH);\n  var skip = bar.borderSkipped;\n  var enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  var bounds = getBarBounds(bar);\n  var width = bounds.right - bounds.left;\n  var height = bounds.bottom - bounds.top;\n  var border = parseBorderWidth(bar, width / 2, height / 2);\n  var radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius: radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction _inRange(bar, x, y, useFinalPosition) {\n  var skipX = x === null;\n  var skipY = y === null;\n  var skipBoth = skipX && skipY;\n  var bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount) {\n  var refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var x = rect.x !== refRect.x ? -amount : 0;\n  var y = rect.y !== refRect.y ? -amount : 0;\n  var w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  var h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nvar BarElement = /*#__PURE__*/function (_Element5) {\n  _inherits(BarElement, _Element5);\n  var _super15 = _createSuper(BarElement);\n  function BarElement(cfg) {\n    var _this26;\n    _classCallCheck(this, BarElement);\n    _this26 = _super15.call(this);\n    _this26.options = undefined;\n    _this26.horizontal = undefined;\n    _this26.base = undefined;\n    _this26.width = undefined;\n    _this26.height = undefined;\n    _this26.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this26), cfg);\n    }\n    return _this26;\n  }\n  _createClass(BarElement, [{\n    key: \"draw\",\n    value: function draw(ctx) {\n      var inflateAmount = this.inflateAmount,\n        _this$options14 = this.options,\n        borderColor = _this$options14.borderColor,\n        backgroundColor = _this$options14.backgroundColor;\n      var _boundingRects = boundingRects(this),\n        inner = _boundingRects.inner,\n        outer = _boundingRects.outer;\n      var addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n      ctx.save();\n      if (outer.w !== inner.w || outer.h !== inner.h) {\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n        ctx.clip();\n        addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n        ctx.fillStyle = borderColor;\n        ctx.fill('evenodd');\n      }\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(inner, inflateAmount));\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }, {\n    key: \"inRange\",\n    value: function inRange(mouseX, mouseY, useFinalPosition) {\n      return _inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n  }, {\n    key: \"inXRange\",\n    value: function inXRange(mouseX, useFinalPosition) {\n      return _inRange(this, mouseX, null, useFinalPosition);\n    }\n  }, {\n    key: \"inYRange\",\n    value: function inYRange(mouseY, useFinalPosition) {\n      return _inRange(this, null, mouseY, useFinalPosition);\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps6 = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition),\n        x = _this$getProps6.x,\n        y = _this$getProps6.y,\n        base = _this$getProps6.base,\n        horizontal = _this$getProps6.horizontal;\n      return {\n        x: horizontal ? (x + base) / 2 : x,\n        y: horizontal ? y : (y + base) / 2\n      };\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange(axis) {\n      return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n  }]);\n  return BarElement;\n}(Element);\n_defineProperty(BarElement, \"id\", 'bar');\n_defineProperty(BarElement, \"defaults\", {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n});\n_defineProperty(BarElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nvar BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nvar BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(function (color) {\n  return color.replace('rgb(', 'rgba(').replace(')', ', 0.5)');\n});\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(function () {\n    return getBorderColor(i++);\n  });\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(function () {\n    return getBackgroundColor(i++);\n  });\n  return i;\n}\nfunction getColorizer(chart) {\n  var i = 0;\n  return function (dataset, datasetIndex) {\n    var controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  var k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout: function beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    var _chart$config = chart.config,\n      datasets = _chart$config.data.datasets,\n      chartOptions = _chart$config.options;\n    var elements = chartOptions.elements;\n    var containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n    var colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  var samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  var decimated = [];\n  var bucketWidth = (count - 2) / (samples - 2);\n  var sampledIndex = 0;\n  var endIndex = start + count - 1;\n  var a = start;\n  var i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    var avgX = 0;\n    var avgY = 0;\n    var j = void 0;\n    var avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    var avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    var avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    var rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    var rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    var _data$a = data[a],\n      pointAx = _data$a.x,\n      pointAy = _data$a.y;\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  var avgX = 0;\n  var countX = 0;\n  var i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  var decimated = [];\n  var endIndex = start + count - 1;\n  var xMin = data[start].x;\n  var xMax = data[endIndex].x;\n  var dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    var truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      var lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        var intermediateIndex1 = Math.min(minIndex, maxIndex);\n        var intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push(_objectSpread(_objectSpread({}, data[intermediateIndex1]), {}, {\n            x: avgX\n          }));\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push(_objectSpread(_objectSpread({}, data[intermediateIndex2]), {}, {\n            x: avgX\n          }));\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    var data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(function (dataset) {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  var pointCount = points.length;\n  var start = 0;\n  var count;\n  var iScale = meta.iScale;\n  var _iScale$getUserBounds = iScale.getUserBounds(),\n    min = _iScale$getUserBounds.min,\n    max = _iScale$getUserBounds.max,\n    minDefined = _iScale$getUserBounds.minDefined,\n    maxDefined = _iScale$getUserBounds.maxDefined;\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start: start,\n    count: count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: function beforeElementsUpdate(chart, args, options) {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    var availableWidth = chart.width;\n    chart.data.datasets.forEach(function (dataset, datasetIndex) {\n      var _data = dataset._data,\n        indexAxis = dataset.indexAxis;\n      var meta = chart.getDatasetMeta(datasetIndex);\n      var data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      var xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      var _getStartAndCountOfVi3 = getStartAndCountOfVisiblePointsSimplified(meta, data),\n        start = _getStartAndCountOfVi3.start,\n        count = _getStartAndCountOfVi3.count;\n      var threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function get() {\n            return this._decimated;\n          },\n          set: function set(d) {\n            this._data = d;\n          }\n        });\n      }\n      var decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(\"Unsupported decimation algorithm '\".concat(options.algorithm, \"'\"));\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy: function destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  var segments = line.segments;\n  var points = line.points;\n  var tpoints = target.points;\n  var parts = [];\n  var _iterator18 = _createForOfIteratorHelper(segments),\n    _step18;\n  try {\n    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n      var segment = _step18.value;\n      var start = segment.start,\n        end = segment.end;\n      end = _findSegmentEnd(start, end, points);\n      var bounds = _getBounds(property, points[start], points[end], segment.loop);\n      if (!target.segments) {\n        parts.push({\n          source: segment,\n          target: bounds,\n          start: points[start],\n          end: points[end]\n        });\n        continue;\n      }\n      var targetSegments = _boundSegments(target, bounds);\n      var _iterator19 = _createForOfIteratorHelper(targetSegments),\n        _step19;\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var tgt = _step19.value;\n          var subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n          var fillSources = _boundSegment(segment, points, subBounds);\n          var _iterator20 = _createForOfIteratorHelper(fillSources),\n            _step20;\n          try {\n            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n              var fillSource = _step20.value;\n              parts.push({\n                source: fillSource,\n                target: tgt,\n                start: _defineProperty({}, property, _getEdge(bounds, subBounds, 'start', Math.max)),\n                end: _defineProperty({}, property, _getEdge(bounds, subBounds, 'end', Math.min))\n              });\n            }\n          } catch (err) {\n            _iterator20.e(err);\n          } finally {\n            _iterator20.f();\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n    }\n  } catch (err) {\n    _iterator18.e(err);\n  } finally {\n    _iterator18.f();\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  var start = first[property];\n  var end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property: property,\n    start: start,\n    end: end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  var _ref7 = boundary || {},\n    _ref7$x = _ref7.x,\n    x = _ref7$x === void 0 ? null : _ref7$x,\n    _ref7$y = _ref7.y,\n    y = _ref7$y === void 0 ? null : _ref7$y;\n  var linePoints = line.points;\n  var points = [];\n  line.segments.forEach(function (_ref8) {\n    var start = _ref8.start,\n      end = _ref8.end;\n    end = _findSegmentEnd(start, end, linePoints);\n    var first = linePoints[start];\n    var last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y: y\n      });\n      points.push({\n        x: last.x,\n        y: y\n      });\n    } else if (x !== null) {\n      points.push({\n        x: x,\n        y: first.y\n      });\n      points.push({\n        x: x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    var point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  var points = [];\n  var _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points: points,\n    options: {\n      tension: 0\n    },\n    _loop: _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  var source = sources[index];\n  var fill = source.fill;\n  var visited = [index];\n  var target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  var fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  var target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  var pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  var value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  var options = line.options;\n  var fillOption = options.fill;\n  var fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  var scale = source.scale,\n    index = source.index,\n    line = source.line;\n  var points = [];\n  var segments = line.segments;\n  var sourcePoints = line.points;\n  var linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    for (var j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points: points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  var below = [];\n  var metas = scale.getMatchingVisibleMetas('line');\n  for (var i = 0; i < metas.length; i++) {\n    var meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  var postponed = [];\n  for (var j = 0; j < linesBelow.length; j++) {\n    var line = linesBelow[j];\n    var _findPoint = findPoint(line, sourcePoint, 'x'),\n      first = _findPoint.first,\n      last = _findPoint.last,\n      point = _findPoint.point;\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push.apply(points, postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  var point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  var pointValue = point[property];\n  var segments = line.segments;\n  var linePoints = line.points;\n  var first = false;\n  var last = false;\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    var firstValue = linePoints[segment.start][property];\n    var lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first: first,\n    last: last,\n    point: point\n  };\n}\nvar simpleArc = /*#__PURE__*/function () {\n  function simpleArc(opts) {\n    _classCallCheck(this, simpleArc);\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  _createClass(simpleArc, [{\n    key: \"pathSegment\",\n    value: function pathSegment(ctx, bounds, opts) {\n      var x = this.x,\n        y = this.y,\n        radius = this.radius;\n      bounds = bounds || {\n        start: 0,\n        end: TAU\n      };\n      ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n      return !opts.bounds;\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(point) {\n      var x = this.x,\n        y = this.y,\n        radius = this.radius;\n      var angle = point.angle;\n      return {\n        x: x + Math.cos(angle) * radius,\n        y: y + Math.sin(angle) * radius,\n        angle: angle\n      };\n    }\n  }]);\n  return simpleArc;\n}();\nfunction _getTarget(source) {\n  var chart = source.chart,\n    fill = source.fill,\n    line = source.line;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  var boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  var meta = chart.getDatasetMeta(index);\n  var visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  var scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  var _source$scale = source.scale,\n    scale = _source$scale === void 0 ? {} : _source$scale,\n    fill = source.fill;\n  var pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    var horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  var scale = source.scale,\n    fill = source.fill;\n  var options = scale.options;\n  var length = scale.getLabels().length;\n  var start = options.reverse ? scale.max : scale.min;\n  var value = _getTargetValue(fill, scale, start);\n  var target = [];\n  if (options.grid.circular) {\n    var center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (var i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  var target = _getTarget(source);\n  var line = source.line,\n    scale = source.scale,\n    axis = source.axis;\n  var lineOpts = line.options;\n  var fillOption = lineOpts.fill;\n  var color = lineOpts.backgroundColor;\n  var _ref9 = fillOption || {},\n    _ref9$above = _ref9.above,\n    above = _ref9$above === void 0 ? color : _ref9$above,\n    _ref9$below = _ref9.below,\n    below = _ref9$below === void 0 ? color : _ref9$below;\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line: line,\n      target: target,\n      above: above,\n      below: below,\n      area: area,\n      scale: scale,\n      axis: axis\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  var line = cfg.line,\n    target = cfg.target,\n    above = cfg.above,\n    below = cfg.below,\n    area = cfg.area,\n    scale = cfg.scale;\n  var property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line: line,\n      target: target,\n      color: above,\n      scale: scale,\n      property: property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line: line,\n    target: target,\n    color: below,\n    scale: scale,\n    property: property\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  var segments = target.segments,\n    points = target.points;\n  var first = true;\n  var lineLoop = false;\n  ctx.beginPath();\n  var _iterator21 = _createForOfIteratorHelper(segments),\n    _step21;\n  try {\n    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n      var segment = _step21.value;\n      var start = segment.start,\n        end = segment.end;\n      var firstPoint = points[start];\n      var lastPoint = points[_findSegmentEnd(start, end, points)];\n      if (first) {\n        ctx.moveTo(firstPoint.x, firstPoint.y);\n        first = false;\n      } else {\n        ctx.lineTo(firstPoint.x, clipY);\n        ctx.lineTo(firstPoint.x, firstPoint.y);\n      }\n      lineLoop = !!target.pathSegment(ctx, segment, {\n        move: lineLoop\n      });\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        ctx.lineTo(lastPoint.x, clipY);\n      }\n    }\n  } catch (err) {\n    _iterator21.e(err);\n  } finally {\n    _iterator21.f();\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  var line = cfg.line,\n    target = cfg.target,\n    property = cfg.property,\n    color = cfg.color,\n    scale = cfg.scale;\n  var segments = _segments(line, target, property);\n  var _iterator22 = _createForOfIteratorHelper(segments),\n    _step22;\n  try {\n    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n      var _step22$value = _step22.value,\n        src = _step22$value.source,\n        tgt = _step22$value.target,\n        start = _step22$value.start,\n        end = _step22$value.end;\n      var _src$style = src.style,\n        _src$style2 = _src$style === void 0 ? {} : _src$style,\n        _src$style2$backgroun = _src$style2.backgroundColor,\n        backgroundColor = _src$style2$backgroun === void 0 ? color : _src$style2$backgroun;\n      var notShape = target !== true;\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n      ctx.beginPath();\n      var lineLoop = !!line.pathSegment(ctx, src);\n      var loop = void 0;\n      if (notShape) {\n        if (lineLoop) {\n          ctx.closePath();\n        } else {\n          interpolatedLineTo(ctx, target, end, property);\n        }\n        var targetLoop = !!target.pathSegment(ctx, tgt, {\n          move: lineLoop,\n          reverse: true\n        });\n        loop = lineLoop && targetLoop;\n        if (!loop) {\n          interpolatedLineTo(ctx, target, start, property);\n        }\n      }\n      ctx.closePath();\n      ctx.fill(loop ? 'evenodd' : 'nonzero');\n      ctx.restore();\n    }\n  } catch (err) {\n    _iterator22.e(err);\n  } finally {\n    _iterator22.f();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  var _scale$chart$chartAre = scale.chart.chartArea,\n    top = _scale$chart$chartAre.top,\n    bottom = _scale$chart$chartAre.bottom;\n  var _ref10 = bounds || {},\n    property = _ref10.property,\n    start = _ref10.start,\n    end = _ref10.end;\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  var interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate: function afterDatasetsUpdate(chart, _args, options) {\n    var count = (chart.data.datasets || []).length;\n    var sources = [];\n    var meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart: chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line: line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw: function beforeDraw(chart, _args, options) {\n    var draw = options.drawTime === 'beforeDraw';\n    var metasets = chart.getSortedVisibleDatasetMetas();\n    var area = chart.chartArea;\n    for (var i = metasets.length - 1; i >= 0; --i) {\n      var source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw: function beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    var metasets = chart.getSortedVisibleDatasetMetas();\n    for (var i = metasets.length - 1; i >= 0; --i) {\n      var source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw: function beforeDatasetDraw(chart, args, options) {\n    var source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nvar getBoxSize = function getBoxSize(labelOpts, fontSize) {\n  var _labelOpts$boxHeight = labelOpts.boxHeight,\n    boxHeight = _labelOpts$boxHeight === void 0 ? fontSize : _labelOpts$boxHeight,\n    _labelOpts$boxWidth = labelOpts.boxWidth,\n    boxWidth = _labelOpts$boxWidth === void 0 ? fontSize : _labelOpts$boxWidth;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth: boxWidth,\n    boxHeight: boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nvar itemsEqual = function itemsEqual(a, b) {\n  return a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n};\nvar Legend = /*#__PURE__*/function (_Element6) {\n  _inherits(Legend, _Element6);\n  var _super16 = _createSuper(Legend);\n  function Legend(config) {\n    var _this27;\n    _classCallCheck(this, Legend);\n    _this27 = _super16.call(this);\n    _this27._added = false;\n    _this27.legendHitBoxes = [];\n    _this27._hoveredItem = null;\n    _this27.doughnutMode = false;\n    _this27.chart = config.chart;\n    _this27.options = config.options;\n    _this27.ctx = config.ctx;\n    _this27.legendItems = undefined;\n    _this27.columnSizes = undefined;\n    _this27.lineWidths = undefined;\n    _this27.maxHeight = undefined;\n    _this27.maxWidth = undefined;\n    _this27.top = undefined;\n    _this27.bottom = undefined;\n    _this27.left = undefined;\n    _this27.right = undefined;\n    _this27.height = undefined;\n    _this27.width = undefined;\n    _this27._margins = undefined;\n    _this27.position = undefined;\n    _this27.weight = undefined;\n    _this27.fullSize = undefined;\n    return _this27;\n  }\n  _createClass(Legend, [{\n    key: \"update\",\n    value: function update(maxWidth, maxHeight, margins) {\n      this.maxWidth = maxWidth;\n      this.maxHeight = maxHeight;\n      this._margins = margins;\n      this.setDimensions();\n      this.buildLabels();\n      this.fit();\n    }\n  }, {\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      if (this.isHorizontal()) {\n        this.width = this.maxWidth;\n        this.left = this._margins.left;\n        this.right = this.width;\n      } else {\n        this.height = this.maxHeight;\n        this.top = this._margins.top;\n        this.bottom = this.height;\n      }\n    }\n  }, {\n    key: \"buildLabels\",\n    value: function buildLabels() {\n      var _this28 = this;\n      var labelOpts = this.options.labels || {};\n      var legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n      if (labelOpts.filter) {\n        legendItems = legendItems.filter(function (item) {\n          return labelOpts.filter(item, _this28.chart.data);\n        });\n      }\n      if (labelOpts.sort) {\n        legendItems = legendItems.sort(function (a, b) {\n          return labelOpts.sort(a, b, _this28.chart.data);\n        });\n      }\n      if (this.options.reverse) {\n        legendItems.reverse();\n      }\n      this.legendItems = legendItems;\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var options = this.options,\n        ctx = this.ctx;\n      if (!options.display) {\n        this.width = this.height = 0;\n        return;\n      }\n      var labelOpts = options.labels;\n      var labelFont = toFont(labelOpts.font);\n      var fontSize = labelFont.size;\n      var titleHeight = this._computeTitleHeight();\n      var _getBoxSize = getBoxSize(labelOpts, fontSize),\n        boxWidth = _getBoxSize.boxWidth,\n        itemHeight = _getBoxSize.itemHeight;\n      var width, height;\n      ctx.font = labelFont.string;\n      if (this.isHorizontal()) {\n        width = this.maxWidth;\n        height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n      } else {\n        height = this.maxHeight;\n        width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n      }\n      this.width = Math.min(width, options.maxWidth || this.maxWidth);\n      this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n  }, {\n    key: \"_fitRows\",\n    value: function _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n      var ctx = this.ctx,\n        maxWidth = this.maxWidth,\n        padding = this.options.labels.padding;\n      var hitboxes = this.legendHitBoxes = [];\n      var lineWidths = this.lineWidths = [0];\n      var lineHeight = itemHeight + padding;\n      var totalHeight = titleHeight;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      var row = -1;\n      var top = -lineHeight;\n      this.legendItems.forEach(function (legendItem, i) {\n        var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n        if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n          totalHeight += lineHeight;\n          lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n          top += lineHeight;\n          row++;\n        }\n        hitboxes[i] = {\n          left: 0,\n          top: top,\n          row: row,\n          width: itemWidth,\n          height: itemHeight\n        };\n        lineWidths[lineWidths.length - 1] += itemWidth + padding;\n      });\n      return totalHeight;\n    }\n  }, {\n    key: \"_fitCols\",\n    value: function _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n      var ctx = this.ctx,\n        maxHeight = this.maxHeight,\n        padding = this.options.labels.padding;\n      var hitboxes = this.legendHitBoxes = [];\n      var columnSizes = this.columnSizes = [];\n      var heightLimit = maxHeight - titleHeight;\n      var totalWidth = padding;\n      var currentColWidth = 0;\n      var currentColHeight = 0;\n      var left = 0;\n      var col = 0;\n      this.legendItems.forEach(function (legendItem, i) {\n        var _calculateItemSize = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight),\n          itemWidth = _calculateItemSize.itemWidth,\n          itemHeight = _calculateItemSize.itemHeight;\n        if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n          totalWidth += currentColWidth + padding;\n          columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n          });\n          left += currentColWidth + padding;\n          col++;\n          currentColWidth = currentColHeight = 0;\n        }\n        hitboxes[i] = {\n          left: left,\n          top: currentColHeight,\n          col: col,\n          width: itemWidth,\n          height: itemHeight\n        };\n        currentColWidth = Math.max(currentColWidth, itemWidth);\n        currentColHeight += itemHeight + padding;\n      });\n      totalWidth += currentColWidth;\n      columnSizes.push({\n        width: currentColWidth,\n        height: currentColHeight\n      });\n      return totalWidth;\n    }\n  }, {\n    key: \"adjustHitBoxes\",\n    value: function adjustHitBoxes() {\n      if (!this.options.display) {\n        return;\n      }\n      var titleHeight = this._computeTitleHeight();\n      var hitboxes = this.legendHitBoxes,\n        _this$options15 = this.options,\n        align = _this$options15.align,\n        padding = _this$options15.labels.padding,\n        rtl = _this$options15.rtl;\n      var rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n      if (this.isHorizontal()) {\n        var row = 0;\n        var left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        var _iterator23 = _createForOfIteratorHelper(hitboxes),\n          _step23;\n        try {\n          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n            var hitbox = _step23.value;\n            if (row !== hitbox.row) {\n              row = hitbox.row;\n              left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            }\n            hitbox.top += this.top + titleHeight + padding;\n            hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n            left += hitbox.width + padding;\n          }\n        } catch (err) {\n          _iterator23.e(err);\n        } finally {\n          _iterator23.f();\n        }\n      } else {\n        var col = 0;\n        var top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        var _iterator24 = _createForOfIteratorHelper(hitboxes),\n          _step24;\n        try {\n          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n            var _hitbox = _step24.value;\n            if (_hitbox.col !== col) {\n              col = _hitbox.col;\n              top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            }\n            _hitbox.top = top;\n            _hitbox.left += this.left + padding;\n            _hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(_hitbox.left), _hitbox.width);\n            top += _hitbox.height + padding;\n          }\n        } catch (err) {\n          _iterator24.e(err);\n        } finally {\n          _iterator24.f();\n        }\n      }\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      if (this.options.display) {\n        var ctx = this.ctx;\n        clipArea(ctx, this);\n        this._draw();\n        unclipArea(ctx);\n      }\n    }\n  }, {\n    key: \"_draw\",\n    value: function _draw() {\n      var _this29 = this;\n      var opts = this.options,\n        columnSizes = this.columnSizes,\n        lineWidths = this.lineWidths,\n        ctx = this.ctx;\n      var align = opts.align,\n        labelOpts = opts.labels;\n      var defaultColor = defaults.color;\n      var rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n      var labelFont = toFont(labelOpts.font);\n      var padding = labelOpts.padding;\n      var fontSize = labelFont.size;\n      var halfFontSize = fontSize / 2;\n      var cursor;\n      this.drawTitle();\n      ctx.textAlign = rtlHelper.textAlign('left');\n      ctx.textBaseline = 'middle';\n      ctx.lineWidth = 0.5;\n      ctx.font = labelFont.string;\n      var _getBoxSize2 = getBoxSize(labelOpts, fontSize),\n        boxWidth = _getBoxSize2.boxWidth,\n        boxHeight = _getBoxSize2.boxHeight,\n        itemHeight = _getBoxSize2.itemHeight;\n      var drawLegendBox = function drawLegendBox(x, y, legendItem) {\n        if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n          return;\n        }\n        ctx.save();\n        var lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n        ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n        ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n        ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n        ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n        ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n        if (labelOpts.usePointStyle) {\n          var drawOptions = {\n            radius: boxHeight * Math.SQRT2 / 2,\n            pointStyle: legendItem.pointStyle,\n            rotation: legendItem.rotation,\n            borderWidth: lineWidth\n          };\n          var centerX = rtlHelper.xPlus(x, boxWidth / 2);\n          var centerY = y + halfFontSize;\n          drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n        } else {\n          var yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n          var xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n          var borderRadius = toTRBLCorners(legendItem.borderRadius);\n          ctx.beginPath();\n          if (Object.values(borderRadius).some(function (v) {\n            return v !== 0;\n          })) {\n            addRoundedRectPath(ctx, {\n              x: xBoxLeft,\n              y: yBoxTop,\n              w: boxWidth,\n              h: boxHeight,\n              radius: borderRadius\n            });\n          } else {\n            ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n          }\n          ctx.fill();\n          if (lineWidth !== 0) {\n            ctx.stroke();\n          }\n        }\n        ctx.restore();\n      };\n      var fillText = function fillText(x, y, legendItem) {\n        renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n          strikethrough: legendItem.hidden,\n          textAlign: rtlHelper.textAlign(legendItem.textAlign)\n        });\n      };\n      var isHorizontal = this.isHorizontal();\n      var titleHeight = this._computeTitleHeight();\n      if (isHorizontal) {\n        cursor = {\n          x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n          y: this.top + padding + titleHeight,\n          line: 0\n        };\n      } else {\n        cursor = {\n          x: this.left + padding,\n          y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n          line: 0\n        };\n      }\n      overrideTextDirection(this.ctx, opts.textDirection);\n      var lineHeight = itemHeight + padding;\n      this.legendItems.forEach(function (legendItem, i) {\n        ctx.strokeStyle = legendItem.fontColor;\n        ctx.fillStyle = legendItem.fontColor;\n        var textWidth = ctx.measureText(legendItem.text).width;\n        var textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n        var width = boxWidth + halfFontSize + textWidth;\n        var x = cursor.x;\n        var y = cursor.y;\n        rtlHelper.setWidth(_this29.width);\n        if (isHorizontal) {\n          if (i > 0 && x + width + padding > _this29.right) {\n            y = cursor.y += lineHeight;\n            cursor.line++;\n            x = cursor.x = _alignStartEnd(align, _this29.left + padding, _this29.right - lineWidths[cursor.line]);\n          }\n        } else if (i > 0 && y + lineHeight > _this29.bottom) {\n          x = cursor.x = x + columnSizes[cursor.line].width + padding;\n          cursor.line++;\n          y = cursor.y = _alignStartEnd(align, _this29.top + titleHeight + padding, _this29.bottom - columnSizes[cursor.line].height);\n        }\n        var realX = rtlHelper.x(x);\n        drawLegendBox(realX, y, legendItem);\n        x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : _this29.right, opts.rtl);\n        fillText(rtlHelper.x(x), y, legendItem);\n        if (isHorizontal) {\n          cursor.x += width + padding;\n        } else if (typeof legendItem.text !== 'string') {\n          var fontLineHeight = labelFont.lineHeight;\n          cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n        } else {\n          cursor.y += lineHeight;\n        }\n      });\n      restoreTextDirection(this.ctx, opts.textDirection);\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {\n      var opts = this.options;\n      var titleOpts = opts.title;\n      var titleFont = toFont(titleOpts.font);\n      var titlePadding = toPadding(titleOpts.padding);\n      if (!titleOpts.display) {\n        return;\n      }\n      var rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n      var ctx = this.ctx;\n      var position = titleOpts.position;\n      var halfFontSize = titleFont.size / 2;\n      var topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n      var y;\n      var left = this.left;\n      var maxWidth = this.width;\n      if (this.isHorizontal()) {\n        maxWidth = Math.max.apply(Math, _toConsumableArray(this.lineWidths));\n        y = this.top + topPaddingPlusHalfFontSize;\n        left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n      } else {\n        var maxHeight = this.columnSizes.reduce(function (acc, size) {\n          return Math.max(acc, size.height);\n        }, 0);\n        y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n      }\n      var x = _alignStartEnd(position, left, left + maxWidth);\n      ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n      ctx.textBaseline = 'middle';\n      ctx.strokeStyle = titleOpts.color;\n      ctx.fillStyle = titleOpts.color;\n      ctx.font = titleFont.string;\n      renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n  }, {\n    key: \"_computeTitleHeight\",\n    value: function _computeTitleHeight() {\n      var titleOpts = this.options.title;\n      var titleFont = toFont(titleOpts.font);\n      var titlePadding = toPadding(titleOpts.padding);\n      return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n  }, {\n    key: \"_getLegendItemAt\",\n    value: function _getLegendItemAt(x, y) {\n      var i, hitBox, lh;\n      if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n        lh = this.legendHitBoxes;\n        for (i = 0; i < lh.length; ++i) {\n          hitBox = lh[i];\n          if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n            return this.legendItems[i];\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e) {\n      var opts = this.options;\n      if (!isListened(e.type, opts)) {\n        return;\n      }\n      var hoveredItem = this._getLegendItemAt(e.x, e.y);\n      if (e.type === 'mousemove' || e.type === 'mouseout') {\n        var previous = this._hoveredItem;\n        var sameItem = itemsEqual(previous, hoveredItem);\n        if (previous && !sameItem) {\n          callback(opts.onLeave, [e, previous, this], this);\n        }\n        this._hoveredItem = hoveredItem;\n        if (hoveredItem && !sameItem) {\n          callback(opts.onHover, [e, hoveredItem, this], this);\n        }\n      } else if (hoveredItem) {\n        callback(opts.onClick, [e, hoveredItem, this], this);\n      }\n    }\n  }]);\n  return Legend;\n}(Element);\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  var itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  var itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth: itemWidth,\n    itemHeight: itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  var legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce(function (a, b) {\n      return a.length > b.length ? a : b;\n    });\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  var itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  var labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start: function start(chart, _args, options) {\n    var legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options: options,\n      chart: chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop: function stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate: function afterUpdate(chart) {\n    var legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent: function afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick: function onClick(e, legendItem, legend) {\n      var index = legendItem.datasetIndex;\n      var ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: function color(ctx) {\n        return ctx.chart.options.color;\n      },\n      boxWidth: 40,\n      padding: 10,\n      generateLabels: function generateLabels(chart) {\n        var datasets = chart.data.datasets;\n        var _chart$legend$options = chart.legend.options.labels,\n          usePointStyle = _chart$legend$options.usePointStyle,\n          pointStyle = _chart$legend$options.pointStyle,\n          textAlign = _chart$legend$options.textAlign,\n          color = _chart$legend$options.color,\n          useBorderRadius = _chart$legend$options.useBorderRadius,\n          borderRadius = _chart$legend$options.borderRadius;\n        return chart._getSortedDatasetMetas().map(function (meta) {\n          var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          var borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: function color(ctx) {\n        return ctx.chart.options.color;\n      },\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: function _scriptable(name) {\n      return !name.startsWith('on');\n    },\n    labels: {\n      _scriptable: function _scriptable(name) {\n        return !['generateLabels', 'filter', 'sort'].includes(name);\n      }\n    }\n  }\n};\nvar Title = /*#__PURE__*/function (_Element7) {\n  _inherits(Title, _Element7);\n  var _super17 = _createSuper(Title);\n  function Title(config) {\n    var _this30;\n    _classCallCheck(this, Title);\n    _this30 = _super17.call(this);\n    _this30.chart = config.chart;\n    _this30.options = config.options;\n    _this30.ctx = config.ctx;\n    _this30._padding = undefined;\n    _this30.top = undefined;\n    _this30.bottom = undefined;\n    _this30.left = undefined;\n    _this30.right = undefined;\n    _this30.width = undefined;\n    _this30.height = undefined;\n    _this30.position = undefined;\n    _this30.weight = undefined;\n    _this30.fullSize = undefined;\n    return _this30;\n  }\n  _createClass(Title, [{\n    key: \"update\",\n    value: function update(maxWidth, maxHeight) {\n      var opts = this.options;\n      this.left = 0;\n      this.top = 0;\n      if (!opts.display) {\n        this.width = this.height = this.right = this.bottom = 0;\n        return;\n      }\n      this.width = this.right = maxWidth;\n      this.height = this.bottom = maxHeight;\n      var lineCount = isArray(opts.text) ? opts.text.length : 1;\n      this._padding = toPadding(opts.padding);\n      var textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n      if (this.isHorizontal()) {\n        this.height = textSize;\n      } else {\n        this.width = textSize;\n      }\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      var pos = this.options.position;\n      return pos === 'top' || pos === 'bottom';\n    }\n  }, {\n    key: \"_drawArgs\",\n    value: function _drawArgs(offset) {\n      var top = this.top,\n        left = this.left,\n        bottom = this.bottom,\n        right = this.right,\n        options = this.options;\n      var align = options.align;\n      var rotation = 0;\n      var maxWidth, titleX, titleY;\n      if (this.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        titleY = top + offset;\n        maxWidth = right - left;\n      } else {\n        if (options.position === 'left') {\n          titleX = left + offset;\n          titleY = _alignStartEnd(align, bottom, top);\n          rotation = PI * -0.5;\n        } else {\n          titleX = right - offset;\n          titleY = _alignStartEnd(align, top, bottom);\n          rotation = PI * 0.5;\n        }\n        maxWidth = bottom - top;\n      }\n      return {\n        titleX: titleX,\n        titleY: titleY,\n        maxWidth: maxWidth,\n        rotation: rotation\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var ctx = this.ctx;\n      var opts = this.options;\n      if (!opts.display) {\n        return;\n      }\n      var fontOpts = toFont(opts.font);\n      var lineHeight = fontOpts.lineHeight;\n      var offset = lineHeight / 2 + this._padding.top;\n      var _this$_drawArgs = this._drawArgs(offset),\n        titleX = _this$_drawArgs.titleX,\n        titleY = _this$_drawArgs.titleY,\n        maxWidth = _this$_drawArgs.maxWidth,\n        rotation = _this$_drawArgs.rotation;\n      renderText(ctx, opts.text, 0, 0, fontOpts, {\n        color: opts.color,\n        maxWidth: maxWidth,\n        rotation: rotation,\n        textAlign: _toLeftRightCenter(opts.align),\n        textBaseline: 'middle',\n        translation: [titleX, titleY]\n      });\n    }\n  }]);\n  return Title;\n}(Element);\nfunction createTitle(chart, titleOpts) {\n  var title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart: chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start: function start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop: function stop(chart) {\n    var titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nvar map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start: function start(chart, _args, options) {\n    var title = new Title({\n      ctx: chart.ctx,\n      options: options,\n      chart: chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop: function stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nvar positioners = {\n  average: function average(items) {\n    if (!items.length) {\n      return false;\n    }\n    var i, len;\n    var xSet = new Set();\n    var y = 0;\n    var count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      var el = items[i].element;\n      if (el && el.hasValue()) {\n        var pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n    var xAverage = _toConsumableArray(xSet).reduce(function (a, b) {\n      return a + b;\n    }) / xSet.size;\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n  nearest: function nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    var x = eventPosition.x;\n    var y = eventPosition.y;\n    var minDistance = Number.POSITIVE_INFINITY;\n    var i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      var el = items[i].element;\n      if (el && el.hasValue()) {\n        var center = el.getCenterPoint();\n        var d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      var tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x: x,\n      y: y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  var element = item.element,\n    datasetIndex = item.datasetIndex,\n    index = item.index;\n  var controller = chart.getDatasetMeta(datasetIndex).controller;\n  var _controller$getLabelA = controller.getLabelAndValue(index),\n    label = _controller$getLabelA.label,\n    value = _controller$getLabelA.value;\n  return {\n    chart: chart,\n    label: label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex: datasetIndex,\n    element: element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  var ctx = tooltip.chart.ctx;\n  var body = tooltip.body,\n    footer = tooltip.footer,\n    title = tooltip.title;\n  var boxWidth = options.boxWidth,\n    boxHeight = options.boxHeight;\n  var bodyFont = toFont(options.bodyFont);\n  var titleFont = toFont(options.titleFont);\n  var footerFont = toFont(options.footerFont);\n  var titleLineCount = title.length;\n  var footerLineCount = footer.length;\n  var bodyLineItemCount = body.length;\n  var padding = toPadding(options.padding);\n  var height = padding.height;\n  var width = 0;\n  var combinedBodyLength = body.reduce(function (count, bodyItem) {\n    return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n  }, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    var bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  var widthPadding = 0;\n  var maxLineWidth = function maxLineWidth(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, function (bodyItem) {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width: width,\n    height: height\n  };\n}\nfunction determineYAlign(chart, size) {\n  var y = size.y,\n    height = size.height;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  var x = size.x,\n    width = size.width;\n  var caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  var x = size.x,\n    width = size.width;\n  var chartWidth = chart.width,\n    _chart$chartArea = chart.chartArea,\n    left = _chart$chartArea.left,\n    right = _chart$chartArea.right;\n  var xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  var yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign: yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  var x = size.x,\n    width = size.width;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  var y = size.y,\n    height = size.height;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  var caretSize = options.caretSize,\n    caretPadding = options.caretPadding,\n    cornerRadius = options.cornerRadius;\n  var xAlign = alignment.xAlign,\n    yAlign = alignment.yAlign;\n  var paddingAndSize = caretSize + caretPadding;\n  var _toTRBLCorners = toTRBLCorners(cornerRadius),\n    topLeft = _toTRBLCorners.topLeft,\n    topRight = _toTRBLCorners.topRight,\n    bottomLeft = _toTRBLCorners.bottomLeft,\n    bottomRight = _toTRBLCorners.bottomRight;\n  var x = alignX(size, xAlign);\n  var y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  var padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip: tooltip,\n    tooltipItems: tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  var override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nvar defaultCallbacks = {\n  beforeTitle: noop,\n  title: function title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      var item = tooltipItems[0];\n      var labels = item.chart.data.labels;\n      var labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label: function label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    var label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    var value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor: function labelColor(tooltipItem) {\n    var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    var options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor: function labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle: function labelPointStyle(tooltipItem) {\n    var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    var options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  var result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nvar Tooltip = /*#__PURE__*/function (_Element8) {\n  _inherits(Tooltip, _Element8);\n  var _super18 = _createSuper(Tooltip);\n  function Tooltip(config) {\n    var _this31;\n    _classCallCheck(this, Tooltip);\n    _this31 = _super18.call(this);\n    _this31.opacity = 0;\n    _this31._active = [];\n    _this31._eventPosition = undefined;\n    _this31._size = undefined;\n    _this31._cachedAnimations = undefined;\n    _this31._tooltipItems = [];\n    _this31.$animations = undefined;\n    _this31.$context = undefined;\n    _this31.chart = config.chart;\n    _this31.options = config.options;\n    _this31.dataPoints = undefined;\n    _this31.title = undefined;\n    _this31.beforeBody = undefined;\n    _this31.body = undefined;\n    _this31.afterBody = undefined;\n    _this31.footer = undefined;\n    _this31.xAlign = undefined;\n    _this31.yAlign = undefined;\n    _this31.x = undefined;\n    _this31.y = undefined;\n    _this31.height = undefined;\n    _this31.width = undefined;\n    _this31.caretX = undefined;\n    _this31.caretY = undefined;\n    _this31.labelColors = undefined;\n    _this31.labelPointStyles = undefined;\n    _this31.labelTextColors = undefined;\n    return _this31;\n  }\n  _createClass(Tooltip, [{\n    key: \"initialize\",\n    value: function initialize(options) {\n      this.options = options;\n      this._cachedAnimations = undefined;\n      this.$context = undefined;\n    }\n  }, {\n    key: \"_resolveAnimations\",\n    value: function _resolveAnimations() {\n      var cached = this._cachedAnimations;\n      if (cached) {\n        return cached;\n      }\n      var chart = this.chart;\n      var options = this.options.setContext(this.getContext());\n      var opts = options.enabled && chart.options.animation && options.animations;\n      var animations = new Animations(this.chart, opts);\n      if (opts._cacheable) {\n        this._cachedAnimations = Object.freeze(animations);\n      }\n      return animations;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle(context, options) {\n      var callbacks = options.callbacks;\n      var beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n      var title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n      var afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n      lines = pushOrConcat(lines, splitNewlines(title));\n      lines = pushOrConcat(lines, splitNewlines(afterTitle));\n      return lines;\n    }\n  }, {\n    key: \"getBeforeBody\",\n    value: function getBeforeBody(tooltipItems, options) {\n      return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n  }, {\n    key: \"getBody\",\n    value: function getBody(tooltipItems, options) {\n      var _this32 = this;\n      var callbacks = options.callbacks;\n      var bodyItems = [];\n      each(tooltipItems, function (context) {\n        var bodyItem = {\n          before: [],\n          lines: [],\n          after: []\n        };\n        var scoped = overrideCallbacks(callbacks, context);\n        pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', _this32, context)));\n        pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', _this32, context));\n        pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', _this32, context)));\n        bodyItems.push(bodyItem);\n      });\n      return bodyItems;\n    }\n  }, {\n    key: \"getAfterBody\",\n    value: function getAfterBody(tooltipItems, options) {\n      return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n  }, {\n    key: \"getFooter\",\n    value: function getFooter(tooltipItems, options) {\n      var callbacks = options.callbacks;\n      var beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n      var footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n      var afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n      lines = pushOrConcat(lines, splitNewlines(footer));\n      lines = pushOrConcat(lines, splitNewlines(afterFooter));\n      return lines;\n    }\n  }, {\n    key: \"_createItems\",\n    value: function _createItems(options) {\n      var _this33 = this;\n      var active = this._active;\n      var data = this.chart.data;\n      var labelColors = [];\n      var labelPointStyles = [];\n      var labelTextColors = [];\n      var tooltipItems = [];\n      var i, len;\n      for (i = 0, len = active.length; i < len; ++i) {\n        tooltipItems.push(createTooltipItem(this.chart, active[i]));\n      }\n      if (options.filter) {\n        tooltipItems = tooltipItems.filter(function (element, index, array) {\n          return options.filter(element, index, array, data);\n        });\n      }\n      if (options.itemSort) {\n        tooltipItems = tooltipItems.sort(function (a, b) {\n          return options.itemSort(a, b, data);\n        });\n      }\n      each(tooltipItems, function (context) {\n        var scoped = overrideCallbacks(options.callbacks, context);\n        labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', _this33, context));\n        labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', _this33, context));\n        labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', _this33, context));\n      });\n      this.labelColors = labelColors;\n      this.labelPointStyles = labelPointStyles;\n      this.labelTextColors = labelTextColors;\n      this.dataPoints = tooltipItems;\n      return tooltipItems;\n    }\n  }, {\n    key: \"update\",\n    value: function update(changed, replay) {\n      var options = this.options.setContext(this.getContext());\n      var active = this._active;\n      var properties;\n      var tooltipItems = [];\n      if (!active.length) {\n        if (this.opacity !== 0) {\n          properties = {\n            opacity: 0\n          };\n        }\n      } else {\n        var position = positioners[options.position].call(this, active, this._eventPosition);\n        tooltipItems = this._createItems(options);\n        this.title = this.getTitle(tooltipItems, options);\n        this.beforeBody = this.getBeforeBody(tooltipItems, options);\n        this.body = this.getBody(tooltipItems, options);\n        this.afterBody = this.getAfterBody(tooltipItems, options);\n        this.footer = this.getFooter(tooltipItems, options);\n        var size = this._size = getTooltipSize(this, options);\n        var positionAndSize = Object.assign({}, position, size);\n        var alignment = determineAlignment(this.chart, options, positionAndSize);\n        var backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        properties = {\n          opacity: 1,\n          x: backgroundPoint.x,\n          y: backgroundPoint.y,\n          width: size.width,\n          height: size.height,\n          caretX: position.x,\n          caretY: position.y\n        };\n      }\n      this._tooltipItems = tooltipItems;\n      this.$context = undefined;\n      if (properties) {\n        this._resolveAnimations().update(this, properties);\n      }\n      if (changed && options.external) {\n        options.external.call(this, {\n          chart: this.chart,\n          tooltip: this,\n          replay: replay\n        });\n      }\n    }\n  }, {\n    key: \"drawCaret\",\n    value: function drawCaret(tooltipPoint, ctx, size, options) {\n      var caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n      ctx.lineTo(caretPosition.x1, caretPosition.y1);\n      ctx.lineTo(caretPosition.x2, caretPosition.y2);\n      ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n  }, {\n    key: \"getCaretPosition\",\n    value: function getCaretPosition(tooltipPoint, size, options) {\n      var xAlign = this.xAlign,\n        yAlign = this.yAlign;\n      var caretSize = options.caretSize,\n        cornerRadius = options.cornerRadius;\n      var _toTRBLCorners2 = toTRBLCorners(cornerRadius),\n        topLeft = _toTRBLCorners2.topLeft,\n        topRight = _toTRBLCorners2.topRight,\n        bottomLeft = _toTRBLCorners2.bottomLeft,\n        bottomRight = _toTRBLCorners2.bottomRight;\n      var ptX = tooltipPoint.x,\n        ptY = tooltipPoint.y;\n      var width = size.width,\n        height = size.height;\n      var x1, x2, x3, y1, y2, y3;\n      if (yAlign === 'center') {\n        y2 = ptY + height / 2;\n        if (xAlign === 'left') {\n          x1 = ptX;\n          x2 = x1 - caretSize;\n          y1 = y2 + caretSize;\n          y3 = y2 - caretSize;\n        } else {\n          x1 = ptX + width;\n          x2 = x1 + caretSize;\n          y1 = y2 - caretSize;\n          y3 = y2 + caretSize;\n        }\n        x3 = x1;\n      } else {\n        if (xAlign === 'left') {\n          x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n        } else if (xAlign === 'right') {\n          x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n        } else {\n          x2 = this.caretX;\n        }\n        if (yAlign === 'top') {\n          y1 = ptY;\n          y2 = y1 - caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else {\n          y1 = ptY + height;\n          y2 = y1 + caretSize;\n          x1 = x2 + caretSize;\n          x3 = x2 - caretSize;\n        }\n        y3 = y1;\n      }\n      return {\n        x1: x1,\n        x2: x2,\n        x3: x3,\n        y1: y1,\n        y2: y2,\n        y3: y3\n      };\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle(pt, ctx, options) {\n      var title = this.title;\n      var length = title.length;\n      var titleFont, titleSpacing, i;\n      if (length) {\n        var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        pt.x = getAlignedX(this, options.titleAlign, options);\n        ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n        ctx.textBaseline = 'middle';\n        titleFont = toFont(options.titleFont);\n        titleSpacing = options.titleSpacing;\n        ctx.fillStyle = options.titleColor;\n        ctx.font = titleFont.string;\n        for (i = 0; i < length; ++i) {\n          ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n          pt.y += titleFont.lineHeight + titleSpacing;\n          if (i + 1 === length) {\n            pt.y += options.titleMarginBottom - titleSpacing;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_drawColorBox\",\n    value: function _drawColorBox(ctx, pt, i, rtlHelper, options) {\n      var labelColor = this.labelColors[i];\n      var labelPointStyle = this.labelPointStyles[i];\n      var boxHeight = options.boxHeight,\n        boxWidth = options.boxWidth;\n      var bodyFont = toFont(options.bodyFont);\n      var colorX = getAlignedX(this, 'left', options);\n      var rtlColorX = rtlHelper.x(colorX);\n      var yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n      var colorY = pt.y + yOffSet;\n      if (options.usePointStyle) {\n        var drawOptions = {\n          radius: Math.min(boxWidth, boxHeight) / 2,\n          pointStyle: labelPointStyle.pointStyle,\n          rotation: labelPointStyle.rotation,\n          borderWidth: 1\n        };\n        var centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n        var centerY = colorY + boxHeight / 2;\n        ctx.strokeStyle = options.multiKeyBackground;\n        ctx.fillStyle = options.multiKeyBackground;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n        ctx.strokeStyle = labelColor.borderColor;\n        ctx.fillStyle = labelColor.backgroundColor;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n      } else {\n        ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max.apply(Math, _toConsumableArray(Object.values(labelColor.borderWidth))) : labelColor.borderWidth || 1;\n        ctx.strokeStyle = labelColor.borderColor;\n        ctx.setLineDash(labelColor.borderDash || []);\n        ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n        var outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n        var innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n        var borderRadius = toTRBLCorners(labelColor.borderRadius);\n        if (Object.values(borderRadius).some(function (v) {\n          return v !== 0;\n        })) {\n          ctx.beginPath();\n          ctx.fillStyle = options.multiKeyBackground;\n          addRoundedRectPath(ctx, {\n            x: outerX,\n            y: colorY,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n          ctx.fill();\n          ctx.stroke();\n          ctx.fillStyle = labelColor.backgroundColor;\n          ctx.beginPath();\n          addRoundedRectPath(ctx, {\n            x: innerX,\n            y: colorY + 1,\n            w: boxWidth - 2,\n            h: boxHeight - 2,\n            radius: borderRadius\n          });\n          ctx.fill();\n        } else {\n          ctx.fillStyle = options.multiKeyBackground;\n          ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n          ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n          ctx.fillStyle = labelColor.backgroundColor;\n          ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n        }\n      }\n      ctx.fillStyle = this.labelTextColors[i];\n    }\n  }, {\n    key: \"drawBody\",\n    value: function drawBody(pt, ctx, options) {\n      var body = this.body;\n      var bodySpacing = options.bodySpacing,\n        bodyAlign = options.bodyAlign,\n        displayColors = options.displayColors,\n        boxHeight = options.boxHeight,\n        boxWidth = options.boxWidth,\n        boxPadding = options.boxPadding;\n      var bodyFont = toFont(options.bodyFont);\n      var bodyLineHeight = bodyFont.lineHeight;\n      var xLinePadding = 0;\n      var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      var fillLineOfText = function fillLineOfText(line) {\n        ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n        pt.y += bodyLineHeight + bodySpacing;\n      };\n      var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n      var bodyItem, textColor, lines, i, j, ilen, jlen;\n      ctx.textAlign = bodyAlign;\n      ctx.textBaseline = 'middle';\n      ctx.font = bodyFont.string;\n      pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n      ctx.fillStyle = options.bodyColor;\n      each(this.beforeBody, fillLineOfText);\n      xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n      for (i = 0, ilen = body.length; i < ilen; ++i) {\n        bodyItem = body[i];\n        textColor = this.labelTextColors[i];\n        ctx.fillStyle = textColor;\n        each(bodyItem.before, fillLineOfText);\n        lines = bodyItem.lines;\n        if (displayColors && lines.length) {\n          this._drawColorBox(ctx, pt, i, rtlHelper, options);\n          bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n        }\n        for (j = 0, jlen = lines.length; j < jlen; ++j) {\n          fillLineOfText(lines[j]);\n          bodyLineHeight = bodyFont.lineHeight;\n        }\n        each(bodyItem.after, fillLineOfText);\n      }\n      xLinePadding = 0;\n      bodyLineHeight = bodyFont.lineHeight;\n      each(this.afterBody, fillLineOfText);\n      pt.y -= bodySpacing;\n    }\n  }, {\n    key: \"drawFooter\",\n    value: function drawFooter(pt, ctx, options) {\n      var footer = this.footer;\n      var length = footer.length;\n      var footerFont, i;\n      if (length) {\n        var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        pt.x = getAlignedX(this, options.footerAlign, options);\n        pt.y += options.footerMarginTop;\n        ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n        ctx.textBaseline = 'middle';\n        footerFont = toFont(options.footerFont);\n        ctx.fillStyle = options.footerColor;\n        ctx.font = footerFont.string;\n        for (i = 0; i < length; ++i) {\n          ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n          pt.y += footerFont.lineHeight + options.footerSpacing;\n        }\n      }\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground(pt, ctx, tooltipSize, options) {\n      var xAlign = this.xAlign,\n        yAlign = this.yAlign;\n      var x = pt.x,\n        y = pt.y;\n      var width = tooltipSize.width,\n        height = tooltipSize.height;\n      var _toTRBLCorners3 = toTRBLCorners(options.cornerRadius),\n        topLeft = _toTRBLCorners3.topLeft,\n        topRight = _toTRBLCorners3.topRight,\n        bottomLeft = _toTRBLCorners3.bottomLeft,\n        bottomRight = _toTRBLCorners3.bottomRight;\n      ctx.fillStyle = options.backgroundColor;\n      ctx.strokeStyle = options.borderColor;\n      ctx.lineWidth = options.borderWidth;\n      ctx.beginPath();\n      ctx.moveTo(x + topLeft, y);\n      if (yAlign === 'top') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + width - topRight, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n      if (yAlign === 'center' && xAlign === 'right') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + width, y + height - bottomRight);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n      if (yAlign === 'bottom') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + bottomLeft, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n      if (yAlign === 'center' && xAlign === 'left') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x, y + topLeft);\n      ctx.quadraticCurveTo(x, y, x + topLeft, y);\n      ctx.closePath();\n      ctx.fill();\n      if (options.borderWidth > 0) {\n        ctx.stroke();\n      }\n    }\n  }, {\n    key: \"_updateAnimationTarget\",\n    value: function _updateAnimationTarget(options) {\n      var chart = this.chart;\n      var anims = this.$animations;\n      var animX = anims && anims.x;\n      var animY = anims && anims.y;\n      if (animX || animY) {\n        var position = positioners[options.position].call(this, this._active, this._eventPosition);\n        if (!position) {\n          return;\n        }\n        var size = this._size = getTooltipSize(this, options);\n        var positionAndSize = Object.assign({}, position, this._size);\n        var alignment = determineAlignment(chart, options, positionAndSize);\n        var point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n        if (animX._to !== point.x || animY._to !== point.y) {\n          this.xAlign = alignment.xAlign;\n          this.yAlign = alignment.yAlign;\n          this.width = size.width;\n          this.height = size.height;\n          this.caretX = position.x;\n          this.caretY = position.y;\n          this._resolveAnimations().update(this, point);\n        }\n      }\n    }\n  }, {\n    key: \"_willRender\",\n    value: function _willRender() {\n      return !!this.opacity;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var options = this.options.setContext(this.getContext());\n      var opacity = this.opacity;\n      if (!opacity) {\n        return;\n      }\n      this._updateAnimationTarget(options);\n      var tooltipSize = {\n        width: this.width,\n        height: this.height\n      };\n      var pt = {\n        x: this.x,\n        y: this.y\n      };\n      opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n      var padding = toPadding(options.padding);\n      var hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n      if (options.enabled && hasTooltipContent) {\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        this.drawBackground(pt, ctx, tooltipSize, options);\n        overrideTextDirection(ctx, options.textDirection);\n        pt.y += padding.top;\n        this.drawTitle(pt, ctx, options);\n        this.drawBody(pt, ctx, options);\n        this.drawFooter(pt, ctx, options);\n        restoreTextDirection(ctx, options.textDirection);\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"getActiveElements\",\n    value: function getActiveElements() {\n      return this._active || [];\n    }\n  }, {\n    key: \"setActiveElements\",\n    value: function setActiveElements(activeElements, eventPosition) {\n      var _this34 = this;\n      var lastActive = this._active;\n      var active = activeElements.map(function (_ref11) {\n        var datasetIndex = _ref11.datasetIndex,\n          index = _ref11.index;\n        var meta = _this34.chart.getDatasetMeta(datasetIndex);\n        if (!meta) {\n          throw new Error('Cannot find a dataset at index ' + datasetIndex);\n        }\n        return {\n          datasetIndex: datasetIndex,\n          element: meta.data[index],\n          index: index\n        };\n      });\n      var changed = !_elementsEqual(lastActive, active);\n      var positionChanged = this._positionChanged(active, eventPosition);\n      if (changed || positionChanged) {\n        this._active = active;\n        this._eventPosition = eventPosition;\n        this._ignoreReplayEvents = true;\n        this.update(true);\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e, replay) {\n      var inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (replay && this._ignoreReplayEvents) {\n        return false;\n      }\n      this._ignoreReplayEvents = false;\n      var options = this.options;\n      var lastActive = this._active || [];\n      var active = this._getActiveElements(e, lastActive, replay, inChartArea);\n      var positionChanged = this._positionChanged(active, e);\n      var changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n      if (changed) {\n        this._active = active;\n        if (options.enabled || options.external) {\n          this._eventPosition = {\n            x: e.x,\n            y: e.y\n          };\n          this.update(true, replay);\n        }\n      }\n      return changed;\n    }\n  }, {\n    key: \"_getActiveElements\",\n    value: function _getActiveElements(e, lastActive, replay, inChartArea) {\n      var _this35 = this;\n      var options = this.options;\n      if (e.type === 'mouseout') {\n        return [];\n      }\n      if (!inChartArea) {\n        return lastActive.filter(function (i) {\n          return _this35.chart.data.datasets[i.datasetIndex] && _this35.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined;\n        });\n      }\n      var active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n      if (options.reverse) {\n        active.reverse();\n      }\n      return active;\n    }\n  }, {\n    key: \"_positionChanged\",\n    value: function _positionChanged(active, e) {\n      var caretX = this.caretX,\n        caretY = this.caretY,\n        options = this.options;\n      var position = positioners[options.position].call(this, active, e);\n      return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n  }]);\n  return Tooltip;\n}(Element);\n_defineProperty(Tooltip, \"positioners\", positioners);\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners: positioners,\n  afterInit: function afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart: chart,\n        options: options\n      });\n    }\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset: function reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw: function afterDraw(chart) {\n    var tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      var args = {\n        tooltip: tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', _objectSpread(_objectSpread({}, args), {}, {\n        cancelable: true\n      })) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent: function afterEvent(chart, args) {\n    if (chart.tooltip) {\n      var useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: function boxHeight(ctx, opts) {\n      return opts.bodyFont.size;\n    },\n    boxWidth: function boxWidth(ctx, opts) {\n      return opts.bodyFont.size;\n    },\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: function _scriptable(name) {\n      return name !== 'filter' && name !== 'itemSort' && name !== 'external';\n    },\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nvar addIfString = function addIfString(labels, raw, index, addedLabels) {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index: index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  var first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  var last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nvar validIndex = function validIndex(index, max) {\n  return index === null ? null : _limitValue(Math.round(index), 0, max);\n};\nfunction _getLabelForValue(value) {\n  var labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nvar CategoryScale = /*#__PURE__*/function (_Scale) {\n  _inherits(CategoryScale, _Scale);\n  var _super19 = _createSuper(CategoryScale);\n  function CategoryScale(cfg) {\n    var _this36;\n    _classCallCheck(this, CategoryScale);\n    _this36 = _super19.call(this, cfg);\n    _this36._startValue = undefined;\n    _this36._valueRange = 0;\n    _this36._addedLabels = [];\n    return _this36;\n  }\n  _createClass(CategoryScale, [{\n    key: \"init\",\n    value: function init(scaleOptions) {\n      var added = this._addedLabels;\n      if (added.length) {\n        var labels = this.getLabels();\n        var _iterator25 = _createForOfIteratorHelper(added),\n          _step25;\n        try {\n          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n            var _step25$value = _step25.value,\n              _index3 = _step25$value.index,\n              label = _step25$value.label;\n            if (labels[_index3] === label) {\n              labels.splice(_index3, 1);\n            }\n          }\n        } catch (err) {\n          _iterator25.e(err);\n        } finally {\n          _iterator25.f();\n        }\n        this._addedLabels = [];\n      }\n      _get(_getPrototypeOf(CategoryScale.prototype), \"init\", this).call(this, scaleOptions);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (isNullOrUndef(raw)) {\n        return null;\n      }\n      var labels = this.getLabels();\n      index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n      return validIndex(index, labels.length - 1);\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getUserBounds2 = this.getUserBounds(),\n        minDefined = _this$getUserBounds2.minDefined,\n        maxDefined = _this$getUserBounds2.maxDefined;\n      var _this$getMinMax = this.getMinMax(true),\n        min = _this$getMinMax.min,\n        max = _this$getMinMax.max;\n      if (this.options.bounds === 'ticks') {\n        if (!minDefined) {\n          min = 0;\n        }\n        if (!maxDefined) {\n          max = this.getLabels().length - 1;\n        }\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var min = this.min;\n      var max = this.max;\n      var offset = this.options.offset;\n      var ticks = [];\n      var labels = this.getLabels();\n      labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n      this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n      this._startValue = this.min - (offset ? 0.5 : 0);\n      for (var value = min; value <= max; value++) {\n        ticks.push({\n          value: value\n        });\n      }\n      return ticks;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return _getLabelForValue.call(this, value);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      _get(_getPrototypeOf(CategoryScale.prototype), \"configure\", this).call(this);\n      if (!this.isHorizontal()) {\n        this._reversePixels = !this._reversePixels;\n      }\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      if (typeof value !== 'number') {\n        value = this.parse(value);\n      }\n      return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getPixelForTick\",\n    value: function getPixelForTick(index) {\n      var ticks = this.ticks;\n      if (index < 0 || index > ticks.length - 1) {\n        return null;\n      }\n      return this.getPixelForValue(ticks[index].value);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n  }, {\n    key: \"getBasePixel\",\n    value: function getBasePixel() {\n      return this.bottom;\n    }\n  }]);\n  return CategoryScale;\n}(Scale);\n_defineProperty(CategoryScale, \"id\", 'category');\n_defineProperty(CategoryScale, \"defaults\", {\n  ticks: {\n    callback: _getLabelForValue\n  }\n});\nfunction generateTicks$1(generationOptions, dataRange) {\n  var ticks = [];\n  var MIN_SPACING = 1e-14;\n  var bounds = generationOptions.bounds,\n    step = generationOptions.step,\n    min = generationOptions.min,\n    max = generationOptions.max,\n    precision = generationOptions.precision,\n    count = generationOptions.count,\n    maxTicks = generationOptions.maxTicks,\n    maxDigits = generationOptions.maxDigits,\n    includeBounds = generationOptions.includeBounds;\n  var unit = step || 1;\n  var maxSpaces = maxTicks - 1;\n  var rmin = dataRange.min,\n    rmax = dataRange.max;\n  var minDefined = !isNullOrUndef(min);\n  var maxDefined = !isNullOrUndef(max);\n  var countDefined = !isNullOrUndef(count);\n  var minSpacing = (rmax - rmin) / (maxDigits + 1);\n  var spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  var factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  var decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  var j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    var tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({\n      value: tickValue\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, _ref12) {\n  var horizontal = _ref12.horizontal,\n    minRotation = _ref12.minRotation;\n  var rad = toRadians(minRotation);\n  var ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  var length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nvar LinearScaleBase = /*#__PURE__*/function (_Scale2) {\n  _inherits(LinearScaleBase, _Scale2);\n  var _super20 = _createSuper(LinearScaleBase);\n  function LinearScaleBase(cfg) {\n    var _this37;\n    _classCallCheck(this, LinearScaleBase);\n    _this37 = _super20.call(this, cfg);\n    _this37.start = undefined;\n    _this37.end = undefined;\n    _this37._startValue = undefined;\n    _this37._endValue = undefined;\n    _this37._valueRange = 0;\n    return _this37;\n  }\n  _createClass(LinearScaleBase, [{\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (isNullOrUndef(raw)) {\n        return null;\n      }\n      if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n        return null;\n      }\n      return +raw;\n    }\n  }, {\n    key: \"handleTickRangeOptions\",\n    value: function handleTickRangeOptions() {\n      var beginAtZero = this.options.beginAtZero;\n      var _this$getUserBounds3 = this.getUserBounds(),\n        minDefined = _this$getUserBounds3.minDefined,\n        maxDefined = _this$getUserBounds3.maxDefined;\n      var min = this.min,\n        max = this.max;\n      var setMin = function setMin(v) {\n        return min = minDefined ? min : v;\n      };\n      var setMax = function setMax(v) {\n        return max = maxDefined ? max : v;\n      };\n      if (beginAtZero) {\n        var minSign = sign(min);\n        var maxSign = sign(max);\n        if (minSign < 0 && maxSign < 0) {\n          setMax(0);\n        } else if (minSign > 0 && maxSign > 0) {\n          setMin(0);\n        }\n      }\n      if (min === max) {\n        var offset = max === 0 ? 1 : Math.abs(max * 0.05);\n        setMax(max + offset);\n        if (!beginAtZero) {\n          setMin(min - offset);\n        }\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"getTickLimit\",\n    value: function getTickLimit() {\n      var tickOpts = this.options.ticks;\n      var maxTicksLimit = tickOpts.maxTicksLimit,\n        stepSize = tickOpts.stepSize;\n      var maxTicks;\n      if (stepSize) {\n        maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n        if (maxTicks > 1000) {\n          console.warn(\"scales.\".concat(this.id, \".ticks.stepSize: \").concat(stepSize, \" would result generating up to \").concat(maxTicks, \" ticks. Limiting to 1000.\"));\n          maxTicks = 1000;\n        }\n      } else {\n        maxTicks = this.computeTickLimit();\n        maxTicksLimit = maxTicksLimit || 11;\n      }\n      if (maxTicksLimit) {\n        maxTicks = Math.min(maxTicksLimit, maxTicks);\n      }\n      return maxTicks;\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      return Number.POSITIVE_INFINITY;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var opts = this.options;\n      var tickOpts = opts.ticks;\n      var maxTicks = this.getTickLimit();\n      maxTicks = Math.max(2, maxTicks);\n      var numericGeneratorOptions = {\n        maxTicks: maxTicks,\n        bounds: opts.bounds,\n        min: opts.min,\n        max: opts.max,\n        precision: tickOpts.precision,\n        step: tickOpts.stepSize,\n        count: tickOpts.count,\n        maxDigits: this._maxDigits(),\n        horizontal: this.isHorizontal(),\n        minRotation: tickOpts.minRotation || 0,\n        includeBounds: tickOpts.includeBounds !== false\n      };\n      var dataRange = this._range || this;\n      var ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n      if (opts.bounds === 'ticks') {\n        _setMinAndMaxByKey(ticks, this, 'value');\n      }\n      if (opts.reverse) {\n        ticks.reverse();\n        this.start = this.max;\n        this.end = this.min;\n      } else {\n        this.start = this.min;\n        this.end = this.max;\n      }\n      return ticks;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var ticks = this.ticks;\n      var start = this.min;\n      var end = this.max;\n      _get(_getPrototypeOf(LinearScaleBase.prototype), \"configure\", this).call(this);\n      if (this.options.offset && ticks.length) {\n        var offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n        start -= offset;\n        end += offset;\n      }\n      this._startValue = start;\n      this._endValue = end;\n      this._valueRange = end - start;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n  }]);\n  return LinearScaleBase;\n}(Scale);\nvar LinearScale = /*#__PURE__*/function (_LinearScaleBase) {\n  _inherits(LinearScale, _LinearScaleBase);\n  var _super21 = _createSuper(LinearScale);\n  function LinearScale() {\n    _classCallCheck(this, LinearScale);\n    return _super21.apply(this, arguments);\n  }\n  _createClass(LinearScale, [{\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getMinMax2 = this.getMinMax(true),\n        min = _this$getMinMax2.min,\n        max = _this$getMinMax2.max;\n      this.min = isNumberFinite(min) ? min : 0;\n      this.max = isNumberFinite(max) ? max : 1;\n      this.handleTickRangeOptions();\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      var horizontal = this.isHorizontal();\n      var length = horizontal ? this.width : this.height;\n      var minRotation = toRadians(this.options.ticks.minRotation);\n      var ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n      var tickFont = this._resolveTickFontOptions(0);\n      return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n  }]);\n  return LinearScale;\n}(LinearScaleBase);\n_defineProperty(LinearScale, \"id\", 'linear');\n_defineProperty(LinearScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n});\nvar log10Floor = function log10Floor(v) {\n  return Math.floor(log10(v));\n};\nvar changeExponent = function changeExponent(v, m) {\n  return Math.pow(10, log10Floor(v) + m);\n};\nfunction isMajor(tickVal) {\n  var remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  var rangeStep = Math.pow(10, rangeExp);\n  var start = Math.floor(min / rangeStep);\n  var end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  var range = max - min;\n  var rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, _ref13) {\n  var min = _ref13.min,\n    max = _ref13.max;\n  min = finiteOrDefault(generationOptions.min, min);\n  var ticks = [];\n  var minExp = log10Floor(min);\n  var exp = startExp(min, max);\n  var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  var stepSize = Math.pow(10, exp);\n  var base = minExp > exp ? Math.pow(10, minExp) : 0;\n  var start = Math.round((min - base) * precision) / precision;\n  var offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  var significand = Math.floor((start - offset) / Math.pow(10, exp));\n  var value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value: value,\n      major: isMajor(value),\n      significand: significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  var lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand: significand\n  });\n  return ticks;\n}\nvar LogarithmicScale = /*#__PURE__*/function (_Scale3) {\n  _inherits(LogarithmicScale, _Scale3);\n  var _super22 = _createSuper(LogarithmicScale);\n  function LogarithmicScale(cfg) {\n    var _this38;\n    _classCallCheck(this, LogarithmicScale);\n    _this38 = _super22.call(this, cfg);\n    _this38.start = undefined;\n    _this38.end = undefined;\n    _this38._startValue = undefined;\n    _this38._valueRange = 0;\n    return _this38;\n  }\n  _createClass(LogarithmicScale, [{\n    key: \"parse\",\n    value: function parse(raw, index) {\n      var value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n      if (value === 0) {\n        this._zero = true;\n        return undefined;\n      }\n      return isNumberFinite(value) && value > 0 ? value : null;\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getMinMax3 = this.getMinMax(true),\n        min = _this$getMinMax3.min,\n        max = _this$getMinMax3.max;\n      this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n      this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n      if (this.options.beginAtZero) {\n        this._zero = true;\n      }\n      if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n        this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n      }\n      this.handleTickRangeOptions();\n    }\n  }, {\n    key: \"handleTickRangeOptions\",\n    value: function handleTickRangeOptions() {\n      var _this$getUserBounds4 = this.getUserBounds(),\n        minDefined = _this$getUserBounds4.minDefined,\n        maxDefined = _this$getUserBounds4.maxDefined;\n      var min = this.min;\n      var max = this.max;\n      var setMin = function setMin(v) {\n        return min = minDefined ? min : v;\n      };\n      var setMax = function setMax(v) {\n        return max = maxDefined ? max : v;\n      };\n      if (min === max) {\n        if (min <= 0) {\n          setMin(1);\n          setMax(10);\n        } else {\n          setMin(changeExponent(min, -1));\n          setMax(changeExponent(max, +1));\n        }\n      }\n      if (min <= 0) {\n        setMin(changeExponent(max, -1));\n      }\n      if (max <= 0) {\n        setMax(changeExponent(min, +1));\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var opts = this.options;\n      var generationOptions = {\n        min: this._userMin,\n        max: this._userMax\n      };\n      var ticks = generateTicks(generationOptions, this);\n      if (opts.bounds === 'ticks') {\n        _setMinAndMaxByKey(ticks, this, 'value');\n      }\n      if (opts.reverse) {\n        ticks.reverse();\n        this.start = this.max;\n        this.end = this.min;\n      } else {\n        this.start = this.min;\n        this.end = this.max;\n      }\n      return ticks;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var start = this.min;\n      _get(_getPrototypeOf(LogarithmicScale.prototype), \"configure\", this).call(this);\n      this._startValue = log10(start);\n      this._valueRange = log10(this.max) - log10(start);\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      if (value === undefined || value === 0) {\n        value = this.min;\n      }\n      if (value === null || isNaN(value)) {\n        return NaN;\n      }\n      return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var decimal = this.getDecimalForPixel(pixel);\n      return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n  }]);\n  return LogarithmicScale;\n}(Scale);\n_defineProperty(LogarithmicScale, \"id\", 'logarithmic');\n_defineProperty(LogarithmicScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n});\nfunction getTickBackdropHeight(opts) {\n  var tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    var padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  var orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  var limits = Object.assign({}, orig);\n  var labelSizes = [];\n  var padding = [];\n  var valueCount = scale._pointLabels.length;\n  var pointLabelOpts = scale.options.pointLabels;\n  var additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (var i = 0; i < valueCount; i++) {\n    var opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    var pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    var plFont = toFont(opts.font);\n    var textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    var angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    var angle = Math.round(toDegrees(angleRadians));\n    var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  var sin = Math.abs(Math.sin(angle));\n  var cos = Math.abs(Math.cos(angle));\n  var x = 0;\n  var y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n  var outerDistance = scale.drawingArea;\n  var extra = itemOpts.extra,\n    additionalAngle = itemOpts.additionalAngle,\n    padding = itemOpts.padding,\n    size = itemOpts.size;\n  var pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  var angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  var y = yForAngle(pointLabelPosition.y, size.h, angle);\n  var textAlign = getTextAlignForAngle(angle);\n  var left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y: y,\n    textAlign: textAlign,\n    left: left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  var left = item.left,\n    top = item.top,\n    right = item.right,\n    bottom = item.bottom;\n  var apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n  return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  var items = [];\n  var valueCount = scale._pointLabels.length;\n  var opts = scale.options;\n  var _opts$pointLabels = opts.pointLabels,\n    centerPointLabels = _opts$pointLabels.centerPointLabels,\n    display = _opts$pointLabels.display;\n  var itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  var area;\n  for (var i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    var item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n  var left = item.left,\n    top = item.top,\n    right = item.right,\n    bottom = item.bottom;\n  var backdropColor = opts.backdropColor;\n  if (!isNullOrUndef(backdropColor)) {\n    var borderRadius = toTRBLCorners(opts.borderRadius);\n    var padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    var backdropLeft = left - padding.left;\n    var backdropTop = top - padding.top;\n    var backdropWidth = right - left + padding.width;\n    var backdropHeight = bottom - top + padding.height;\n    if (Object.values(borderRadius).some(function (v) {\n      return v !== 0;\n    })) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\nfunction drawPointLabels(scale, labelCount) {\n  var ctx = scale.ctx,\n    pointLabels = scale.options.pointLabels;\n  for (var i = labelCount - 1; i >= 0; i--) {\n    var item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      continue;\n    }\n    var optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    var plFont = toFont(optsAtIndex.font);\n    var x = item.x,\n      y = item.y,\n      textAlign = item.textAlign;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  var ctx = scale.ctx;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    var pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (var i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  var ctx = scale.ctx;\n  var circular = gridLineOpts.circular;\n  var color = gridLineOpts.color,\n    lineWidth = gridLineOpts.lineWidth;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label: label,\n    index: index,\n    type: 'pointLabel'\n  });\n}\nvar RadialLinearScale = /*#__PURE__*/function (_LinearScaleBase2) {\n  _inherits(RadialLinearScale, _LinearScaleBase2);\n  var _super23 = _createSuper(RadialLinearScale);\n  function RadialLinearScale(cfg) {\n    var _this39;\n    _classCallCheck(this, RadialLinearScale);\n    _this39 = _super23.call(this, cfg);\n    _this39.xCenter = undefined;\n    _this39.yCenter = undefined;\n    _this39.drawingArea = undefined;\n    _this39._pointLabels = [];\n    _this39._pointLabelItems = [];\n    return _this39;\n  }\n  _createClass(RadialLinearScale, [{\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      var padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n      var w = this.width = this.maxWidth - padding.width;\n      var h = this.height = this.maxHeight - padding.height;\n      this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n      this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n      this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getMinMax4 = this.getMinMax(false),\n        min = _this$getMinMax4.min,\n        max = _this$getMinMax4.max;\n      this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n      this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n      this.handleTickRangeOptions();\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var _this40 = this;\n      LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n      this._pointLabels = this.getLabels().map(function (value, index) {\n        var label = callback(_this40.options.pointLabels.callback, [value, index], _this40);\n        return label || label === 0 ? label : '';\n      }).filter(function (v, i) {\n        return _this40.chart.getDataVisibility(i);\n      });\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var opts = this.options;\n      if (opts.display && opts.pointLabels.display) {\n        fitWithPointLabels(this);\n      } else {\n        this.setCenterPoint(0, 0, 0, 0);\n      }\n    }\n  }, {\n    key: \"setCenterPoint\",\n    value: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n      this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n      this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n      this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n  }, {\n    key: \"getIndexAngle\",\n    value: function getIndexAngle(index) {\n      var angleMultiplier = TAU / (this._pointLabels.length || 1);\n      var startAngle = this.options.startAngle || 0;\n      return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n  }, {\n    key: \"getDistanceFromCenterForValue\",\n    value: function getDistanceFromCenterForValue(value) {\n      if (isNullOrUndef(value)) {\n        return NaN;\n      }\n      var scalingFactor = this.drawingArea / (this.max - this.min);\n      if (this.options.reverse) {\n        return (this.max - value) * scalingFactor;\n      }\n      return (value - this.min) * scalingFactor;\n    }\n  }, {\n    key: \"getValueForDistanceFromCenter\",\n    value: function getValueForDistanceFromCenter(distance) {\n      if (isNullOrUndef(distance)) {\n        return NaN;\n      }\n      var scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n      return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n  }, {\n    key: \"getPointLabelContext\",\n    value: function getPointLabelContext(index) {\n      var pointLabels = this._pointLabels || [];\n      if (index >= 0 && index < pointLabels.length) {\n        var pointLabel = pointLabels[index];\n        return createPointLabelContext(this.getContext(), index, pointLabel);\n      }\n    }\n  }, {\n    key: \"getPointPosition\",\n    value: function getPointPosition(index, distanceFromCenter) {\n      var additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n      return {\n        x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n        y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n        angle: angle\n      };\n    }\n  }, {\n    key: \"getPointPositionForValue\",\n    value: function getPointPositionForValue(index, value) {\n      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n  }, {\n    key: \"getBasePosition\",\n    value: function getBasePosition(index) {\n      return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n  }, {\n    key: \"getPointLabelPosition\",\n    value: function getPointLabelPosition(index) {\n      var _this$_pointLabelItem = this._pointLabelItems[index],\n        left = _this$_pointLabelItem.left,\n        top = _this$_pointLabelItem.top,\n        right = _this$_pointLabelItem.right,\n        bottom = _this$_pointLabelItem.bottom;\n      return {\n        left: left,\n        top: top,\n        right: right,\n        bottom: bottom\n      };\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground() {\n      var _this$options16 = this.options,\n        backgroundColor = _this$options16.backgroundColor,\n        circular = _this$options16.grid.circular;\n      if (backgroundColor) {\n        var ctx = this.ctx;\n        ctx.save();\n        ctx.beginPath();\n        pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n        ctx.closePath();\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid() {\n      var _this41 = this;\n      var ctx = this.ctx;\n      var opts = this.options;\n      var angleLines = opts.angleLines,\n        grid = opts.grid,\n        border = opts.border;\n      var labelCount = this._pointLabels.length;\n      var i, offset, position;\n      if (opts.pointLabels.display) {\n        drawPointLabels(this, labelCount);\n      }\n      if (grid.display) {\n        this.ticks.forEach(function (tick, index) {\n          if (index !== 0 || index === 0 && _this41.min < 0) {\n            offset = _this41.getDistanceFromCenterForValue(tick.value);\n            var context = _this41.getContext(index);\n            var optsAtIndex = grid.setContext(context);\n            var optsAtIndexBorder = border.setContext(context);\n            drawRadiusLine(_this41, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n          }\n        });\n      }\n      if (angleLines.display) {\n        ctx.save();\n        for (i = labelCount - 1; i >= 0; i--) {\n          var optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n          var color = optsAtIndex.color,\n            lineWidth = optsAtIndex.lineWidth;\n          if (!lineWidth || !color) {\n            continue;\n          }\n          ctx.lineWidth = lineWidth;\n          ctx.strokeStyle = color;\n          ctx.setLineDash(optsAtIndex.borderDash);\n          ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n          offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n          position = this.getPointPosition(i, offset);\n          ctx.beginPath();\n          ctx.moveTo(this.xCenter, this.yCenter);\n          ctx.lineTo(position.x, position.y);\n          ctx.stroke();\n        }\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"drawBorder\",\n    value: function drawBorder() {}\n  }, {\n    key: \"drawLabels\",\n    value: function drawLabels() {\n      var _this42 = this;\n      var ctx = this.ctx;\n      var opts = this.options;\n      var tickOpts = opts.ticks;\n      if (!tickOpts.display) {\n        return;\n      }\n      var startAngle = this.getIndexAngle(0);\n      var offset, width;\n      ctx.save();\n      ctx.translate(this.xCenter, this.yCenter);\n      ctx.rotate(startAngle);\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      this.ticks.forEach(function (tick, index) {\n        if (index === 0 && _this42.min >= 0 && !opts.reverse) {\n          return;\n        }\n        var optsAtIndex = tickOpts.setContext(_this42.getContext(index));\n        var tickFont = toFont(optsAtIndex.font);\n        offset = _this42.getDistanceFromCenterForValue(_this42.ticks[index].value);\n        if (optsAtIndex.showLabelBackdrop) {\n          ctx.font = tickFont.string;\n          width = ctx.measureText(tick.label).width;\n          ctx.fillStyle = optsAtIndex.backdropColor;\n          var padding = toPadding(optsAtIndex.backdropPadding);\n          ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n        }\n        renderText(ctx, tick.label, 0, -offset, tickFont, {\n          color: optsAtIndex.color,\n          strokeColor: optsAtIndex.textStrokeColor,\n          strokeWidth: optsAtIndex.textStrokeWidth\n        });\n      });\n      ctx.restore();\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {}\n  }]);\n  return RadialLinearScale;\n}(LinearScaleBase);\n_defineProperty(RadialLinearScale, \"id\", 'radialLinear');\n_defineProperty(RadialLinearScale, \"defaults\", {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback: function callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n});\n_defineProperty(RadialLinearScale, \"defaultRoutes\", {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n});\n_defineProperty(RadialLinearScale, \"descriptors\", {\n  angleLines: {\n    _fallback: 'grid'\n  }\n});\nvar INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nvar UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction _parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  var adapter = scale._adapter;\n  var _scale$_parseOpts = scale._parseOpts,\n    parser = _scale$_parseOpts.parser,\n    round = _scale$_parseOpts.round,\n    isoWeekday = _scale$_parseOpts.isoWeekday;\n  var value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  var ilen = UNITS.length;\n  for (var i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    var interval = INTERVALS[UNITS[i]];\n    var factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (var i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    var unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    var _lookup2 = _lookup(timestamps, time),\n      lo = _lookup2.lo,\n      hi = _lookup2.hi;\n    var timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  var adapter = scale._adapter;\n  var first = +adapter.startOf(ticks[0].value, majorUnit);\n  var last = ticks[ticks.length - 1].value;\n  var major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  var ticks = [];\n  var map = {};\n  var ilen = values.length;\n  var i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value: value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nvar TimeScale = /*#__PURE__*/function (_Scale4) {\n  _inherits(TimeScale, _Scale4);\n  var _super24 = _createSuper(TimeScale);\n  function TimeScale(props) {\n    var _this43;\n    _classCallCheck(this, TimeScale);\n    _this43 = _super24.call(this, props);\n    _this43._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    _this43._unit = 'day';\n    _this43._majorUnit = undefined;\n    _this43._offsets = {};\n    _this43._normalized = false;\n    _this43._parseOpts = undefined;\n    return _this43;\n  }\n  _createClass(TimeScale, [{\n    key: \"init\",\n    value: function init(scaleOpts) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var time = scaleOpts.time || (scaleOpts.time = {});\n      var adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n      adapter.init(opts);\n      mergeIf(time.displayFormats, adapter.formats());\n      this._parseOpts = {\n        parser: time.parser,\n        round: time.round,\n        isoWeekday: time.isoWeekday\n      };\n      _get(_getPrototypeOf(TimeScale.prototype), \"init\", this).call(this, scaleOpts);\n      this._normalized = opts.normalized;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (raw === undefined) {\n        return null;\n      }\n      return _parse(this, raw);\n    }\n  }, {\n    key: \"beforeLayout\",\n    value: function beforeLayout() {\n      _get(_getPrototypeOf(TimeScale.prototype), \"beforeLayout\", this).call(this);\n      this._cache = {\n        data: [],\n        labels: [],\n        all: []\n      };\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var options = this.options;\n      var adapter = this._adapter;\n      var unit = options.time.unit || 'day';\n      var _this$getUserBounds5 = this.getUserBounds(),\n        min = _this$getUserBounds5.min,\n        max = _this$getUserBounds5.max,\n        minDefined = _this$getUserBounds5.minDefined,\n        maxDefined = _this$getUserBounds5.maxDefined;\n      function _applyBounds(bounds) {\n        if (!minDefined && !isNaN(bounds.min)) {\n          min = Math.min(min, bounds.min);\n        }\n        if (!maxDefined && !isNaN(bounds.max)) {\n          max = Math.max(max, bounds.max);\n        }\n      }\n      if (!minDefined || !maxDefined) {\n        _applyBounds(this._getLabelBounds());\n        if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n          _applyBounds(this.getMinMax(false));\n        }\n      }\n      min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n      max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n      this.min = Math.min(min, max - 1);\n      this.max = Math.max(min + 1, max);\n    }\n  }, {\n    key: \"_getLabelBounds\",\n    value: function _getLabelBounds() {\n      var arr = this.getLabelTimestamps();\n      var min = Number.POSITIVE_INFINITY;\n      var max = Number.NEGATIVE_INFINITY;\n      if (arr.length) {\n        min = arr[0];\n        max = arr[arr.length - 1];\n      }\n      return {\n        min: min,\n        max: max\n      };\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var options = this.options;\n      var timeOpts = options.time;\n      var tickOpts = options.ticks;\n      var timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n      if (options.bounds === 'ticks' && timestamps.length) {\n        this.min = this._userMin || timestamps[0];\n        this.max = this._userMax || timestamps[timestamps.length - 1];\n      }\n      var min = this.min;\n      var max = this.max;\n      var ticks = _filterBetween(timestamps, min, max);\n      this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n      this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n      this.initOffsets(timestamps);\n      if (options.reverse) {\n        ticks.reverse();\n      }\n      return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n  }, {\n    key: \"afterAutoSkip\",\n    value: function afterAutoSkip() {\n      if (this.options.offsetAfterAutoskip) {\n        this.initOffsets(this.ticks.map(function (tick) {\n          return +tick.value;\n        }));\n      }\n    }\n  }, {\n    key: \"initOffsets\",\n    value: function initOffsets() {\n      var timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var start = 0;\n      var end = 0;\n      var first, last;\n      if (this.options.offset && timestamps.length) {\n        first = this.getDecimalForValue(timestamps[0]);\n        if (timestamps.length === 1) {\n          start = 1 - first;\n        } else {\n          start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n        }\n        last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n        if (timestamps.length === 1) {\n          end = last;\n        } else {\n          end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n        }\n      }\n      var limit = timestamps.length < 3 ? 0.5 : 0.25;\n      start = _limitValue(start, 0, limit);\n      end = _limitValue(end, 0, limit);\n      this._offsets = {\n        start: start,\n        end: end,\n        factor: 1 / (start + 1 + end)\n      };\n    }\n  }, {\n    key: \"_generate\",\n    value: function _generate() {\n      var adapter = this._adapter;\n      var min = this.min;\n      var max = this.max;\n      var options = this.options;\n      var timeOpts = options.time;\n      var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n      var stepSize = valueOrDefault(options.ticks.stepSize, 1);\n      var weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n      var hasWeekday = isNumber(weekday) || weekday === true;\n      var ticks = {};\n      var first = min;\n      var time, count;\n      if (hasWeekday) {\n        first = +adapter.startOf(first, 'isoWeek', weekday);\n      }\n      first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n      if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n        throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n      }\n      var timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n      for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n        addTick(ticks, time, timestamps);\n      }\n      if (time === max || options.bounds === 'ticks' || count === 1) {\n        addTick(ticks, time, timestamps);\n      }\n      return Object.keys(ticks).sort(sorter).map(function (x) {\n        return +x;\n      });\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      var adapter = this._adapter;\n      var timeOpts = this.options.time;\n      if (timeOpts.tooltipFormat) {\n        return adapter.format(value, timeOpts.tooltipFormat);\n      }\n      return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n  }, {\n    key: \"format\",\n    value: function format(value, _format) {\n      var options = this.options;\n      var formats = options.time.displayFormats;\n      var unit = this._unit;\n      var fmt = _format || formats[unit];\n      return this._adapter.format(value, fmt);\n    }\n  }, {\n    key: \"_tickFormatFunction\",\n    value: function _tickFormatFunction(time, index, ticks, format) {\n      var options = this.options;\n      var formatter = options.ticks.callback;\n      if (formatter) {\n        return callback(formatter, [time, index, ticks], this);\n      }\n      var formats = options.time.displayFormats;\n      var unit = this._unit;\n      var majorUnit = this._majorUnit;\n      var minorFormat = unit && formats[unit];\n      var majorFormat = majorUnit && formats[majorUnit];\n      var tick = ticks[index];\n      var major = majorUnit && majorFormat && tick && tick.major;\n      return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var i, ilen, tick;\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        tick = ticks[i];\n        tick.label = this._tickFormatFunction(tick.value, i, ticks);\n      }\n    }\n  }, {\n    key: \"getDecimalForValue\",\n    value: function getDecimalForValue(value) {\n      return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      var offsets = this._offsets;\n      var pos = this.getDecimalForValue(value);\n      return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var offsets = this._offsets;\n      var pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n      return this.min + pos * (this.max - this.min);\n    }\n  }, {\n    key: \"_getLabelSize\",\n    value: function _getLabelSize(label) {\n      var ticksOpts = this.options.ticks;\n      var tickLabelWidth = this.ctx.measureText(label).width;\n      var angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n      var cosRotation = Math.cos(angle);\n      var sinRotation = Math.sin(angle);\n      var tickFontSize = this._resolveTickFontOptions(0).size;\n      return {\n        w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n        h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n      };\n    }\n  }, {\n    key: \"_getLabelCapacity\",\n    value: function _getLabelCapacity(exampleTime) {\n      var timeOpts = this.options.time;\n      var displayFormats = timeOpts.displayFormats;\n      var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n      var exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n      var size = this._getLabelSize(exampleLabel);\n      var capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n      return capacity > 0 ? capacity : 1;\n    }\n  }, {\n    key: \"getDataTimestamps\",\n    value: function getDataTimestamps() {\n      var timestamps = this._cache.data || [];\n      var i, ilen;\n      if (timestamps.length) {\n        return timestamps;\n      }\n      var metas = this.getMatchingVisibleMetas();\n      if (this._normalized && metas.length) {\n        return this._cache.data = metas[0].controller.getAllParsedValues(this);\n      }\n      for (i = 0, ilen = metas.length; i < ilen; ++i) {\n        timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n      }\n      return this._cache.data = this.normalize(timestamps);\n    }\n  }, {\n    key: \"getLabelTimestamps\",\n    value: function getLabelTimestamps() {\n      var timestamps = this._cache.labels || [];\n      var i, ilen;\n      if (timestamps.length) {\n        return timestamps;\n      }\n      var labels = this.getLabels();\n      for (i = 0, ilen = labels.length; i < ilen; ++i) {\n        timestamps.push(_parse(this, labels[i]));\n      }\n      return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(values) {\n      return _arrayUnique(values.sort(sorter));\n    }\n  }]);\n  return TimeScale;\n}(Scale);\n_defineProperty(TimeScale, \"id\", 'time');\n_defineProperty(TimeScale, \"defaults\", {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    callback: false,\n    major: {\n      enabled: false\n    }\n  }\n});\nfunction interpolate(table, val, reverse) {\n  var lo = 0;\n  var hi = table.length - 1;\n  var prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      var _lookupByKey2 = _lookupByKey(table, 'pos', val);\n      lo = _lookupByKey2.lo;\n      hi = _lookupByKey2.hi;\n    }\n    var _table$lo = table[lo];\n    prevSource = _table$lo.pos;\n    prevTarget = _table$lo.time;\n    var _table$hi = table[hi];\n    nextSource = _table$hi.pos;\n    nextTarget = _table$hi.time;\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      var _lookupByKey3 = _lookupByKey(table, 'time', val);\n      lo = _lookupByKey3.lo;\n      hi = _lookupByKey3.hi;\n    }\n    var _table$lo2 = table[lo];\n    prevSource = _table$lo2.time;\n    prevTarget = _table$lo2.pos;\n    var _table$hi2 = table[hi];\n    nextSource = _table$hi2.time;\n    nextTarget = _table$hi2.pos;\n  }\n  var span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nvar TimeSeriesScale = /*#__PURE__*/function (_TimeScale) {\n  _inherits(TimeSeriesScale, _TimeScale);\n  var _super25 = _createSuper(TimeSeriesScale);\n  function TimeSeriesScale(props) {\n    var _this44;\n    _classCallCheck(this, TimeSeriesScale);\n    _this44 = _super25.call(this, props);\n    _this44._table = [];\n    _this44._minPos = undefined;\n    _this44._tableRange = undefined;\n    return _this44;\n  }\n  _createClass(TimeSeriesScale, [{\n    key: \"initOffsets\",\n    value: function initOffsets() {\n      var timestamps = this._getTimestampsForTable();\n      var table = this._table = this.buildLookupTable(timestamps);\n      this._minPos = interpolate(table, this.min);\n      this._tableRange = interpolate(table, this.max) - this._minPos;\n      _get(_getPrototypeOf(TimeSeriesScale.prototype), \"initOffsets\", this).call(this, timestamps);\n    }\n  }, {\n    key: \"buildLookupTable\",\n    value: function buildLookupTable(timestamps) {\n      var min = this.min,\n        max = this.max;\n      var items = [];\n      var table = [];\n      var i, ilen, prev, curr, next;\n      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n        curr = timestamps[i];\n        if (curr >= min && curr <= max) {\n          items.push(curr);\n        }\n      }\n      if (items.length < 2) {\n        return [{\n          time: min,\n          pos: 0\n        }, {\n          time: max,\n          pos: 1\n        }];\n      }\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        next = items[i + 1];\n        prev = items[i - 1];\n        curr = items[i];\n        if (Math.round((next + prev) / 2) !== curr) {\n          table.push({\n            time: curr,\n            pos: i / (ilen - 1)\n          });\n        }\n      }\n      return table;\n    }\n  }, {\n    key: \"_generate\",\n    value: function _generate() {\n      var min = this.min;\n      var max = this.max;\n      var timestamps = _get(_getPrototypeOf(TimeSeriesScale.prototype), \"getDataTimestamps\", this).call(this);\n      if (!timestamps.includes(min) || !timestamps.length) {\n        timestamps.splice(0, 0, min);\n      }\n      if (!timestamps.includes(max) || timestamps.length === 1) {\n        timestamps.push(max);\n      }\n      return timestamps.sort(function (a, b) {\n        return a - b;\n      });\n    }\n  }, {\n    key: \"_getTimestampsForTable\",\n    value: function _getTimestampsForTable() {\n      var timestamps = this._cache.all || [];\n      if (timestamps.length) {\n        return timestamps;\n      }\n      var data = this.getDataTimestamps();\n      var label = this.getLabelTimestamps();\n      if (data.length && label.length) {\n        timestamps = this.normalize(data.concat(label));\n      } else {\n        timestamps = data.length ? data : label;\n      }\n      timestamps = this._cache.all = timestamps;\n      return timestamps;\n    }\n  }, {\n    key: \"getDecimalForValue\",\n    value: function getDecimalForValue(value) {\n      return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var offsets = this._offsets;\n      var decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n      return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n  }]);\n  return TimeSeriesScale;\n}(TimeScale);\n_defineProperty(TimeSeriesScale, \"id\", 'timeseries');\n_defineProperty(TimeSeriesScale, \"defaults\", TimeScale.defaults);\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nvar registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"mappings":"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","names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","found","isFinite","sign","convertObjectDataToArray","data","meta","iScale","vScale","iAxisKey","axis","vAxisKey","adata","Array","isStacked","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","grouped","currentParsed","iScaleValue","skipNull","find","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","numbers","_index_","offset","grid","_value_","beginAtZero","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","spacing","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","animateRotate","calculateCircumference","animationOpts","centerX","centerY","animateScale","arc","metaData","formatNumber","locale","borderAlign","borderWidth","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","onClick","e","legendItem","toggleDataVisibility","LineController","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","showLine","segment","animated","spanGaps","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","angleLines","display","circular","pointLabels","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","registry","getElement","interaction","abstract","Error","DateAdapterBase","init","formats","format","diff","startOf","endOf","members","prototype","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","override","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","overrides","unregister","itemDefaults","merge","defaultRoutes","routeDefaults","descriptors","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","getResolver","resolver","subPrefixes","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","invalidatePlugins","version","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","capBezierPoints","hitRadius","PointElement","mouseX","mouseY","inXRange","inYRange","hoverRadius","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","containsDefaultColorsDefenitions","forceOverride","_args","chartOptions","containsColorDefenition","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","xSet","xAverage","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","_zero","logarithmic","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","animate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","_parseOpts","parser","isoWeekday","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","_unit","_majorUnit","_offsets","_normalized","adapters","displayFormats","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.animator.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.animation.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.animations.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.datasetController.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.line.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.adapters.ts","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.interaction.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.layouts.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\platform\\platform.base.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\platform\\platform.basic.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\platform\\platform.dom.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\platform\\index.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.element.ts","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.scale.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.registry.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.plugins.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.config.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.controller.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\elements\\element.arc.ts","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\elements\\element.line.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\elements\\element.point.ts","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\elements\\element.bar.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.category.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.linear.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.time.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","C:\\Users\\USER\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n\n  if (!found && !options.all) {\n    return 0;\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {iScale, vScale} = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\n    const skipNull = (meta) => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\n\nfunction getDatasetArea(meta, chartArea) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      // Unset pending resize request now to avoid possible recursion within _resize\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the event inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController, defaults} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    const containsColorDefenition = (\n      containsColorsDefinitions(datasets) ||\n      containsColorsDefinition(chartOptions) ||\n      (elements && containsColorsDefinitions(elements)) ||\n      containsDefaultColorsDefenitions());\n\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    // No visible items where found, return false so we don't have to divide by 0 which reduces in NaN\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || (index === 0 && this.min < 0)) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if ((index === 0 && this.min >= 0) && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}